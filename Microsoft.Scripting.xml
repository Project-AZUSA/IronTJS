<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Scripting</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Scripting.ArgumentTypeException">
            <summary>メソッドに渡された引数の型が正しくない場合にスローされる例外。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ArgumentTypeException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.ArgumentTypeException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ArgumentTypeException.#ctor(System.String)">
            <summary>指定したメッセージを使用して、<see cref="T:Microsoft.Scripting.ArgumentTypeException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">エラーを説明するメッセージ。</param>
        </member>
        <member name="M:Microsoft.Scripting.ArgumentTypeException.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Microsoft.Scripting.ArgumentTypeException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の原因を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は <c>null</c> 参照 (Visual Basic では、Nothing)。</param>
        </member>
        <member name="M:Microsoft.Scripting.ArgumentTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.ArgumentTypeException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.DocumentationOperations">
            <summary>生存期間中のオブジェクトに対して REPL ウィンドウで使用されるドキュメントを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.#ctor(Microsoft.Scripting.Runtime.DocumentationProvider)">
            <summary>
            指定された <see cref="T:Microsoft.Scripting.Runtime.DocumentationProvider"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.DocumentationOperations"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="provider">ドキュメントを提供する <see cref="T:Microsoft.Scripting.Runtime.DocumentationProvider"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetMembers(System.Object)">
            <summary>指定されたオブジェクトに定義されている利用可能なメンバを取得します。</summary>
            <param name="value">メンバを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetOverloads(System.Object)">
            <summary>指定されたオブジェクトが呼び出し可能であれば、利用可能なオーバーロードを取得します。</summary>
            <param name="value">オーバーロードを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetMembers(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに定義されている利用可能なメンバを取得します。</summary>
            <param name="value">メンバを取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.GetOverloads(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトが呼び出し可能であれば、利用可能なオーバーロードを取得します。</summary>
            <param name="value">オーバーロードを取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.DocumentationOperations.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.MemberDoc">
            <summary>生存期間中のメンバに関するドキュメントを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.MemberDoc.#ctor(System.String,Microsoft.Scripting.Hosting.MemberKind)">
            <summary>メンバの名前および種類を使用して、<see cref="T:Microsoft.Scripting.Hosting.MemberDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">説明するメンバの名前を指定します。</param>
            <param name="kind">説明するメンバの種類を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.MemberDoc.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.MemberDoc.Kind">
            <summary>すでに判明している場合にメンバの種類を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.MemberKind">
            <summary>メンバの種類を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.None">
            <summary>なし</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Class">
            <summary>クラス</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Delegate">
            <summary>デリゲート</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Enum">
            <summary>列挙体</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Event">
            <summary>イベント</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Field">
            <summary>フィールド</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Function">
            <summary>関数</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Module">
            <summary>モジュール</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Property">
            <summary>プロパティ</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Constant">
            <summary>定数</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.EnumMember">
            <summary>列挙体のメンバ</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Instance">
            <summary>インスタンス</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Method">
            <summary>メソッド</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.MemberKind.Namespace">
            <summary>名前空間</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.OverloadDoc">
            <summary>呼び出し可能オブジェクトの単一のオーバーロードに対するドキュメントを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.OverloadDoc.#ctor(System.String,System.String,System.Collections.Generic.ICollection{Microsoft.Scripting.Hosting.ParameterDoc})">
            <summary>名前、ドキュメント、引数リストを使用して、<see cref="T:Microsoft.Scripting.Hosting.OverloadDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">呼び出し可能オブジェクトの名前を指定します。</param>
            <param name="documentation">オーバーロードのドキュメントを指定します。null を指定することができます。</param>
            <param name="parameters">呼び出し可能オブジェクトの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.OverloadDoc.#ctor(System.String,System.String,System.Collections.Generic.ICollection{Microsoft.Scripting.Hosting.ParameterDoc},Microsoft.Scripting.Hosting.ParameterDoc)">
            <summary>名前、ドキュメント、引数リスト、戻り値を使用して、<see cref="T:Microsoft.Scripting.Hosting.OverloadDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">呼び出し可能オブジェクトの名前を指定します。</param>
            <param name="documentation">オーバーロードのドキュメントを指定します。null を指定することができます。</param>
            <param name="parameters">呼び出し可能オブジェクトの引数を指定します。</param>
            <param name="returnParameter">戻り値に関する情報を格納する <see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> オブジェクトを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Name">
            <summary>呼び出し可能オブジェクトの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Documentation">
            <summary>オーバーロードのドキュメントを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.Parameters">
            <summary>呼び出し可能オブジェクトの引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.OverloadDoc.ReturnParameter">
            <summary>戻り値に関する情報を格納する <see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ParameterDoc">
            <summary>単一の引数に関するドキュメントを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ParameterDoc.#ctor(System.String)">
            <summary>名前を使用して、<see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">引数の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ParameterDoc.#ctor(System.String,Microsoft.Scripting.Hosting.ParameterFlags)">
            <summary>名前および引数に関する追加情報を使用して、<see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">引数の名前を指定します。</param>
            <param name="paramFlags">引数に関する追加情報を表す <see cref="T:Microsoft.Scripting.Hosting.ParameterFlags"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ParameterDoc.#ctor(System.String,System.String)">
            <summary>名前および引数の型名を使用して、<see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">引数の名前を指定します。</param>
            <param name="typeName">引数の型名を指定します。null を指定することもできます。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ParameterDoc.#ctor(System.String,System.String,System.String)">
            <summary>名前、引数の型名およびドキュメントを使用して、<see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">引数の名前を指定します。</param>
            <param name="typeName">引数の型名を指定します。null を指定することもできます。</param>
            <param name="documentation">引数に関するドキュメントを指定します。null を指定することもできます。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ParameterDoc.#ctor(System.String,System.String,System.String,Microsoft.Scripting.Hosting.ParameterFlags)">
            <summary>名前、引数の型名、ドキュメントおよび追加情報を使用して、<see cref="T:Microsoft.Scripting.Hosting.ParameterDoc"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">引数の名前を指定します。</param>
            <param name="typeName">引数の型名を指定します。null を指定することもできます。</param>
            <param name="documentation">引数に関するドキュメントを指定します。null を指定することもできます。</param>
            <param name="paramFlags">引数に関する追加情報を表す <see cref="T:Microsoft.Scripting.Hosting.ParameterFlags"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Name">
            <summary>引数の名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.TypeName">
            <summary>型情報が利用可能ならば、引数の型名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Flags">
            <summary>引数に関する追加情報を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ParameterDoc.Documentation">
            <summary>この引数に対するドキュメントを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ParameterFlags">
            <summary>引数に関する追加情報を示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.ParameterFlags.None">
            <summary>追加情報はありません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.ParameterFlags.ParamsArray">
            <summary>引数は配列引数です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.ParameterFlags.ParamsDict">
            <summary>引数は辞書引数です。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DocumentationProvider">
            <summary>生存期間中のオブジェクトに対する言語固有のドキュメントを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DocumentationProvider.GetMembers(System.Object)">
            <summary>派生クラスでオーバーライドされると、指定されたオブジェクトに対するメンバのリストを取得します。</summary>
            <param name="value">メンバのリストを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DocumentationProvider.GetOverloads(System.Object)">
            <summary>派生クラスでオーバーライドされると、指定されたオブジェクトに対するオーバーロードのリストを取得します。</summary>
            <param name="value">オーバーロードのリストを取得するオブジェクトを指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicStackFrame">
            <summary>スタックフレームに関する情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicStackFrame.#ctor(System.Reflection.MethodBase,System.String,System.String,System.Int32)">
            <summary>メソッド、メソッド名、ファイル名、行番号を使用して、<see cref="T:Microsoft.Scripting.Runtime.DynamicStackFrame"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">スタックフレームが表すメソッドを指定します。</param>
            <param name="methodName">スタックフレームが表すメソッド名を指定します。</param>
            <param name="filename">スタックフレームが表すファイル名を指定します。</param>
            <param name="line">スタックフレームが表す行番号を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicStackFrame.ToString">
            <summary>このスタックフレームの文字列表現を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicStackFrame.Method">
            <summary>スタックフレームが表すメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicStackFrame.MethodName">
            <summary>スタックフレームが表すメソッド名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicStackFrame.FileName">
            <summary>スタックフレームが表すファイル名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicStackFrame.FileLineNumber">
            <summary>スタックフレームが表すファイルの行番号を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.CompilerOptions">
            <summary>コンパイラオプションを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.CompilerOptions.#ctor">
            <summary><see cref="T:Microsoft.Scripting.CompilerOptions"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.CompilerOptions.Clone">
            <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
            <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ErrorSink">
            <summary>報告されたエラーを処理する方法を提供します。既定ではすべてのエラーは例外を発生させます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ErrorSink.Default">
            <summary>既定の <see cref="T:Microsoft.Scripting.ErrorSink"/> を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ErrorSink.Null">
            <summary>すべてのエラーを無視する <see cref="T:Microsoft.Scripting.ErrorSink"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorSink.#ctor">
            <summary><see cref="T:Microsoft.Scripting.ErrorSink"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorSink.Add(Microsoft.Scripting.SourceUnit,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。</summary>
            <param name="source">エラーが発生したソースコードを示す <see cref="T:Microsoft.Scripting.SourceUnit"/> を指定します。</param>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ErrorSink.Add(System.String,System.String,System.String,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>
            この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。
            このオーバーロードは <see cref="T:Microsoft.Scripting.SourceUnit"/> オブジェクトが使用できない場合に呼び出されます。</summary>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="path">エラーが発生したソースコードのパスを指定します。</param>
            <param name="code">エラーが発生したソースコードを指定します。</param>
            <param name="line">エラーが発生した行を指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.ErrorCounter">
            <summary>発生したエラーを <see cref="T:Microsoft.Scripting.Severity"/> 毎にカウントする <see cref="T:Microsoft.Scripting.ErrorSink"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.#ctor">
            <summary><see cref="T:Microsoft.Scripting.ErrorCounter"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.#ctor(Microsoft.Scripting.ErrorSink)">
            <summary>
            基になる <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトを使用して、
            <see cref="T:Microsoft.Scripting.ErrorCounter"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="sink">発生したエラーを渡す <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.CountError(Microsoft.Scripting.Severity)">
            <summary><see cref="T:Microsoft.Scripting.Severity"/> 毎にエラーの個数をカウントします。</summary>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.ClearCounters">
            <summary>このオブジェクトのすべてのカウンタをクリアします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.Add(Microsoft.Scripting.SourceUnit,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。</summary>
            <param name="source">エラーが発生したソースコードを示す <see cref="T:Microsoft.Scripting.SourceUnit"/> を指定します。</param>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ErrorCounter.Add(System.String,System.String,System.String,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>
            この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。
            このオーバーロードは <see cref="T:Microsoft.Scripting.SourceUnit"/> オブジェクトが使用できない場合に呼び出されます。</summary>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="path">エラーが発生したソースコードのパスを指定します。</param>
            <param name="code">エラーが発生したソースコードを指定します。</param>
            <param name="line">エラーが発生した行を指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.ErrorCounter.FatalErrorCount">
            <summary>発生したエラー中の <see cref="F:Microsoft.Scripting.Severity.FatalError"/> の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ErrorCounter.ErrorCount">
            <summary>発生したエラー中の <see cref="F:Microsoft.Scripting.Severity.Error"/> の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ErrorCounter.WarningCount">
            <summary>発生したエラー中の <see cref="F:Microsoft.Scripting.Severity.Warning"/> の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ErrorCounter.AnyError">
            <summary>警告以外のエラーが発生したかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.CompiledCode">
            <summary><see cref="T:Microsoft.Scripting.ScriptCode"/> に対するもう 1 つのホスティング API を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.#ctor(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.ScriptCode)">
            <summary>
            コードをコンパイルした <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> および、実際のコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="engine">コードをコンパイルした <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を指定します。</param>
            <param name="code">実際のコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute">
            <summary>コードを既定のスコープで実行します。 </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープでコードを実行し、結果を返します。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute``1">
            <summary>既定のスコープでコードを実行し、結果を指定された型に変換します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.Execute``1(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープでコードを実行し、結果を指定された型に変換します。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap">
            <summary>既定のスコープでコードを実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を用いてラップします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープでコードを実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を用いてラップします。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(System.Runtime.Remoting.ObjectHandle@)">
            <summary>既定のスコープでコードを実行し、結果および発生した例外を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を用いてラップします。</summary>
            <param name="exception">発生した例外がラップされた <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope,System.Runtime.Remoting.ObjectHandle@)">
            <summary>指定されたスコープでコードを実行し、結果および発生した例外を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を用いてラップします。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <param name="exception">発生した例外がラップされた <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.CompiledCode.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.Engine">
            <summary>このコードをコンパイルした <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.ScriptCode">
            <summary>実際のコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.CompiledCode.DefaultScope">
            <summary>このコードの既定のスコープを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Configuration.LanguageElement">
            <summary>構成ファイル内の言語に関する構成要素を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.LanguageElement.GetNamesArray">
            <summary>この言語の名前を配列として取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.LanguageElement.GetExtensionsArray">
            <summary>この言語のソースファイルの拡張子を配列として取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElement.Properties">
            <summary>プロパティのコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElement.Names">
            <summary>この言語の名前を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElement.Extensions">
            <summary>この言語のソースファイルの拡張子を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElement.Type">
            <summary>この言語の言語プロバイダの型を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElement.DisplayName">
            <summary>この言語の表示名を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection">
            <summary>言語に関する構成要素のコレクションを格納する要素を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection.CreateNewElement">
            <summary>新しい <see cref="T:System.Configuration.ConfigurationElement"/> を作成します。</summary>
            <returns>新しく作成した <see cref="T:System.Configuration.ConfigurationElement"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>指定した構成要素の要素キーを取得します。</summary>
            <param name="element">キーを返す <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
            <returns>指定した <see cref="T:System.Configuration.ConfigurationElement"/> のキーとして機能する <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection.CollectionType">
            <summary><see cref="T:System.Configuration.ConfigurationElementCollection"/> の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection.ThrowOnDuplicate">
            <summary>
            重複する <see cref="T:System.Configuration.ConfigurationElement"/> を <see cref="T:System.Configuration.ConfigurationElementCollection"/>
            に追加しようとしたときに、例外をスローするかどうかを示す値を取得します。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.LanguageElementCollection.ElementName">
            <summary>構成ファイル内のこの要素のコレクションを識別するために使用する名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Configuration.OptionElement">
            <summary>構成ファイル内の言語オプションに関する構成要素を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.OptionElement.GetKey">
            <summary>この要素に対するキーを表すオブジェクトを取得します。</summary>
            <returns>この要素のキーとなるオブジェクト</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElement.Properties">
            <summary>プロパティのコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElement.Name">
            <summary>この言語オプションの名前を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElement.Value">
            <summary>この言語オプションの値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElement.Language">
            <summary>この言語オプションが対象とする言語の名前を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection">
            <summary>言語オプションに関する構成要素のコレクションを格納する要素を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection.CreateNewElement">
            <summary>新しい <see cref="T:System.Configuration.ConfigurationElement"/> を作成します。</summary>
            <returns>新しく作成した <see cref="T:System.Configuration.ConfigurationElement"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>指定した構成要素の要素キーを取得します。</summary>
            <param name="element">キーを返す <see cref="T:System.Configuration.ConfigurationElement"/>。</param>
            <returns>指定した <see cref="T:System.Configuration.ConfigurationElement"/> のキーとして機能する <see cref="T:System.Object"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection.CollectionType">
            <summary><see cref="T:System.Configuration.ConfigurationElementCollection"/> の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.OptionElementCollection.ThrowOnDuplicate">
            <summary>
            重複する <see cref="T:System.Configuration.ConfigurationElement"/> を <see cref="T:System.Configuration.ConfigurationElementCollection"/>
            に追加しようとしたときに、例外をスローするかどうかを示す値を取得します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Configuration.Section">
            <summary>言語およびそのオプションに関する情報を格納する構成ファイル内のセクションを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Configuration.Section.SectionName">
            <summary>このセクションの名前を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.Section.GetLanguages">
            <summary>このセクションから言語に関する構成要素を取得します。</summary>
            <returns>セクションに含まれる言語構成要素。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.Section.GetOptions">
            <summary>このセクションから言語オプションに関する構成要素を取得します。</summary>
            <returns>セクションに含まれる言語オプション構成要素。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Configuration.Section.LoadRuntimeSetup(Microsoft.Scripting.Hosting.ScriptRuntimeSetup,System.IO.Stream)">
            <summary>指定されたストリームから <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> オブジェクトに構成情報を読み込みます。</summary>
            <param name="setup">構成情報を書き込む <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を指定します。</param>
            <param name="configFileStream">構成情報を読み取るストリームを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.Section.Properties">
            <summary>プロパティのコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.Section.DebugMode">
            <summary>ランタイムがデバッグモードで動作するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Configuration.Section.PrivateBinding">
            <summary>CLR 可視性チェックを無視するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListener">
            <summary>
            ホストはこのクラスを使用してスクリプトの解析やコンパイル中に報告されたエラーを追跡することができます。
            <see cref="T:Microsoft.Scripting.ErrorSink"/> に対するもう 1 つのホスティング API です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListener.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListener.ErrorReported(Microsoft.Scripting.Hosting.ScriptSource,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>エラーが報告されたときに呼び出されます。</summary>
            <param name="source">エラーが発生した <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> です。</param>
            <param name="message">エラーに対するメッセージです。</param>
            <param name="span">エラーが発生した場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> です。</param>
            <param name="errorCode">エラーコードを示す整数値です。</param>
            <param name="severity">エラーの深刻さを示す値です。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListener.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorListenerProxySink">
            <summary>
            <see cref="T:Microsoft.Scripting.ErrorSink"/> と <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> の橋渡しを行います。
            <see cref="T:Microsoft.Scripting.ErrorSink"/> に対して言語コンパイラから報告されたエラーはホストが提供する <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> に転送されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListenerProxySink.#ctor(Microsoft.Scripting.Hosting.ScriptSource,Microsoft.Scripting.Hosting.ErrorListener)">
            <summary>
            エラーの発生元となる <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> とエラーを転送する <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.ErrorListenerProxySink"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="source">エラーの発生元となる <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を指定します。</param>
            <param name="listener">発生したエラーを転送する <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListenerProxySink.Add(Microsoft.Scripting.SourceUnit,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。</summary>
            <param name="sourceUnit">エラーが発生したソースコードを示す <see cref="T:Microsoft.Scripting.SourceUnit"/> を指定します。</param>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorListenerProxySink.Add(System.String,System.String,System.String,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>
            この <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトにエラーを追加します。
            このオーバーロードは <see cref="T:Microsoft.Scripting.SourceUnit"/> オブジェクトが使用できない場合に呼び出されます。</summary>
            <param name="message">エラーに対するメッセージを指定します。</param>
            <param name="path">エラーが発生したソースコードのパスを指定します。</param>
            <param name="code">エラーが発生したソースコードを指定します。</param>
            <param name="line">エラーが発生した行を指定します。</param>
            <param name="span">エラーが発生したソースコード上の場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
            <param name="errorCode">エラーコードを表す数値を指定します。</param>
            <param name="severity">エラーの深刻さを示す値を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ErrorSinkProxyListener">
            <summary>
            <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> と <see cref="T:Microsoft.Scripting.ErrorSink"/> の橋渡しを行います。
            <see cref="T:Microsoft.Scripting.Hosting.ErrorListenerProxySink"/> とは逆の機能を提供します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorSinkProxyListener.#ctor(Microsoft.Scripting.ErrorSink)">
            <summary>
            エラーが発生した際にエラーが転送される <see cref="T:Microsoft.Scripting.ErrorSink"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.ErrorSinkProxyListener"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="errorSink">エラーが発生した際にエラーが転送される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ErrorSinkProxyListener.ErrorReported(Microsoft.Scripting.Hosting.ScriptSource,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>エラーが報告されたときに呼び出されます。</summary>
            <param name="source">エラーが発生した <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> です。</param>
            <param name="message">エラーに対するメッセージです。</param>
            <param name="span">エラーが発生した場所を示す <see cref="T:Microsoft.Scripting.SourceSpan"/> です。</param>
            <param name="errorCode">エラーコードを示す整数値です。</param>
            <param name="severity">エラーの深刻さを示す値です。</param>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ExceptionOperations">
            <summary>言語内で発生した例外に関する操作を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.#ctor(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>
            言語に関する情報を表す <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.ExceptionOperations"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="context">言語に関する情報を表す <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.FormatException(System.Exception)">
            <summary>指定された例外を表す文字列を取得します。</summary>
            <param name="exception">文字列を取得する例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.GetExceptionMessage(System.Exception,System.String@,System.String@)">
            <summary>指定された例外に対するメッセージおよび例外の型を取得します。</summary>
            <param name="exception">メッセージおよび例外の型を取得する例外を指定します。</param>
            <param name="message">取得するメッセージを格納する変数を指定します。</param>
            <param name="errorTypeName">取得する例外の型を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.HandleException(System.Exception)">
            <summary>指定された例外をハンドルし、ハンドルに成功したかどうかを示す値を返します。</summary>
            <param name="exception">ハンドルする例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.GetStackFrames(System.Exception)">
            <summary>例外に対するスタックフレームを返します。</summary>
            <param name="exception">スタックフレームを取得する例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.FormatException(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定された例外を表す文字列を取得します。</summary>
            <param name="exception">文字列を取得する例外をラップしている <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.GetExceptionMessage(System.Runtime.Remoting.ObjectHandle,System.String@,System.String@)">
            <summary>指定された例外に対するメッセージおよび例外の型を取得します。</summary>
            <param name="exception">メッセージおよび例外の型を取得する例外をラップしている <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を指定します。</param>
            <param name="message">取得するメッセージを格納する変数を指定します。</param>
            <param name="errorTypeName">取得する例外の型を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.HandleException(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定された例外をハンドルし、ハンドルに成功したかどうかを示す値を返します。</summary>
            <param name="exception">ハンドルする例外をラップしている <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.GetStackFrames(System.Runtime.Remoting.ObjectHandle)">
            <summary>例外に対するスタックフレームを返します。</summary>
            <param name="exception">スタックフレームを取得する例外をラップしている <see cref="T:System.Runtime.Remoting.ObjectHandle"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ExceptionOperations.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.LanguageSetup">
            <summary>言語のセットアップに必要な情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String)">
            <summary>言語プロバイダのアセンブリ修飾型名を使用して、<see cref="T:Microsoft.Scripting.Hosting.LanguageSetup"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="typeName">言語プロバイダを表すアセンブリ修飾型名を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String,System.String)">
            <summary>
            言語プロバイダのアセンブリ修飾型名および言語の表示名を使用して、<see cref="T:Microsoft.Scripting.Hosting.LanguageSetup"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="typeName">言語プロバイダを表すアセンブリ修飾型名を指定します。</param>
            <param name="displayName">この言語の表示名を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            言語プロバイダのアセンブリ修飾型名、言語の表示名、大文字小文字が無視される言語の名前、ファイル拡張子を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.LanguageSetup"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="typeName">言語プロバイダを表すアセンブリ修飾型名を指定します。</param>
            <param name="displayName">この言語の表示名を指定します。</param>
            <param name="names">この言語の名前のリストを指定します。</param>
            <param name="fileExtensions">この言語のソースファイルに使用する拡張子のリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.GetOption``1(System.String,``0)">
            <summary>厳密に型指定された値としてオプションを取得します。</summary>
            <param name="name">取得するオプションの名前を指定します。</param>
            <param name="defaultValue">オプションが存在しない場合の既定値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.LanguageSetup.Freeze">
            <summary>このオブジェクトを変更不可能にします。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.TypeName">
            <summary>言語プロバイダのアセンブリ修飾型名を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.DisplayName">
            <summary>言語の表示名を取得または設定します。空である場合、<see cref="P:Microsoft.Scripting.Hosting.LanguageSetup.Names"/> の最初の要素が使用されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.Names">
            <summary>大文字と小文字を区別しない言語の名前のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.FileExtensions">
            <summary>大文字と小文字を区別しないファイルの拡張子のリストを取得します。ドットで始めることもできます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.Options">
            <summary>オプションのリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.LanguageSetup.ExceptionDetail">
            <summary>例外を詳細に説明するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ObjectOperations">
            <summary>
            メンバ アクセス、変換、インデックスなどといったオブジェクトの操作に関する大規模なカタログを提供します。
            これらはより高機能なホストにおいて利用可能な内部調査およびツールサポートサービスとなります。
            </summary>
            <remarks>
            <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> インスタンスは <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> より取得でき、
            操作のセマンティクスに対してエンジンに関連付けられます。<see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> には、
            エンジンのすべての使用に対して共有できる既定のインスタンスが存在しますが、非常に高機能なホストではインスタンスを作成することもできます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Object)">
            <summary>指定されたオブジェクトが呼び出し可能かどうかを示す値を取得します。</summary>
            <param name="obj">呼び出し可能かどうかを調べるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Object,System.Object[])">
            <summary>指定されたオブジェクトを指定された引数によって呼び出します。</summary>
            <param name="obj">呼び出すオブジェクトを指定します。</param>
            <param name="parameters">オブジェクト呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.InvokeMember(System.Object,System.String,System.Object[])">
            <summary>オブジェクトの指定されたメンバを指定された引数を用いて呼び出します。</summary>
            <param name="obj">呼び出すメンバを保持しているオブジェクトを指定します。</param>
            <param name="memberName">呼び出すメンバの名前を指定します。</param>
            <param name="parameters">メンバ呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Object,System.Object[])">
            <summary>指定されたオブジェクトに指定された引数を使用して新しいインスタンスを作成します。</summary>
            <param name="obj">インスタンスを作成する基になるオブジェクトを指定します。</param>
            <param name="parameters">インスタンスの作成の際に必要になる引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Object,System.String)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Object,System.String)">
            <summary>オブジェクトの指定されたメンバを取得し、結果を指定された型に変換します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが正常に取得された場合は true を返します。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="value">取得したメンバの値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Object,System.String)">
            <summary>オブジェクトに指定されたメンバが存在するかどうかを示す値を返します。</summary>
            <param name="obj">メンバが存在するかどうかを調べるオブジェクトを指定します。</param>
            <param name="name">存在するかどうかを調べるメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Object,System.String)">
            <summary>オブジェクトから指定されたメンバを削除します。</summary>
            <param name="obj">メンバを削除するオブジェクトを指定します。</param>
            <param name="name">削除するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。このオーバーロードは厳密に型指定されているため、ボックス化やキャストを避けることができます。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトの指定されたメンバを取得し、結果を指定された型に変換します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Object,System.String,System.Boolean,System.Object@)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが正常に取得された場合は true を返します。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
            <param name="value">取得したメンバの値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトに指定されたメンバが存在するかどうかを示す値を返します。</summary>
            <param name="obj">メンバが存在するかどうかを調べるオブジェクトを指定します。</param>
            <param name="name">存在するかどうかを調べるメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトから指定されたメンバを削除します。</summary>
            <param name="obj">メンバを削除するオブジェクトを指定します。</param>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Object,System.String,System.Object,System.Boolean)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Object,System.String,``0,System.Boolean)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。このオーバーロードは厳密に型指定されているため、ボックス化やキャストを避けることができます。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo``1(System.Object)">
            <summary>オブジェクトを指定された型に変換します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを指定された型に変換します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを指定された型に変換します。変換が成功した場合は true を返します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを指定された型に変換します。変換が成功した場合は true を返します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo``1(System.Object)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo``1(System.Object)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Object)">
            <summary>汎用の単項演算を指定された対象に対して実行します。</summary>
            <param name="operation">単項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">単項演算を作用させる対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``2(System.Linq.Expressions.ExpressionType,``0)">
            <summary>汎用の単項演算を厳密に型指定された対象に対して実行します。</summary>
            <param name="operation">単項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">単項演算を作用させる対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Object,System.Object)">
            <summary>汎用の二項演算を指定された対象に対して実行します。</summary>
            <param name="operation">二項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">二項演算を作用させる左側の対象を指定します。</param>
            <param name="other">二項演算を作用させる右側の対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation``3(System.Linq.Expressions.ExpressionType,``0,``1)">
            <summary>汎用の二項演算を厳密に型指定された対象に対して実行します。</summary>
            <param name="operation">二項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">二項演算を作用させる左側の対象を指定します。</param>
            <param name="other">二項演算を作用させる右側の対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して加算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被加数を指定します。</param>
            <param name="other">加数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して減算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被減数を指定します。</param>
            <param name="other">減数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して累乗を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">底を指定します。</param>
            <param name="other">指数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して乗算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被乗数を指定します。</param>
            <param name="other">乗数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して除算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被除数を指定します。</param>
            <param name="other">除数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulo(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対する剰余を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被除数を指定します。</param>
            <param name="other">除数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して左シフトを実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">左シフトするオブジェクトを指定します。</param>
            <param name="other">シフト量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対して右シフトを実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">右シフトするオブジェクトを指定します。</param>
            <param name="other">シフト量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対するビット積を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">ビット積を取得する 1 番目のオブジェクトを指定します。</param>
            <param name="other">ビット積を取得する 2 番目のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対するビット和を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">ビット和を取得する 1 番目のオブジェクトを指定します。</param>
            <param name="other">ビット和を取得する 2 番目のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Object,System.Object)">
            <summary>指定されたオブジェクトに対する排他的論理和を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">排他的論理和を取得する 1 番目のオブジェクトを指定します。</param>
            <param name="other">排他的論理和を取得する 2 番目のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクト未満のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクトよりも大きいときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクト以下のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクト以上のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクトと等しいときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Object,System.Object)">
            <summary>指定されたオブジェクトを比較して、左側のオブジェクトが右側のオブジェクトと等しくないときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のオブジェクトを指定します。</param>
            <param name="other">比較する右側のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Format(System.Object)">
            <summary>指定されたオブジェクトの文字列表現を言語固有の表示形式で返します。</summary>
            <param name="obj">文字列表現を取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Object)">
            <summary>オブジェクトの既知のメンバの一覧を返します。</summary>
            <param name="obj">メンバの一覧を取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Object)">
            <summary>指定されたオブジェクトに対する文字列で提供されるドキュメントを返します。</summary>
            <param name="obj">ドキュメントを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Object)">
            <summary>ユーザーに対する表示形式の指定されたオブジェクトの呼び出しに対して適用されるシグネチャのリストを返します。</summary>
            <param name="obj">シグネチャのリストを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.IsCallable(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトが呼び出し可能かどうかを示す値を取得します。</summary>
            <param name="obj">呼び出し可能かどうかを調べるリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle[])">
            <summary>指定されたリモートオブジェクトをリモートオブジェクトで表現された指定された引数によって呼び出します。</summary>
            <param name="obj">呼び出すリモートオブジェクトを指定します。</param>
            <param name="parameters">オブジェクト呼び出しのリモートオブジェクトで表現された引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Invoke(System.Runtime.Remoting.ObjectHandle,System.Object[])">
            <summary>指定されたリモートオブジェクトを指定された引数によって呼び出します。</summary>
            <param name="obj">呼び出すリモートオブジェクトを指定します。</param>
            <param name="parameters">オブジェクト呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle[])">
            <summary>指定されたリモートオブジェクトにリモートオブジェクトで表現された指定された引数を使用して新しいインスタンスを作成します。</summary>
            <param name="obj">インスタンスを作成する基になるリモートオブジェクトを指定します。</param>
            <param name="parameters">インスタンスの作成の際に必要になるリモートオブジェクトで表現された引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.CreateInstance(System.Runtime.Remoting.ObjectHandle,System.Object[])">
            <summary>指定されたリモートオブジェクトに指定された引数を使用して新しいインスタンスを作成します。</summary>
            <param name="obj">インスタンスを作成する基になるリモートオブジェクトを指定します。</param>
            <param name="parameters">インスタンスの作成の際に必要になる引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>リモートオブジェクトの指定されたメンバにリモートオブジェクトによって指定された値を設定します。</summary>
            <param name="obj">設定するメンバを保持しているリモートオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定するリモートオブジェクトで表現された値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.SetMember``1(System.Runtime.Remoting.ObjectHandle,System.String,``0)">
            <summary>リモートオブジェクトの指定されたメンバに指定された値を設定します。このオーバーロードは厳密に型指定されているため、ボックス化やキャストを避けることができます。</summary>
            <param name="obj">設定するメンバを保持しているリモートオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>リモートオブジェクトの指定されたメンバを取得します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているリモートオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMember``1(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>リモートオブジェクトの指定されたメンバを取得し、結果を指定された型に変換します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているリモートオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryGetMember(System.Runtime.Remoting.ObjectHandle,System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>リモートオブジェクトの指定されたメンバを取得します。メンバが正常に取得された場合は true を返します。</summary>
            <param name="obj">取得するメンバを保持しているリモートオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="value">取得したメンバの値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ContainsMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>リモートオブジェクトに指定されたメンバが存在するかどうかを示す値を返します。</summary>
            <param name="obj">メンバが存在するかどうかを調べるリモートオブジェクトを指定します。</param>
            <param name="name">存在するかどうかを調べるメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RemoveMember(System.Runtime.Remoting.ObjectHandle,System.String)">
            <summary>リモートオブジェクトから指定されたメンバを削除します。</summary>
            <param name="obj">メンバを削除するリモートオブジェクトを指定します。</param>
            <param name="name">削除するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>リモートオブジェクトを指定された型に変換します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>リモートオブジェクトを指定された型に変換します。変換が成功した場合は true を返します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたリモートオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>リモートオブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryExplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>リモートオブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたリモートオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ImplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type)">
            <summary>リモートオブジェクトを指定された型に暗黙的に変換します。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.TryImplicitConvertTo(System.Runtime.Remoting.ObjectHandle,System.Type,System.Runtime.Remoting.ObjectHandle@)">
            <summary>リモートオブジェクトを指定された型に暗黙的に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するリモートオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたリモートオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Unwrap``1(System.Runtime.Remoting.ObjectHandle)">
            <summary>リモートオブジェクトのラッピングを解除し、指定された型に変換します。</summary>
            <param name="obj">ラッピングを解除するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Runtime.Remoting.ObjectHandle)">
            <summary>汎用の単項演算を指定された対象に対して実行します。</summary>
            <param name="op">単項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">単項演算を作用させる対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.DoOperation(System.Linq.Expressions.ExpressionType,System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>汎用の二項演算を指定された対象に対して実行します。</summary>
            <param name="op">二項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">二項演算を作用させる左側の対象を指定します。</param>
            <param name="other">二項演算を作用させる右側の対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Add(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して加算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被加数を指定します。</param>
            <param name="other">加数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Subtract(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して減算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被減数を指定します。</param>
            <param name="other">減数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Power(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して累乗を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">底を指定します。</param>
            <param name="other">指数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Multiply(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して乗算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被乗数を指定します。</param>
            <param name="other">乗数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Divide(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して除算を実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被除数を指定します。</param>
            <param name="other">除数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Modulo(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対する剰余を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">被除数を指定します。</param>
            <param name="other">除数を指定します。</param>      
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LeftShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して左シフトを実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">左シフトするリモートオブジェクトを指定します。</param>
            <param name="other">シフト量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.RightShift(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対して右シフトを実行します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">右シフトするリモートオブジェクトを指定します。</param>
            <param name="other">シフト量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseAnd(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対するビット積を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">ビット積を取得する 1 番目のリモートオブジェクトを指定します。</param>
            <param name="other">ビット積を取得する 2 番目のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.BitwiseOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対するビット和を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">ビット和を取得する 1 番目のリモートオブジェクトを指定します。</param>
            <param name="other">ビット和を取得する 2 番目のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.ExclusiveOr(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対する排他的論理和を取得します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">排他的論理和を取得する 1 番目のリモートオブジェクトを指定します。</param>
            <param name="other">排他的論理和を取得する 2 番目のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクト未満のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThan(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクトよりも大きいときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.LessThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクト以下のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GreaterThanOrEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクト以上のときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Equal(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクトと等しいときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.NotEqual(System.Runtime.Remoting.ObjectHandle,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトを比較して、左側のリモートオブジェクトが右側のリモートオブジェクトと等しくないときに true を返します。操作が実行できない場合には例外を発生させます。</summary>
            <param name="self">比較する左側のリモートオブジェクトを指定します。</param>
            <param name="other">比較する右側のリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.Format(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトの文字列表現を言語固有の表示形式で返します。</summary>
            <param name="obj">文字列表現を取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetMemberNames(System.Runtime.Remoting.ObjectHandle)">
            <summary>リモートオブジェクトの既知のメンバの一覧を返します。</summary>
            <param name="obj">メンバの一覧を取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetDocumentation(System.Runtime.Remoting.ObjectHandle)">
            <summary>指定されたリモートオブジェクトに対する文字列で提供されるドキュメントを返します。</summary>
            <param name="obj">ドキュメントを取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.GetCallSignatures(System.Runtime.Remoting.ObjectHandle)">
            <summary>ユーザーに対する表示形式の指定されたリモートオブジェクトの呼び出しに対して適用されるシグネチャのリストを返します。</summary>
            <param name="obj">シグネチャのリストを取得するリモートオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ObjectOperations.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.IAttributesCollection">
            <summary>シンボルおよび任意のオブジェクトを使用することでアクセス可能なディクショナリを表します。</summary>
            <remarks>
            このインターフェイスは概念的に <see cref="T:System.Collections.Generic.IDictionary`2"/> を継承しますが、
            オブジェクトではなく <see cref="T:Microsoft.Scripting.SymbolId"/> にインデックスされるようにしたいのでそのようにしません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.Add(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用する <see cref="T:Microsoft.Scripting.SymbolId"/>。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.TryGetValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を実装するオブジェクトに格納されている場合は
            <c>true</c>。それ以外の場合は <c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.Remove(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.ContainsKey(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.IAttributesCollection"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.Add(System.Object,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用するオブジェクト。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.TryGetValue(System.Object,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を実装するオブジェクトに格納されている場合は
            <c>true</c>。それ以外の場合は <c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.Remove(System.Object)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.ContainsKey(System.Object)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.IAttributesCollection"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.IAttributesCollection.AsObjectKeyedDictionary">
            <summary>このオブジェクトを <see cref="T:System.Collections.Generic.IDictionary`2"/> として取得します。</summary>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> という形式で取得された現在のオブジェクト。</returns>
        </member>
        <member name="P:Microsoft.Scripting.IAttributesCollection.Item(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="name">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.IAttributesCollection.SymbolAttributes">
            <summary><see cref="T:Microsoft.Scripting.SymbolId"/> がキーである属性のディクショナリを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.IAttributesCollection.Count">
            <summary><see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されている要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.IAttributesCollection.Keys">
            <summary><see cref="T:Microsoft.Scripting.IAttributesCollection"/> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.InvalidImplementationException">
            <summary>メソッドの実装が正しくない場合にスローされる例外。</summary>
        </member>
        <member name="M:Microsoft.Scripting.InvalidImplementationException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.InvalidImplementationException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.InvalidImplementationException.#ctor(System.String)">
            <summary>指定したメッセージを使用して、<see cref="T:Microsoft.Scripting.InvalidImplementationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">エラーを説明するメッセージ。</param>
        </member>
        <member name="M:Microsoft.Scripting.InvalidImplementationException.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Microsoft.Scripting.InvalidImplementationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の原因を説明するエラー メッセージ。</param>
            <param name="e">現在の例外の原因である例外。内部例外が指定されていない場合は <c>null</c> 参照 (Visual Basic では、Nothing)。</param>
        </member>
        <member name="M:Microsoft.Scripting.InvalidImplementationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.InvalidImplementationException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
        </member>
        <member name="T:Microsoft.Scripting.LanguageOptions">
            <summary>言語に関するオプションを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.#ctor">
            <summary><see cref="T:Microsoft.Scripting.LanguageOptions"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>オプションを格納するディクショナリを使用して、<see cref="T:Microsoft.Scripting.LanguageOptions"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="options">このオブジェクトにオプションを設定するために使用されるディクショナリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.GetOption``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>オプションを格納するディクショナリから指定した名前のオプションに対する値を取得します。</summary>
            <param name="options">オプションを格納するディクショナリを指定します。</param>
            <param name="name">取得するオプションの名前を指定します。</param>
            <param name="defaultValue">取得するオプションの値の既定値を指定します。</param>
            <returns>取得されたオプションの値。オプションが存在しない場合は既定値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.GetStringCollectionOption(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Char[])">
            <summary>値が <c>null</c> でない文字列のコレクションであると予測されるオプションを取得します。オプションのコピーの読み取り専用の値を取得します。</summary>
            <param name="options">オプションを格納するディクショナリを指定します。</param>
            <param name="name">取得するオプションの名前を指定します。</param>
            <param name="separators">取得された文字列を分割する Unicode 文字の配列を指定します。</param>
            <returns>取得されたオプションの値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.LanguageOptions.GetSearchPathsOption(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>オプションを格納するディクショナリから検索パスを取得します。</summary>
            <param name="options">オプションを格納するディクショナリを指定します。</param>
            <returns>取得されたオプションの値。</returns>
        </member>
        <member name="F:Microsoft.Scripting.LanguageOptions.EmptyStringCollection">
            <summary>読み取り専用の文字列の空のコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.NoAdaptiveCompilation">
            <summary>ランタイム履歴に基づいた最適化を行わないかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.CompilationThreshold">
            <summary>インタプリタがコンパイルを始める前の反復回数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.ExceptionDetail">
            <summary>例外が補足された際に例外の詳細 (コールスタック) を表示するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.ShowClrExceptions">
            <summary>CLR の例外を表示するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.PerfStats">
            <summary>パフォーマンス統計情報を収集するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.LanguageOptions.SearchPaths">
            <summary>ホストによって提供された初期のファイル検索パスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.PlatformAdaptationLayer">
            <summary>
            DLR によって使用される潜在的にプラットフォーム固有となりうるシステム操作を抽象化します。
            ホストは DLR が動作するプラットフォームに合わせて <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を実装できます。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.PlatformAdaptationLayer.Default">
            <summary><see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> オブジェクトの既定のインスタンスを取得します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PlatformAdaptationLayer.IsCompactFramework">
            <summary>このプラットフォームが Compact Framework であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.LoadAssembly(System.String)">
            <summary>長い形式の名前を指定してアセンブリを読み込みます。</summary>
            <param name="name">長い形式のアセンブリ名。</param>
            <returns>読み込み済みのアセンブリ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.LoadAssemblyFromPath(System.String)">
            <summary>指定したパスのアセンブリ ファイルの内容を読み込みます。</summary>
            <param name="path">読み込むファイルのパス。</param>
            <returns>読み込み済みのアセンブリ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.TerminateScriptExecution(System.Int32)">
            <summary>スクリプトの実行を終了し、指定された終了コードを基になるプラットフォームに渡します。</summary>
            <param name="exitCode">プラットフォームに渡される終了コード。 処理が正常に完了したことを示す場合は 0 (ゼロ) を使用します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.FileExists(System.String)">
            <summary>指定されたファイルが存在するかどうかを示す値を返します。</summary>
            <param name="path">存在を調べるファイルのパスを指定します。</param>
            <returns>ファイルが存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.DirectoryExists(System.String)">
            <summary>指定されたディレクトリが存在するかどうかを示す値を返します。</summary>
            <param name="path">存在を調べるディレクトリのパスを指定します。</param>
            <returns>ディレクトリが存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>指定されたファイルを読み書きするストリームを作成します。</summary>
            <param name="path">ファイルを示すパスを指定します。</param>
            <param name="mode">ファイルを開く方法を指定します。</param>
            <param name="access">ファイルに対するアクセス許可を指定します。</param>
            <param name="share">ファイルに対する共有アクセス許可を指定します。</param>
            <returns>開かれたストリーム。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.OpenFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>指定されたファイルを読み書きするストリームを作成します。</summary>
            <param name="path">ファイルを示すパスを指定します。</param>
            <param name="mode">ファイルを開く方法を指定します。</param>
            <param name="access">ファイルに対するアクセス許可を指定します。</param>
            <param name="share">ファイルに対する共有アクセス許可を指定します。</param>
            <param name="bufferSize">ファイルの読み書きに使用されるバッファの大きさを指定します。</param>
            <returns>開かれたストリーム。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.OpenInputFileStream(System.String)">
            <summary>指定されたファイルを読み取るストリームを作成します。</summary>
            <param name="path">ファイルを示すパスを指定します。</param>
            <returns>開かれた読み取り専用のストリーム。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.OpenOutputFileStream(System.String)">
            <summary>指定されたファイルに書き込むストリームを作成します。</summary>
            <param name="path">ファイルを示すパスを指定します。</param>
            <returns>開かれた書き込み専用のストリーム。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.DeleteFile(System.String,System.Boolean)">
            <summary>指定されたファイルを削除します。</summary>
            <param name="path">削除するファイルを示すパスを指定します。</param>
            <param name="deleteReadOnly">ファイルが読み取り専用でも削除するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFileSystemEntries(System.String,System.String)">
            <summary>指定されたパスにある検索条件に一致するファイルおよびディレクトリを返します。</summary>
            <param name="path">検索するパスを指定します。</param>
            <param name="searchPattern">検索条件を指定します。</param>
            <returns>見つかったファイルおよびディレクトリのパスを含む配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFileSystemEntries(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>指定されたパスにある検索条件に一致するファイルやディレクトリを返します。</summary>
            <param name="path">検索するパスを指定します。</param>
            <param name="searchPattern">検索条件を指定します。</param>
            <param name="includeFiles">検索結果にファイルを含むかどうかを示す値を指定します。</param>
            <param name="includeDirectories">検索結果にディレクトリを含むかどうかを示す値を指定します。</param>
            <returns>見つかったファイルやディレクトリのパスを含む配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFullPath(System.String)">
            <summary>指定されたパスに対するフルパスを取得します。</summary>
            <param name="path">フルパスを取得するパスを指定します。</param>
            <returns>フルパス。</returns>
            <exception cref="T:System.ArgumentException">正しくないパスを指定しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.CombinePaths(System.String,System.String)">
            <summary>2 つの文字列を 1 つのパスに結合します。</summary>
            <param name="path1">結合する 1 番目のパス。</param>
            <param name="path2">結合する 2 番目のパス。</param>
            <returns>結合されたパス。 </returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFileName(System.String)">
            <summary>指定したパス文字列のファイル名と拡張子を返します。</summary>
            <param name="path">ファイル名と拡張子の取得元のパス文字列。</param>
            <returns><paramref name="path"/> の最後のディレクトリ文字の後ろの文字。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetDirectoryName(System.String)">
            <summary>指定したパス文字列のディレクトリ情報を返します。</summary>
            <param name="path">ファイルまたはディレクトリのパス。</param>
            <returns><paramref name="path"/> のディレクトリ情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetExtension(System.String)">
            <summary>指定したパス文字列の拡張子を返します。</summary>
            <param name="path">拡張子の取得元のパス文字列。</param>
            <returns>指定したパスの拡張子 (ピリオド "." を含む)、<c>null</c>、または <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetFileNameWithoutExtension(System.String)">
            <summary>指定したパス文字列のファイル名を拡張子を付けずに返します。</summary>
            <param name="path">ファイルのパス。</param>
            <returns>拡張子およびドットを除いたファイル名。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.IsAbsolutePath(System.String)">
            <summary>指定されたパスが絶対パスであるかどうかを調べます。</summary>
            <param name="path">絶対パスかどうかを調べるパスを指定します。</param>
            <returns>パスが絶対パスならば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <exception cref="T:System.ArgumentException">正しくないパスを指定しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.CreateDirectory(System.String)">
            <summary>指定したパスにすべてのディレクトリとサブディレクトリを作成します。</summary>
            <param name="path">作成するディレクトリ パス。</param>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.DeleteDirectory(System.String,System.Boolean)">
            <summary>指定したディレクトリと、特に指定されている場合はディレクトリ内の任意のサブディレクトリおよびファイルを削除します。</summary>
            <param name="path">削除するディレクトリの名前。</param>
            <param name="recursive"><paramref name="path"/> のディレクトリ、サブディレクトリ、およびファイルを削除する場合は <c>true</c>。それ以外の場合は <c>false。</c></param>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.MoveFileSystemEntry(System.String,System.String)">
            <summary>ファイルまたはディレクトリ、およびその内容を新しい場所に移動します。</summary>
            <param name="sourcePath">移動するファイルまたはディレクトリのパス。</param>
            <param name="destinationPath"><paramref name="sourcePath"/> の新しい位置へのパス。 <paramref name="sourcePath"/> がファイルの場合は、<paramref name="destinationPath"/> もファイル名にする必要があります。</param>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.GetEnvironmentVariable(System.String)">
            <summary>現在のプロセスから環境変数の値を取得します。</summary>
            <param name="key">環境変数の名前。</param>
            <returns><paramref name="key"/> で指定された環境変数の値。環境変数が見つからなかった場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.PlatformAdaptationLayer.SetEnvironmentVariable(System.String,System.String)">
            <summary>現在のプロセスに格納されている環境変数を作成、変更、または削除します。</summary>
            <param name="key">環境変数の名前。</param>
            <param name="value"><paramref name="key"/> に割り当てる値。</param>
        </member>
        <member name="P:Microsoft.Scripting.PlatformAdaptationLayer.PathComparer">
            <summary>現在のプラットフォームにおいてパスを比較する <see cref="T:System.StringComparer"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.PlatformAdaptationLayer.CurrentDirectory">
            <summary>アプリケーションの現在の作業ディレクトリを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.PlatformAdaptationLayer.EnvironmentVariables">
            <summary>すべての環境変数の名前と値を現在のプロセスから取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Providers.HostingHelpers">
            <summary>
            ホスティング API プロバイダに対する高度な API を提供します。これらのメソッドはホストから使用するものではありません。
            これらは既存のホスティング API に影響を及ぼしたり言語固有の機能で拡張したりしたいと考える他のホスティング API 実装者に対して提供されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetDomainManager(Microsoft.Scripting.Hosting.ScriptRuntime)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> から <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を取得します。</summary>
            <param name="runtime"><see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runtime"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="runtime"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetLanguageContext(Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> から <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を取得します。</summary>
            <param name="engine"><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="engine"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetSourceUnit(Microsoft.Scripting.Hosting.ScriptSource)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> から <see cref="T:Microsoft.Scripting.SourceUnit"/> を取得します。</summary>
            <param name="scriptSource"><see cref="T:Microsoft.Scripting.SourceUnit"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptSource"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="scriptSource"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetScriptCode(Microsoft.Scripting.Hosting.CompiledCode)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> から <see cref="T:Microsoft.Scripting.ScriptCode"/> を取得します。</summary>
            <param name="compiledCode"><see cref="T:Microsoft.Scripting.ScriptCode"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="compiledCode"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="compiledCode"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetSharedIO(Microsoft.Scripting.Hosting.ScriptIO)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptIO"/> から <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> を取得します。</summary>
            <param name="io"><see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptIO"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="io"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="io"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.GetScope(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> から <see cref="T:Microsoft.Scripting.Runtime.Scope"/> を取得します。</summary>
            <param name="scriptScope"><see cref="T:Microsoft.Scripting.Runtime.Scope"/> を取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="scriptScope"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="scriptScope"/> はリモートです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CreateScriptScope(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Runtime.Scope)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> および <see cref="T:Microsoft.Scripting.Runtime.Scope"/> から新しい <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。</summary>
            <param name="engine">新しい <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> の基になるエンジンを指定します。</param>
            <param name="scope">新しい <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> の基になる <see cref="T:Microsoft.Scripting.Runtime.Scope"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="engine"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="engine"/> は透過プロキシです。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CallEngine``2(Microsoft.Scripting.Hosting.ScriptEngine,System.Func{Microsoft.Scripting.Runtime.LanguageContext,``0,``1},``0)">
            <summary><see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> のアプリケーションドメイン内のコールバックを実行し、結果を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Providers.HostingHelpers.CreateDocumentationOperations(Microsoft.Scripting.Runtime.DocumentationProvider)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.DocumentationProvider"/> から新しい <see cref="T:Microsoft.Scripting.Hosting.DocumentationOperations"/> を作成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptEngine">
            <summary>ホスティング API における言語を表します。<see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> に対するもう 1 つのホスティング API です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.#ctor(Microsoft.Scripting.Hosting.ScriptRuntime,Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>
            指定されたランタイムおよび <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を使用して、
            <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="runtime">このエンジンに関連付けるランタイムを指定します。</param>
            <param name="context">このエンジンの基になる <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations">
            <summary>新しい <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateOperations(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>
            指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> に特有のあらゆるセマンティクスを継承する
            新しい <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトを作成します。
            </summary>
            <param name="scope">作成する <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> の基となる <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute(System.String)">
            <summary>式を実行します。実行は特にどのスコープにも関連付けられません。</summary>
            <param name="expression">実行する式を指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープで式を実行します。</summary>
            <param name="expression">実行する式を指定します。</param>
            <param name="scope">式を実行するスコープを指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute``1(System.String)">
            <summary>式を新しいスコープで実行し、結果を指定された型に変換します。</summary>
            <param name="expression">実行する式を指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Execute``1(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>式を指定されたスコープで実行し、結果を指定された型に変換します。</summary>
            <param name="expression">実行する式を指定します。</param>
            <param name="scope">式を実行するスコープを指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="expression"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteFile(System.String)">
            <summary>指定されたファイルの内容を新しいスコープで実行し、そのスコープを返します。</summary>
            <param name="path">実行するファイルのパスを指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteFile(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたファイルの内容を指定されたスコープで実行します。</summary>
            <param name="path">実行するファイルのパスを指定します。</param>
            <param name="scope">ファイルの内容を実行するスコープを指定します。</param>
            <exception cref="T:System.NotSupportedException">エンジンはコードの実行をサポートしていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> は <c>null</c> 参照です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="scope"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープで式を実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップして返します。</summary>
            <param name="expression">実行する式を指定します。</param>
            <param name="scope">式を実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String)">
            <summary>空のスコープで式を実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップして返します。</summary>
            <param name="expression">実行する式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,Microsoft.Scripting.Hosting.ScriptScope,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            指定されたスコープで式を実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップして返します。
            例外が発生した場合は例外を捕捉し、その <see cref="T:System.Runtime.Remoting.ObjectHandle"/> が提供されます。
            </summary>
            <param name="expression">実行する式を指定します。</param>
            <param name="scope">式を実行するスコープを指定します。</param>
            <param name="exception">発生した例外に対する <see cref="T:System.Runtime.Remoting.ObjectHandle"/> が格納される変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.ExecuteAndWrap(System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>
            空のスコープで式を実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップして返します。
            例外が発生した場合は例外を捕捉し、その <see cref="T:System.Runtime.Remoting.ObjectHandle"/> が提供されます。
            </summary>
            <param name="expression">実行する式を指定します。</param>
            <param name="exception">発生した例外に対する <see cref="T:System.Runtime.Remoting.ObjectHandle"/> が格納される変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScope">
            <summary>新しい空の <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScope(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            ストレージとして任意のオブジェクトを用いる新しい <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> に対するアクセスはオブジェクトに対するメンバの取得、設定、削除になります。
            </summary>
            <param name="storage"><see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> のストレージとなるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetScope(System.String)">
            <summary>
            指定されたパスに対する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> が実行された
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を取得します。
            </summary>
            <remarks>
            <see cref="P:Microsoft.Scripting.Hosting.ScriptSource.Path"/> プロパティは
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> の検索のキーとなります。
            ホストは <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を作成し
            <see cref="P:Microsoft.Scripting.Hosting.ScriptSource.Path"/> プロパティを適切に設定することを確認する必要があります。
            
            <see cref="M:Microsoft.Scripting.Hosting.ScriptEngine.GetScope(System.String)"/> はファイルとその実行スコープをマッピングする必要があるようなツールにとって非常に役に立ちます。
            たとえば、エディタやインタプリタといったツールはファイル Bar をインポートしたり必要としたりしているファイル Foo を実行する可能性があります。
            
            エディタのユーザーは後にファイル Bar を開き、そのコンテキスト内にある式を実行したいと思うかもしれません。
            ツールは Bar のインタプリタウィンドウ内の適切なコンテキストを設定することで、
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を見つける必要があるでしょう。
            このメソッドはこのようなシナリオに対して有効となります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String)">
            <summary>言語バインディングとして現在のエンジンを使用して、文字列から <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="expression">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる文字列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語バインディングとして現在のエンジンを使用して、文字列から <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="code">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる文字列を指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String)">
            <summary>言語バインディングとして現在のエンジンを使用して、文字列から <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="expression">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる文字列を指定します。</param>
            <param name="path">ソースコードのパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromString(System.String,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語バインディングとして現在のエンジンを使用して、文字列から <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="code">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる文字列を指定します。</param>
            <param name="path">ソースコードのパスを指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String)">
            <summary>言語バインディングとして現在のエンジンを使用して、ファイルから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="path"><see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるファイルを示すパスを指定します。</param>
            <remarks>
            パスの拡張子は <see cref="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)"/> でこの言語エンジンに関連付けられている必要はありません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding)">
            <summary>言語バインディングとして現在のエンジンを使用して、ファイルから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="path"><see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるファイルを示すパスを指定します。</param>
            <param name="encoding">ソースコードのエンコーディングを指定します。</param>
            <remarks>
            パスの拡張子は <see cref="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)"/> でこの言語エンジンに関連付けられている必要はありません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSourceFromFile(System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語バインディングとして現在のエンジンを使用して、ファイルから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="path"><see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるファイルを示すパスを指定します。</param>
            <param name="encoding">ソースコードのエンコーディングを指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
            <remarks>
            パスの拡張子は <see cref="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)"/> でこの言語エンジンに関連付けられている必要はありません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject)">
            <summary>
            言語バインディングとして現在のエンジンを使用して、<see cref="T:System.CodeDom.CodeObject"/> から
            <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。
            </summary>
            <param name="content">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる <see cref="T:System.CodeDom.CodeObject"/> を指定します。</param>
            <remarks>
            このメソッドは構文独立のセマンティクス式に対して最小限の CodeDom サポートしか行いません。
            言語はより多くのことを行えますが、ホストは <see cref="T:System.CodeDom.CodeMemberMethod"/> および、下記のサブノードのみを認めます。
                <see cref="T:System.CodeDom.CodeSnippetStatement"/>
                <see cref="T:System.CodeDom.CodeSnippetExpression"/>
                <see cref="T:System.CodeDom.CodePrimitiveExpression"/>
                <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/>
                <see cref="T:System.CodeDom.CodeExpressionStatement"/> (MethodInvoke の保持のため)
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String)">
            <summary>
            言語バインディングとして現在のエンジンを使用して、<see cref="T:System.CodeDom.CodeObject"/> から
            <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。
            </summary>
            <param name="content">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる <see cref="T:System.CodeDom.CodeObject"/> を指定します。</param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
            <remarks>
            このメソッドは構文独立のセマンティクス式に対して最小限の CodeDom サポートしか行いません。
            言語はより多くのことを行えますが、ホストは <see cref="T:System.CodeDom.CodeMemberMethod"/> および、下記のサブノードのみを認めます。
                <see cref="T:System.CodeDom.CodeSnippetStatement"/>
                <see cref="T:System.CodeDom.CodeSnippetExpression"/>
                <see cref="T:System.CodeDom.CodePrimitiveExpression"/>
                <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/>
                <see cref="T:System.CodeDom.CodeExpressionStatement"/> (MethodInvoke の保持のため)
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            言語バインディングとして現在のエンジンを使用して、<see cref="T:System.CodeDom.CodeObject"/> から
            <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。
            </summary>
            <param name="content">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる <see cref="T:System.CodeDom.CodeObject"/> を指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
            <remarks>
            このメソッドは構文独立のセマンティクス式に対して最小限の CodeDom サポートしか行いません。
            言語はより多くのことを行えますが、ホストは <see cref="T:System.CodeDom.CodeMemberMethod"/> および、下記のサブノードのみを認めます。
                <see cref="T:System.CodeDom.CodeSnippetStatement"/>
                <see cref="T:System.CodeDom.CodeSnippetExpression"/>
                <see cref="T:System.CodeDom.CodePrimitiveExpression"/>
                <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/>
                <see cref="T:System.CodeDom.CodeExpressionStatement"/> (MethodInvoke の保持のため)
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(System.CodeDom.CodeObject,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>
            言語バインディングとして現在のエンジンを使用して、<see cref="T:System.CodeDom.CodeObject"/> から
            <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。
            </summary>
            <param name="content">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる <see cref="T:System.CodeDom.CodeObject"/> を指定します。</param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
            <remarks>
            このメソッドは構文独立のセマンティクス式に対して最小限の CodeDom サポートしか行いません。
            言語はより多くのことを行えますが、ホストは <see cref="T:System.CodeDom.CodeMemberMethod"/> および、下記のサブノードのみを認めます。
                <see cref="T:System.CodeDom.CodeSnippetStatement"/>
                <see cref="T:System.CodeDom.CodeSnippetExpression"/>
                <see cref="T:System.CodeDom.CodePrimitiveExpression"/>
                <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/>
                <see cref="T:System.CodeDom.CodeExpressionStatement"/> (MethodInvoke の保持のため)
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String)">
            <summary>言語バインディングとして現在のエンジンを使用して、ストリームから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="content">
            作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるストリームを保持している
            <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を指定します。
            </param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding)">
            <summary>言語バインディングとして現在のエンジンを使用して、ストリームから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="content">
            作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるストリームを保持している
            <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を指定します。
            </param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
            <param name="encoding">ソースコードのエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語バインディングとして現在のエンジンを使用して、ストリームから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="content">
            作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になるストリームを保持している
            <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を指定します。
            </param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
            <param name="encoding">ソースコードのエンコーディングを指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.CreateScriptSource(Microsoft.Scripting.TextContentProvider,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語バインディングとして現在のエンジンを使用して、コンテンツプロバイダから <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを作成します。</summary>
            <param name="contentProvider">
            作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトの基になる <see cref="T:Microsoft.Scripting.TextContentProvider"/> を指定します。
            </param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> に対して設定されるパスを指定します。</param>
            <param name="kind">ソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
            <remarks>
            このメソッドはユーザーがコンテンツプロバイダを所有できるようにすることで、
            エディタのテキスト表現といったホスト内部のデータ構造をラップするストリームを実装できるようにします。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetService``1(System.Object[])">
            <summary>言語固有のサービスを返します。</summary>
            <param name="args">サービスの取得に使用する引数を指定します。</param>
            <remarks>
            共通に利用可能なサービスを次に示します。
                TokenCategorizer
                    標準のソースコードトークン化を提供します。
                ExceptionOperations
                    例外オブジェクトのフォーマット化を提供します。
                DocumentationProvider
                    生存期間中のオブジェクトに対するドキュメントを提供します。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetCompilerOptions">
            <summary>コンパイルコードのどのスコープにも関連付けられていない言語固有の <see cref="T:Microsoft.Scripting.CompilerOptions"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.GetCompilerOptions(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープに関連付けられている言語固有の <see cref="T:Microsoft.Scripting.CompilerOptions"/> を取得します。</summary>
            <param name="scope">取得する <see cref="T:Microsoft.Scripting.CompilerOptions"/> が関連付けられているスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.Call``2(System.Func{Microsoft.Scripting.Runtime.LanguageContext,``0,``1},``0)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> に対するデリゲートをこのインスタンスで呼び出します。</summary>
            <typeparam name="T">引数の型を指定します。</typeparam>
            <typeparam name="TRet">戻り値の型を指定します。</typeparam>
            <param name="f">このインスタンスで呼び出すデリゲートを指定します。</param>
            <param name="arg">デリゲートに指定する引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptEngine.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Operations">
            <summary>エンジンに対する既定の <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトを取得します。</summary>
            <remarks>
            <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトはオブジェクトの型に対する規則や処理した操作をキャッシュするため、
            既定の <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> に対する複数のオブジェクトの使用はキャッシュ効率を低下させます。
            やがて、いくつかの操作に対するキャッシュは <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> はキャッシュを停止させるまでに性能を低下させ、
            指定されたオブジェクトに対する要求された操作の実装を全探索するようになります。
            
            新しい <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> インスタンスを作成するもう 1 つの理由は、
            インスタンスに <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> の特定の機能を関連付けるということです。
            言語は言語ごとの振る舞いを操作がどのように実行されるのかを変更できる <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> に委譲することができます。
            
            単純なホスティングにおいては、これは十分な振る舞いとなります。
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Setup">
            <summary>このエンジンが使用している読み取り専用の言語オプションを取得します。</summary>
            <remarks>
            値はランタイムの初期化中に読み取り専用の後で決定されます。
            構成ファイルを設定したり、明示的に <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を使用したりすることで設定を変更することができます。
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.Runtime">
            <summary>エンジンが実行されるコンテキストに対する <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageVersion">
            <summary>エンジンのバージョンを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.SearchPaths">
            <summary>スクリプトが別のファイルやコードをインポートまたは要求したときに、ファイルのロードにエンジンによって使用される検索パスを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptEngine.LanguageContext">
            <summary>このエンジンの基になる <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHost">
             <summary>DLR 上でのホストを表します。</summary>
             <remarks>
             <see cref="T:Microsoft.Scripting.Hosting.ScriptHost"/> は <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> とともに、同一のアプリケーションドメインに配置されます。
             ホストはいくつかの通知を取得したり、TryGetSourceUnit や ResolveSourceUnit などのように操作をカスタマイズするために派生クラスを実装できます。
            
             派生クラスのコンストラクタ引数は <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> の初期化に関与する
             <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> インスンタスによって指定されます。
             
             ホストがリモートであれば、DLR (すなわち、<see cref="T:Microsoft.Scripting.Hosting.ScriptHost"/> も)
             およびそのアプリケーションドメインに生存しているオブジェクトへのアクセスの必要性に関しては、<see cref="T:Microsoft.Scripting.Hosting.ScriptHost"/>
             の派生クラスのコンストラクタに引数として <see cref="T:System.MarshalByRefObject"/> を渡すことができます。
             </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.RuntimeAttached">
            <summary>
            関連付けられたランタイムの初期化が完了した後に呼び出されます。
            ホストはアセンブリのロードなどのランタイムの追加の初期化を実行するためにこのメソッドをオーバーライドできます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.EngineCreated(Microsoft.Scripting.Hosting.ScriptEngine)">
            <summary>
            ランタイムに新しい言語がロードされた後に呼び出されます。
            ホストは言語エンジンの追加の初期化を実行するためにこのメソッドをオーバーライドできます。
            </summary>
            <param name="engine">ロードされた言語を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHost.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptHost.Runtime">
            <summary>ホストがアタッチされるランタイムを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptHost.PlatformAdaptationLayer">
            <summary>ホストに関連付けられた <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptHostProxy">
            <summary>DLR に対してホスティングを提供します。DLRに対する要求は <see cref="T:Microsoft.Scripting.Hosting.ScriptHost"/> に転送されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicRuntimeHostingProvider">
            <summary>
            DLR はあらゆるホスティング API プロバイダにこのクラスを実装し、そのインスタンスをランタイムの初期化で提供することを要求します。
            DLR は基本的なホスト/システム依存の動作をこのクラスを用いて呼び出します。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DynamicRuntimeHostingProvider.PlatformAdaptationLayer">
            <summary>ホストに関連付けられた <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptHostProxy.#ctor(Microsoft.Scripting.Hosting.ScriptHost)">
            <summary>指定されたホストを使用して、<see cref="T:Microsoft.Scripting.Hosting.ScriptHostProxy"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="host">要求を転送するホストを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptHostProxy.PlatformAdaptationLayer">
            <summary>ホストに関連付けられた <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptIO">
            <summary>DLR 言語によって既定の入出力として使用されるホストにリダイレクト可能な I/O ストリームを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.#ctor(Microsoft.Scripting.Runtime.SharedIO)">
            <summary>
            基になる <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> を使用して、<see cref="T:Microsoft.Scripting.Hosting.ScriptIO"/>
            クラスの新しいインスタンスを初期化します。</summary>
            <param name="io">基になる <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.Text.Encoding)">
            <summary>ストリームおよびエンコーディングを使用して、出力を設定します。</summary>
            <param name="stream">出力データが書き込まれるストリームを指定します。</param>
            <param name="encoding">スクリプトによって出力に書き込まれたデータを変換するのに使用されるエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>ストリームおよび <see cref="T:System.IO.TextWriter"/> を使用して、出力を設定します。</summary>
            <param name="stream">出力データが書き込まれるストリームを指定します。</param>
            <param name="writer">出力データの書き込みに使用する <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetErrorOutput(System.IO.Stream,System.Text.Encoding)">
            <summary>ストリームおよびエンコーディングを使用して、エラー出力を設定します。</summary>
            <param name="stream">エラー出力データが書き込まれるストリームを指定します。</param>
            <param name="encoding">スクリプトによってエラー出力に書き込まれたデータを変換するのに使用されるエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetErrorOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>ストリームおよび <see cref="T:System.IO.TextWriter"/> を使用して、エラー出力を設定します。</summary>
            <param name="stream">エラー出力データが書き込まれるストリームを指定します。</param>
            <param name="writer">エラー出力データの書き込みに使用する <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetInput(System.IO.Stream,System.Text.Encoding)">
            <summary>ストリームおよびエンコーディングを使用して、入力を設定します。</summary>
            <param name="stream">入力データが読み込まれるストリームを指定します。</param>
            <param name="encoding">スクリプトによって入力から読み込まれたデータを変換するのに使用されるエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.SetInput(System.IO.Stream,System.IO.TextReader,System.Text.Encoding)">
            <summary>ストリーム、<see cref="T:System.IO.TextReader"/> およびエンコーディングを使用して、入力を設定します。</summary>
            <param name="stream">入力データが読み込まれるストリームを指定します。</param>
            <param name="reader">入力データの読み込みに使用する <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="encoding">スクリプトによって入力から読み込まれたデータを変換するのに使用されるエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.RedirectToConsole">
            <summary>出力をコンソールにリダイレクトします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptIO.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.InputStream">
            <summary>入力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.OutputStream">
            <summary>出力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.ErrorStream">
            <summary>エラー出力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.InputReader">
            <summary>入力から文字を読み取る <see cref="T:System.IO.TextReader"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.OutputWriter">
            <summary>出力に文字を書き込む <see cref="T:System.IO.TextWriter"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.ErrorWriter">
            <summary>エラー出力に文字を書き込む <see cref="T:System.IO.TextWriter"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.InputEncoding">
            <summary>入力のエンコーディングを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.OutputEncoding">
            <summary>出力のエンコーディングを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.ErrorEncoding">
            <summary>エラー出力のエンコーディングを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptIO.SharedIO">
            <summary>基になる <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> オブジェクトを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptRuntime">
            <summary>
            ホスティング API において動的言語ランタイム (DLR) を表します。
            <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> に対するもう 1 つのホスティング API です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.#ctor(Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>現在のアプリケーションドメインに <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を作成し、指定された設定を使用して初期化します。</summary>
            <param name="setup">初期化に使用する設定を格納している <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="setup"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateFromConfiguration">
            <summary>現在のアプリケーション設定の言語設定を使用して新しいランタイムを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateRemote(System.AppDomain,Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>指定されたアプリケーションドメインに <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を作成し、指定された設定を使用して初期化します。</summary>
            <param name="domain"><see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を作成するアプリケーションドメインを指定します。</param>
            <param name="setup">初期化に使用する設定を格納している <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="domain"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngine(System.String)">
            <summary>言語の名前から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
            <param name="languageName">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を表す言語の名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="languageName"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="languageName"/> が未知の言語名を表しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByTypeName(System.String)">
            <summary>言語プロバイダの型名から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
            <param name="assemblyQualifiedTypeName">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> の言語プロバイダの型名を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="assemblyQualifiedTypeName"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngineByFileExtension(System.String)">
            <summary>言語のソースファイルの拡張子から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
            <param name="fileExtension">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> が表す言語のソースファイルの拡張子を指定します。</param>
            <exception cref="T:System.ArgumentException"><paramref name="fileExtension"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileExtension"/> が未知の拡張子を表しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.TryGetEngine(System.String,Microsoft.Scripting.Hosting.ScriptEngine@)">
            <summary>言語の名前から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。見つからない場合は false を返します。</summary>
            <param name="languageName">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を表す言語の名前を指定します。</param>
            <param name="engine">取得した <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.TryGetEngineByFileExtension(System.String,Microsoft.Scripting.Hosting.ScriptEngine@)">
            <summary>言語のソースファイルの拡張子から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
            <param name="fileExtension">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> が表す言語のソースファイルの拡張子を指定します。</param>
            <param name="engine">取得した <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.GetEngine(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> から <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
            <param name="language">取得する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> が表す言語に対する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateScope">
            <summary>インバリアントコンテキストを使用して、新しい空の <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateScope(System.String)">
            <summary>
            指定された言語 ID に関連付けられた <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を使用して、新しい空の
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。
            </summary>
            <param name="languageId">
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を表す言語 ID を指定します。
            </param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateScope(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>インバリアントコンテキストを使用して、指定された任意のオブジェクトをストレージとする <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。</summary>
            <param name="storage">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> のストレージとなるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateScope(System.String,System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>
            指定された言語 ID に関連付けられた <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を使用して、指定された任意のオブジェクトをストレージとする
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成します。
            </summary>
            <param name="languageId">
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を表す言語 ID を指定します。
            </param>
            <param name="storage">作成する <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> のストレージとなるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.ExecuteFile(System.String)">
            <summary>指定されたファイルの内容を新しいスコープで実行し、そのスコープを返します。エンジンはファイルの拡張子から判断されます。</summary>
            <param name="path">実行するファイルのパスを指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">
            パスが空であるか、<see cref="M:System.IO.Path.GetInvalidPathChars"/>
            で定義される無効な文字を含んでいるか、拡張子がありません。
            </exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.UseFile(System.String)">
            <summary>指定されたファイルを検索し、ファイルが既にロードされていればスコープを返し、それ以外の場合はファイルをロードしてそのスコープを返します。</summary>
            <param name="path">使用するファイルのパスを指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="path"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">ファイルの拡張子を言語エンジンに割り当てられません。</exception>
            <exception cref="T:System.InvalidOperationException">言語に 1 つも検索パスがありません。</exception>
            <exception cref="T:System.IO.FileNotFoundException">ファイルは言語の検索パスに存在している必要があります。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.LoadAssembly(System.Reflection.Assembly)">
            <summary>
            アセンブリ内で使用可能な型を表すために、アセンブリの名前空間および <see cref="P:Microsoft.Scripting.Hosting.ScriptRuntime.Globals"/> に対する名前束縛を巡回します。
            </summary>
            <param name="assembly">巡回するアセンブリを指定します。</param>
            <remarks>
            それぞれの最上位名前空間の名前は Globals において名前空間を表す動的オブジェクトに結び付けられます。
            それぞれの最上位名前空間オブジェクト内では、ネストされた名前空間の名前がそれぞれの層の名前空間を表す動的オブジェクトに結び付けられます。
            同じ名前空間修飾名に遭遇した場合、このメソッドは名前および名前空間を表すオブジェクトをマージします。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.CreateOperations">
            <summary>インバリアントコンテキストに対するエンジンの新しい <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトを作成しますオブジェクトを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntime.Shutdown">
            <summary>動的言語ランタイムをシャットダウンします。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Manager">
            <summary>このインスタンスの基になっている <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Host">
            <summary>動的言語ランタイムに関連付けられているホストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.IO">
            <summary>動的言語ランタイムの入出力を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Setup">
            <summary>このインスタンスの初期化に使用した <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Globals">
            <summary>
            グローバルオブジェクトまたは <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/>
            としての <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> の名前束縛を取得します。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.Operations">
            <summary>インバリアントコンテキストに対するエンジンの既定の <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntime.InvariantEngine">
            <summary>インバリアントコンテキストに対するエンジンを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup">
            <summary><see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> のセットアップに必要な情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/>クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ToConfiguration">
            <summary>動的言語ランタイムの構成情報にこのオブジェクトを変換します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration">
            <summary> .NET の構成システム (.config ファイル) からセットアップ情報を読み出します。何も構成がない場合は、空のセットアップ情報を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration(System.IO.Stream)">
            <summary>指定された XML ファイルから構成情報を読み出します。</summary>
            <param name="configFileStream">構成情報を格納している XML ファイルを表すストリームを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.ReadConfiguration(System.String)">
            <summary>指定された XML ファイルから構成情報を読み出します。</summary>
            <param name="configFilePath">構成情報を格納している XML ファイルの場所を示すパスを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.LanguageSetups">
            <summary>ランタイムにロードされる言語に対するセットアップ情報を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.DebugMode">
            <summary>ランタイムがデバッグモードで動作するかどうかを示す値を取得または設定します。</summary>
            <remarks>
            デバッグモードでは次のように動作します。
            1) デバッグ可能なメソッドに対してシンボルが出力されます。(<see cref="T:Microsoft.Scripting.SourceUnit"/> に関連付けられたメソッド).
            2) 非収集型に対してデバッグ可能なメソッドが出力されます (これは動的メソッドデバッグの上での CLR の制限によるものです).
            3) すべてのメソッドに対して JIT 最適化が無効になります。
            4) 言語はこの値に基づいた最適化を無効化する可能性があります。
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.PrivateBinding">
            <summary>CLR 可視性チェックを無視するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.HostType">
            <summary>
            ホストの型を取得または設定します。
            <see cref="T:Microsoft.Scripting.Hosting.ScriptHost"/> のどの派生型にも設定できます。
            設定すると、ホストはランタイムの振る舞いを制御するために一定のメソッドをオーバーライドできるようになります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.Options">
            <summary>大文字と小文字を区別するオプションの名前と値の組を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptRuntimeSetup.HostArguments">
            <summary>ホスト型のコンストラクタに渡される引数を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptScope">
            <summary>コードに対する実行単位を表します。<see cref="T:Microsoft.Scripting.Runtime.Scope"/> に対する、もう 1 つのホスティング API です。</summary>
            <remarks>
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> には、すべてのコードが実行されるグローバルの <see cref="T:Microsoft.Scripting.Runtime.Scope"/> が含まれ、
            任意のイニシャライザやリローダも含めることもできます。
            <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> はスレッドセーフではないため、
            ホストは複数スレッドが同じモジュールにアクセスする際にロックするか、スレッドごとにコピーをとるかを選択する必要があります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.#ctor(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Runtime.Scope)">
            <summary>基になるスコープおよびエンジンを使用して、<see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="engine">このスコープに関連付けられるエンジンを指定します。</param>
            <param name="scope">このスコープの基になる <see cref="T:Microsoft.Scripting.Runtime.Scope"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable(System.String)">
            <summary>指定された名前でスコープに格納されている値を取得します。</summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <exception cref="T:System.MissingMemberException">指定された名前はスコープでは定義されていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariable``1(System.String)">
            <summary>
            指定された名前でスコープに格納されている値を取得します。
            結果はスコープに関連付けられている言語が定義する変換を使用して指定された型に変換されます。
            スコープにどの言語も関連付けられていない場合、既定の変換が実行されます。
            </summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <exception cref="T:System.MissingMemberException">指定された名前はスコープでは定義されていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariable(System.String,System.Object@)">
            <summary>指定された名前でスコープに格納されている値の取得を試みます。取得が成功した場合 <c>true</c> を返します。</summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <param name="value">取得した値を格納する変数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariable``1(System.String,``0@)">
            <summary>
            指定された名前でスコープに格納されている値の取得を試みます。
            結果はスコープに関連付けられている言語が定義する変換を使用して指定された型に変換されます。
            スコープにどの言語も関連付けられていない場合、既定の変換が実行されます。
            取得が成功した場合 <c>true</c> を返します。
            </summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <param name="value">取得した値を格納する変数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Object)">
            <summary>指定された値を指定された名前でこのスコープに格納します。</summary>
            <param name="name">値が関連付けられる名前を指定します。</param>
            <param name="value">スコープに格納する値を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariableHandle(System.String)">
            <summary>指定された名前でスコープに格納されている値に対するハンドルを取得します。</summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <exception cref="T:System.MissingMemberException">指定された名前はスコープでは定義されていません。</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.TryGetVariableHandle(System.String,System.Runtime.Remoting.ObjectHandle@)">
            <summary>指定された名前でスコープに格納されている値に対するハンドルの取得を試みます。取得が成功した場合 <c>true</c> を返します。</summary>
            <param name="name">取得する値に関連付けられている名前を指定します。</param>
            <param name="handle">取得した値に対するハンドルを格納する変数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.SetVariable(System.String,System.Runtime.Remoting.ObjectHandle)">
            <summary>指定された値を指定された名前でこのスコープに格納します。</summary>
            <param name="name">値が関連付けられる名前を指定します。</param>
            <param name="handle">スコープに格納する値に対するハンドルを指定します。</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            ハンドルによって保持されている値はスコープのアプリケーションドメインのものではなく、また、シリアライズ可能でも <see cref="T:System.MarshalByRefObject"/> でもありません。
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> または <paramref name="handle"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.ContainsVariable(System.String)">
            <summary>このコンテキストまたは外側のスコープに指定された名前が定義されているかどうかを調べます。</summary>
            <param name="name">定義されているかどうかを調べる名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.RemoveVariable(System.String)">
            <summary>このスコープから指定された名前の変数を削除します。</summary>
            <param name="name">削除する変数の名前を指定します。</param>
            <returns>削除される前に値がこのスコープに存在した場合は <c>true</c> を返します。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> は <c>null</c> 参照です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetVariableNames">
            <summary>このスコープに格納されている変数を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.GetItems">
            <summary>このスコープに格納されている名前と値の組を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptScope.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.Scope">
            <summary>このスコープの基になる <see cref="T:Microsoft.Scripting.Runtime.Scope"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptScope.Engine">
            <summary>このスコープに関連付けられている言語に対するエンジンを取得します。スコープが言語に関連付けられていない場合、インバリアントエンジンを返します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.ScriptSource">
            <summary>スクリプトに対する翻訳入力単位を表します。<see cref="T:Microsoft.Scripting.SourceUnit"/> に対するもう 1 つのホスティング API です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.#ctor(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.SourceUnit)">
            <summary>
            指定されたエンジンおよび基となる <see cref="T:Microsoft.Scripting.SourceUnit"/>
            を使用して、<see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> クラスの新しいインスタンスを取得します。
            </summary>
            <param name="engine">このインスタンスに関連付ける言語に対するエンジンを指定します。</param>
            <param name="sourceUnit">このインスタンスの基となる <see cref="T:Microsoft.Scripting.SourceUnit"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile">
            <summary>
            この <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を既定のスコープまたは他のスコープで再コンパイルの必要なしに繰り返し実行可能な
            <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> オブジェクトにコンパイルします。
            </summary>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.Hosting.ErrorListener)">
            <summary>
            この <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を既定のスコープまたは他のスコープで再コンパイルの必要なしに繰り返し実行可能な
            <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> オブジェクトにコンパイルします。
            </summary>
            <param name="errorListener">エラーを報告する <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> を指定します。</param>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>&gt;
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions)">
            <summary>
            この <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を既定のスコープまたは他のスコープで再コンパイルの必要なしに繰り返し実行可能な
            <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> オブジェクトにコンパイルします。
            </summary>
            <param name="compilerOptions">コンパイル時に使用するオプションを指定します。</param>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Compile(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.Hosting.ErrorListener)">
            <summary>
            この <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を既定のスコープまたは他のスコープで再コンパイルの必要なしに繰り返し実行可能な
            <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> オブジェクトにコンパイルします。
            </summary>
            <param name="compilerOptions">コンパイル時に使用するオプションを指定します。</param>
            <param name="errorListener">エラーを報告する <see cref="T:Microsoft.Scripting.Hosting.ErrorListener"/> を指定します。</param>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>コードを指定したスコープで実行し、結果を返します。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute">
            <summary>コードを実行し、結果を返します。実行はどのスコープにも関連付けられません。</summary>
            <remarks>
            ホストがスコープを必要としないので、ここでは作成しません。
            言語はコードが DLR スコープに関連付けられていないとして扱い、グローバル検索のセマンティクスを適宜変更する可能性があります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute``1(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>コードを指定されたスコープで実行し、結果を指定された型に変換します。変換は言語によって定義されます。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.Execute``1">
            <summary>コードを空のスコープで実行し、結果を指定された型に変換します。変換は言語によって定義されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>コードを指定されたスコープで実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップします。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteAndWrap">
            <summary>コードを空のスコープで実行し、結果を <see cref="T:System.Runtime.Remoting.ObjectHandle"/> でラップします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.ExecuteProgram">
            <summary>コードを OS のコマンドシェルから開始されたプログラムであるように実行し、コード実行の成功またはエラー状態を示すプロセス終了コードを返します。</summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードがコンパイルできません。</exception>
            <remarks>
            正確な動作は言語に依存します。終了コードを伝達する "exit" 例外がある言語も存在し、その場合例外は捕捉され終了コードが返されます。
            既定の動作では言語特有の変換を使用して、整数に変換されたプログラムの実行結果を返します。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.FetchCodeProperties">
            <summary>ソースコードを解析することにより、ソースコードの状態を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.FetchCodeProperties(Microsoft.Scripting.CompilerOptions)">
            <summary>ソースコードを解析することにより、ソースコードの状態を取得します。</summary>
            <param name="options">解析に使用する <see cref="T:Microsoft.Scripting.CompilerOptions"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetReader">
            <summary>ソースコードを読み取る新しい <see cref="T:System.IO.TextReader"/> を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.DetectEncoding">
            <summary>コンテンツのエンコーディングを判定します。</summary>
            <returns>
            コンテンツを Unicode テキストにデコードするために、スクリプトの翻訳入力のリーダーによって使用されるエンコーディング。
            コンテンツが既にテキストで、デコードが行われていない場合は <c>null</c>。
            </returns>
            <remarks>
            スクリプトの翻訳入力が作成されたとき、指定された既定のエンコーディングはコンテンツプリアンブル (Unicode BOM または言語特有のエンコーディングプリアンブル)
            で見つかったエンコーディングに上書きされる可能性があります。その場合、プリアンブルエンコーディングが返されます。
            それ以外の場合は既定のエンコーディングが返されます。
            </remarks>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCodeLines(System.Int32,System.Int32)">
            <summary>翻訳入力単位から指定された範囲の行を読み取ります。</summary>
            <param name="start">取得する行の 1 から始まるインデックスを指定します。</param>
            <param name="count">取得する行数を指定します。</param>
            <returns>読み取られた各行を格納する <see cref="T:System.String"/> 型の配列。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
            <remarks>どの文字列が改行記号と認識されるかは言語によります。言語が指定されていない場合、"\r", "\n", "\r\n" が改行記号と認識されます。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCodeLine(System.Int32)">
            <summary>翻訳入力単位から指定された行を読み取ります。</summary>
            <param name="line">取得する行の 1 から始まるインデックスを指定します。</param>
            <returns>行の内容。改行文字は含まれません。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
            <remarks>どの文字列が改行記号と認識されるかは言語によります。言語が指定されていない場合、"\r", "\n", "\r\n" が改行記号と認識されます。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.GetCode">
            <summary>スクリプトの翻訳入力の内容を取得します。</summary>
            <returns>コンテンツ全体。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
            <remarks>
            結果には言語固有のプリアンブル (たとえば、 "#coding:UTF-8" は Ruby ではエンコーディングプリアンブルとして認識されます。) が含まれますが、
            コンテンツエンコーディングで指定されたプリアンブル (例: BOM) は含まれません。
            翻訳入力単位の内容全体は単一のエンコーディングによってエンコードされます。(もし、バイナリストリームから読み取られた場合)
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.MapSpan(Microsoft.Scripting.SourceSpan)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SourceSpan"/> から実際のソースコード範囲を表す <see cref="T:Microsoft.Scripting.SourceSpan"/> を返します。</summary>
            <param name="span"><see cref="T:Microsoft.Scripting.SourceSpan"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.MapLocation(Microsoft.Scripting.SourceLocation)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SourceLocation"/> から実際のソースコード上の位置を表す <see cref="T:Microsoft.Scripting.SourceLocation"/> を返します。</summary>
            <param name="location"><see cref="T:Microsoft.Scripting.SourceLocation"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.ScriptSource.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.SourceUnit">
            <summary>この翻訳入力単位の基となる <see cref="T:Microsoft.Scripting.SourceUnit"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.Path">
            <summary>この翻訳入力単位を識別するパスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.Kind">
            <summary>ソースコードの種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.ScriptSource.Engine">
            <summary>この翻訳入力単位に関連付けられている言語に対するエンジンを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.TokenCategorizer">
            <summary>標準のソースコードトークン化を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.#ctor(Microsoft.Scripting.Runtime.TokenizerService)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.TokenizerService"/> を使用して、<see cref="T:Microsoft.Scripting.Hosting.TokenCategorizer"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="tokenizer">ラップする <see cref="T:Microsoft.Scripting.Runtime.TokenizerService"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.Initialize(System.Object,Microsoft.Scripting.Hosting.ScriptSource,Microsoft.Scripting.SourceLocation)">
            <summary>基になるトークナイザを初期化します。</summary>
            <param name="state">トークナイザの状態を指定します。</param>
            <param name="scriptSource">トークン化の対象となる <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> オブジェクトを指定します。</param>
            <param name="initialLocation">トークン化の開始位置を表す <see cref="T:Microsoft.Scripting.SourceLocation"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadToken">
            <summary>トークナイザを次のトークンのすぐ後まで進め、そのカテゴリを取得します。</summary>
            <returns>スキャンしたトークンに関連付けられている情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipToken">
            <summary>トークナイザを次のトークンのすぐ後まで進めます。</summary>
            <returns>ストリームの末尾に到達した場合は <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.ReadTokens(System.Int32)">
            <summary>ストリームのブロックを覆うすべてのトークンを取得します。</summary>
            <remarks>startLocation + length がトークンの中間である場合でも、スキャナはすべてのトークンを返すべきです。</remarks>
            <param name="characterCount">トークンの読み取りを終了するまでに読み取る文字数を指定します。</param>
            <returns>トークン</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.SkipTokens(System.Int32)">
            <summary>現在の位置からすくなくとも指定された文字数分をスキャンします。</summary>
            <param name="characterCount">トークンの読み取りを終了するまでに読み取る文字数を指定します。</param>
            <remarks>このメソッドは任意の開始位置における状態を調べるために使用されます。</remarks>
            <returns>ストリームの末尾に到達した場合は <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.TokenCategorizer.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentState">
            <summary>トークナイザの現在の内部状態を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.CurrentPosition">
            <summary>トークナイザの現在の位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.IsRestartable">
            <summary>トークナイザが再開可能かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.TokenCategorizer.ErrorSink">
            <summary>トークナイザのエラーを処理する <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトを取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ContextId">
            <summary>言語コンテキストを表します。</summary>
            <remarks>
            典型的にそれぞれの言語に関連付けられたコンテキストが多くとも 1 つ存在しますが、
            異なる扱いをされるコードを識別するために 1 つ以上のコンテキストを使用する言語もあります。
            コンテキストはメンバまたは演算子の探索中に使用されます。
            </remarks>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ContextId.Empty">
            <summary>空のコンテキストを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.#ctor(System.Int32)">
            <summary>指定された ID を用いて <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="id">このインスタンスの ID を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.RegisterContext(System.Object)">
            <summary>指定された名前でシステム内の言語を登録します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.LookupContext(System.Object)">
            <summary>指定されたコンテキスト識別子に対応する <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> を検索します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.Equals(Microsoft.Scripting.Runtime.ContextId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> が現在の <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> と等しいかどうかを判断します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.GetHashCode">
            <summary>現在の <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> に対するハッシュ値を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.Equals(System.Object)">
            <summary>現在の <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> が指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.op_Equality(Microsoft.Scripting.Runtime.ContextId,Microsoft.Scripting.Runtime.ContextId)">
            <summary>指定された 2 つの <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> が等しいかどうかを判断します。</summary>
            <param name="self">比較する 1 つ目のオブジェクトを指定します。</param>
            <param name="other">比較する 2 つ目のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ContextId.op_Inequality(Microsoft.Scripting.Runtime.ContextId,Microsoft.Scripting.Runtime.ContextId)">
            <summary>指定された 2 つの <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> が等しくないかどうかを判断します。</summary>
            <param name="self">比較する 1 つ目のオブジェクトを指定します。</param>
            <param name="other">比較する 2 つ目のオブジェクトを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ContextId.Id">
            <summary>このインスタンスの ID を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageConfiguration">
            <summary>言語に関する構成情報を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageConfiguration.#ctor(Microsoft.Scripting.Utils.AssemblyQualifiedTypeName,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            言語プロバイダのアセンブリ修飾型名、言語の表示名、オプションを使用して、<see cref="T:Microsoft.Scripting.Runtime.LanguageConfiguration"/>
            クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="providerName">言語プロバイダのアセンブリ修飾型名を指定します。</param>
            <param name="displayName">言語の表示名を指定します。</param>
            <param name="options">オプションを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageConfiguration.LoadLanguageContext(Microsoft.Scripting.Runtime.ScriptDomainManager,System.Boolean@)">
            <summary>
            指定した <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を使用して <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> オブジェクトを作成し、このインスタンスに関連付けます。
            潜在的にユーザーコードを呼び出す可能性があるので、ロック内で呼び出さないでください。
            </summary>
            <param name="domainManager"><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> オブジェクトの作成に利用する <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
            <param name="alreadyLoaded"><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> オブジェクトが既にロードされているかどうかを示す値を格納する変数を指定します。</param>
            <exception cref="T:Microsoft.Scripting.InvalidImplementationException"><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> の実装のインスタンス化に失敗しました。</exception>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageConfiguration.LanguageContext">
            <summary>この構成にロードされた <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageConfiguration.ProviderName">
            <summary>言語プロバイダのアセンブリ修飾型名を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DlrConfiguration">
            <summary>動的言語ランタイムの構成情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>指定された構成に関する情報から <see cref="T:Microsoft.Scripting.Runtime.DlrConfiguration"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="debugMode">ランタイムがデバッグモードで動作するかどうかを示す値を指定します。</param>
            <param name="privateBinding">CLR 可視性チェックを無視するかどうかを示す値を指定します。</param>
            <param name="options">大文字と小文字を区別するオプションの名前と値の組を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.AddLanguage(System.String,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>この構成に言語構成を追加します。</summary>
            <param name="languageTypeName">言語プロバイダのアセンブリ修飾型名を指定します。</param>
            <param name="displayName">言語の表示名を指定します。</param>
            <param name="names">大文字と小文字を区別しない言語の名前のリストを指定します。</param>
            <param name="fileExtensions">大文字と小文字を区別しないファイルの拡張子のリストを指定します。</param>
            <param name="options">オプションのリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.NormalizeExtension(System.String)">
            <summary>拡張子を正規化します。ドットで始まらない場合はドットで始まるような拡張子を返します。</summary>
            <param name="extension">正規化する拡張子を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.Freeze">
            <summary>このオブジェクトを変更不可能にします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.TryLoadLanguage(Microsoft.Scripting.Runtime.ScriptDomainManager,Microsoft.Scripting.Utils.AssemblyQualifiedTypeName,Microsoft.Scripting.Runtime.LanguageContext@)">
            <summary>言語のロードを試みます。成功した場合は <c>true</c> を返します。</summary>
            <param name="manager">言語のロードに使用する <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
            <param name="providerName">ロードする言語プロバイダのアセンブリ修飾型名を指定します。</param>
            <param name="language">ロードされた言語プロバイダを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.TryLoadLanguage(Microsoft.Scripting.Runtime.ScriptDomainManager,System.String,System.Boolean,Microsoft.Scripting.Runtime.LanguageContext@)">
            <summary>言語のロードを試みます。成功した場合は <c>true</c> を返します。</summary>
            <param name="manager">言語のロードに使用する <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
            <param name="str">ロードする言語を識別するファイル拡張子または言語名を指定します。</param>
            <param name="isExtension"><paramref name="str"/> がファイル拡張子を表すかどうかを示す値を指定します。</param>
            <param name="language">ロードされた言語プロバイダを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.GetLanguageNames(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>指定された言語プロバイダから言語の名前のリストを取得します。</summary>
            <param name="context">言語に対する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.GetLanguageNames">
            <summary>この構成に登録されているすべての言語名のリストを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.GetFileExtensions(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>指定された言語プロバイダから言語のファイル拡張子のリストを取得します。</summary>
            <param name="context">言語に対する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.GetFileExtensions">
            <summary>この構成に登録されているすべての言語のファイル拡張子のリストを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DlrConfiguration.GetLanguageConfig(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>指定された言語プロバイダから言語の構成情報を取得します。</summary>
            <param name="context">言語に対する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.FileExtensionComparer">
            <summary>ファイルの拡張子を比較する <see cref="T:System.StringComparer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.LanguageNameComparer">
            <summary>言語の名前を比較する <see cref="T:System.StringComparer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.OptionNameComparer">
            <summary>オプションの名前を比較する <see cref="T:System.StringComparer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.DebugMode">
            <summary>ランタイムがデバッグモードで動作するかどうかを示す値を取得します。</summary>
            <remarks>
            デバッグモードでは次のように動作します。
            1) デバッグ可能なメソッドに対してシンボルが出力されます。(<see cref="T:Microsoft.Scripting.SourceUnit"/> に関連付けられたメソッド).
            2) 非収集型に対してデバッグ可能なメソッドが出力されます (これは動的メソッドデバッグの上での CLR の制限によるものです).
            3) すべてのメソッドに対して JIT 最適化が無効になります。
            4) 言語はこの値に基づいた最適化を無効化する可能性があります。
            </remarks>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DlrConfiguration.PrivateBinding">
            <summary>CLR 可視性チェックを無視するかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations">
            <summary>動的なオブジェクトに対する操作を提供します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.CleanupThreshold">
            <summary>キャッシュのクリーンアップが実行される最小のサイト数です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.RemoveThreshold">
            <summary>削除に必要となる平均使用回数との最小差です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.StopCleanupThreshold">
            <summary>単一のキャッシュクリーンアップで削除する最大値です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.ClearThreshold">
            <summary>これ以上クリーンアップを行えないときに、クリアすべきサイト数です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations._sites">
            <summary>頻繁に行われる操作のキャッシュに使用される SiteKey のディクショナリです。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.LastCleanup">
            <summary>最近のクリーンアップ時までに作成したサイト数です。 </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicOperations.SitesCreated">
            <summary>これまでに作成したサイト数です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.#ctor(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary>指定された言語プロバイダを使用して、<see cref="T:Microsoft.Scripting.Runtime.DynamicOperations"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="languageContext">基になる言語プロバイダを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Invoke(System.Object,System.Object[])">
            <summary>指定されたオブジェクトを指定された引数によって呼び出します。</summary>
            <param name="obj">呼び出すオブジェクトを指定します。</param>
            <param name="parameters">オブジェクト呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.InvokeMember(System.Object,System.String,System.Object[])">
            <summary>オブジェクトの指定されたメンバを指定された引数を用いて呼び出します。</summary>
            <param name="obj">呼び出すメンバを保持しているオブジェクトを指定します。</param>
            <param name="memberName">呼び出すメンバの名前を指定します。</param>
            <param name="parameters">メンバ呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.InvokeMember(System.Object,System.String,System.Boolean,System.Object[])">
            <summary>オブジェクトの指定されたメンバを指定された引数を用いて呼び出します。</summary>
            <param name="obj">呼び出すメンバを保持しているオブジェクトを指定します。</param>
            <param name="memberName">呼び出すメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
            <param name="parameters">メンバ呼び出しの引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.CreateInstance(System.Object,System.Object[])">
            <summary>指定されたオブジェクトに指定された引数を使用して新しいインスタンスを作成します。</summary>
            <param name="obj">インスタンスを作成する基になるオブジェクトを指定します。</param>
            <param name="parameters">インスタンスの作成の際に必要になる引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember(System.Object,System.String)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember``1(System.Object,System.String)">
            <summary>オブジェクトの指定されたメンバを取得し、結果を指定された型に変換します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryGetMember(System.Object,System.String,System.Object@)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが正常に取得された場合は true を返します。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="value">取得したメンバの値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ContainsMember(System.Object,System.String)">
            <summary>オブジェクトに指定されたメンバが存在するかどうかを示す値を返します。</summary>
            <param name="obj">メンバが存在するかどうかを調べるオブジェクトを指定します。</param>
            <param name="name">存在するかどうかを調べるメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.RemoveMember(System.Object,System.String)">
            <summary>オブジェクトから指定されたメンバを削除します。</summary>
            <param name="obj">メンバを削除するオブジェクトを指定します。</param>
            <param name="name">削除するメンバの名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember(System.Object,System.String,System.Object)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember``1(System.Object,System.String,``0)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。このオーバーロードは厳密に型指定されているため、ボックス化やキャストを避けることができます。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMember``1(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトの指定されたメンバを取得し、結果を指定された型に変換します。メンバが存在しないか、書き込み専用の場合は例外を発生させます。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryGetMember(System.Object,System.String,System.Boolean,System.Object@)">
            <summary>オブジェクトの指定されたメンバを取得します。メンバが正常に取得された場合は true を返します。</summary>
            <param name="obj">取得するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
            <param name="value">取得したメンバの値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ContainsMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトに指定されたメンバが存在するかどうかを示す値を返します。</summary>
            <param name="obj">メンバが存在するかどうかを調べるオブジェクトを指定します。</param>
            <param name="name">存在するかどうかを調べるメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.RemoveMember(System.Object,System.String,System.Boolean)">
            <summary>オブジェクトから指定されたメンバを削除します。</summary>
            <param name="obj">メンバを削除するオブジェクトを指定します。</param>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember(System.Object,System.String,System.Object,System.Boolean)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.SetMember``1(System.Object,System.String,``0,System.Boolean)">
            <summary>オブジェクトの指定されたメンバに指定された値を設定します。このオーバーロードは厳密に型指定されているため、ボックス化やキャストを避けることができます。</summary>
            <param name="obj">設定するメンバを保持しているオブジェクトを指定します。</param>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="value">メンバに設定する値を指定します。</param>
            <param name="ignoreCase">メンバの検索に大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo``1(System.Object)">
            <summary>オブジェクトを指定された型に変換します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを指定された型に変換します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを指定された型に変換します。変換が成功した場合は true を返します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを指定された型に変換します。変換が成功した場合は true を返します。変換が明示的に行われるかどうかは言語仕様によって決定されます。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ExplicitConvertTo``1(System.Object)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ExplicitConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryExplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryExplicitConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを情報が欠落する可能性のある明示的変換を使用して指定された型に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ImplicitConvertTo``1(System.Object)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.ImplicitConvertTo(System.Object,System.Type)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryImplicitConvertTo(System.Object,System.Type,System.Object@)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="type">変換結果となる型を指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.TryImplicitConvertTo``1(System.Object,``0@)">
            <summary>オブジェクトを指定された型に暗黙的に変換します。変換が成功した場合は true を返します。</summary>
            <param name="obj">型を変換するオブジェクトを指定します。</param>
            <param name="result">変換されたオブジェクトを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``2(System.Linq.Expressions.ExpressionType,``0)">
            <summary>汎用の単項演算を厳密に型指定された対象に対して実行します。</summary>
            <param name="operation">単項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">単項演算を作用させる対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.DoOperation``3(System.Linq.Expressions.ExpressionType,``0,``1)">
            <summary>汎用の二項演算を厳密に型指定された対象に対して実行します。</summary>
            <param name="operation">二項演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="target">二項演算を作用させる左側の対象を指定します。</param>
            <param name="other">二項演算を作用させる右側の対象を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetDocumentation(System.Object)">
            <summary>指定されたオブジェクトに対する文字列で提供されるドキュメントを返します。</summary>
            <param name="o">ドキュメントを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetCallSignatures(System.Object)">
            <summary>ユーザーに対する表示形式の指定されたオブジェクトの呼び出しに対して適用されるシグネチャのリストを返します。</summary>
            <param name="o">シグネチャのリストを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.IsCallable(System.Object)">
            <summary>指定されたオブジェクトが呼び出し可能かどうかを示す値を取得します。</summary>
            <param name="o">呼び出し可能かどうかを調べるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetMemberNames(System.Object)">
            <summary>オブジェクトの既知のメンバの一覧を返します。</summary>
            <param name="obj">メンバの一覧を取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.Format(System.Object)">
            <summary>指定されたオブジェクトの文字列表現を言語固有の表示形式で返します。</summary>
            <param name="obj">文字列表現を取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``2(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたバインダーに対して指定された型引数を使用して動的サイトを取得または作成します。</summary>
            <param name="siteBinder">動的サイトに対して動作の実行時バインディングを行うバインダーを指定します。</param>
            <remarks>
            このメソッドはキャッシュに動的サイトが存在すれば取得し、それ以外の場合は作成します。
            最近の使用からキャッシュが巨大になった場合はキャッシュはクリーンアップされます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``3(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたバインダーに対して指定された型引数を使用して動的サイトを取得または作成します。</summary>
            <param name="siteBinder">動的サイトに対して動作の実行時バインディングを行うバインダーを指定します。</param>
            <remarks>
            このメソッドはキャッシュに動的サイトが存在すれば取得し、それ以外の場合は作成します。
            最近の使用からキャッシュが巨大になった場合はキャッシュはクリーンアップされます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.GetOrCreateSite``1(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたバインダーに対して指定された型引数を使用して動的サイトを取得または作成します。</summary>
            <param name="siteBinder">動的サイトに対して動作の実行時バインディングを行うバインダーを指定します。</param>
            <remarks>
            このメソッドはキャッシュに動的サイトが存在すれば取得し、それ以外の場合は作成します。
            最近の使用からキャッシュが巨大になった場合はキャッシュはクリーンアップされます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicOperations.CleanupNoLock">
            <summary>キャッシュからあまり使用されない動的サイトを削除します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicOperations.SiteKey">
            <summary>
            すべての固有の動的サイトおよびそれらの使用パターンを追跡し、バインダーとサイト型の組をハッシュします。
            さらにこのクラスはヒット数を追跡し、関連付けられたサイトを保持します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.InvariantContext">
            <summary>言語中立な <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageContext">
            <summary>通常ランタイムによって呼び出される言語固有の機能を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.#ctor(Microsoft.Scripting.Runtime.ScriptDomainManager)">
            <summary>実行環境である <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="domainManager"><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> が実行される <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetScope(System.String)">
            <summary>指定されたファイルに対するスコープを取得します。</summary>
            <param name="path">スコープを取得するファイルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.EnsureScopeExtension(Microsoft.Scripting.Runtime.Scope)">
            <summary>指定されたスコープに <see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/> が存在すればそれを取得し、存在しない場合は作成して結果を返します。</summary>
            <param name="scope"><see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/> を取得するスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateScopeExtension(Microsoft.Scripting.Runtime.Scope)">
            <summary>指定されたスコープに対する <see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/> を作成します。</summary>
            <param name="scope">スコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeSetVariable(Microsoft.Scripting.Runtime.Scope,System.String,System.Object)">
            <summary>スコープにある変数に値を格納します。</summary>
            <param name="scope">変数を格納するスコープを指定します。</param>
            <param name="name">値を格納する変数の名前を指定します。</param>
            <param name="value">変数に格納する値を指定します。</param>
            <remarks>
            既定ではこのメソッドはかなり低速な <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を利用します。
            言語は <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を避け高速にするために、このメソッドをオーバーライドできます。
            言語は言語で共通に使用されているスコープ型への高速なアクセスを提供できます。
            通常このメソッドは言語自体がスコープの実装として利用している <see cref="T:Microsoft.Scripting.ScopeStorage"/> や他の型も含みます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeTryGetVariable(Microsoft.Scripting.Runtime.Scope,System.String,System.Object@)">
            <summary>スコープ内の変数からの値の取得を試みます。成功した場合は <c>true</c> を返します。</summary>
            <param name="scope">変数を格納しているスコープを指定します。</param>
            <param name="name">値を取得する変数の名前を指定します。</param>
            <param name="value">取得した値を格納する変数を指定します。</param>
            <remarks>
            既定ではこのメソッドはかなり低速な <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を利用します。
            言語は <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を避け高速にするために、このメソッドをオーバーライドできます。
            言語は言語で共通に使用されているスコープ型への高速なアクセスを提供できます。
            通常このメソッドは言語自体がスコープの実装として利用している <see cref="T:Microsoft.Scripting.ScopeStorage"/> や他の型も含みます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeGetVariable``1(Microsoft.Scripting.Runtime.Scope,System.String)">
            <summary>スコープ内の変数から値を取得し、結果を指定された型に変換します。</summary>
            <param name="scope">変数を格納しているスコープを指定します。</param>
            <param name="name">値を取得する変数の名前を指定します。</param>
            <remarks>
            既定ではこのメソッドはかなり低速な <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を利用します。
            言語は <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を避け高速にするために、このメソッドをオーバーライドできます。
            言語は言語で共通に使用されているスコープ型への高速なアクセスを提供できます。
            通常このメソッドは言語自体がスコープの実装として利用している <see cref="T:Microsoft.Scripting.ScopeStorage"/> や他の型も含みます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ScopeGetVariable(Microsoft.Scripting.Runtime.Scope,System.String)">
            <summary>スコープ内の変数から値を取得します。</summary>
            <param name="scope">変数を格納しているスコープを指定します。</param>
            <param name="name">値を取得する変数の名前を指定します。</param>
            <remarks>
            既定ではこのメソッドはかなり低速な <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を利用します。
            言語は <see cref="T:Microsoft.Scripting.Hosting.ObjectOperations"/> を避け高速にするために、このメソッドをオーバーライドできます。
            言語は言語で共通に使用されているスコープ型への高速なアクセスを提供できます。
            通常このメソッドは言語自体がスコープの実装として利用している <see cref="T:Microsoft.Scripting.ScopeStorage"/> や他の型も含みます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetSourceReader(System.IO.Stream,System.Text.Encoding,System.String)">
            <summary>指定されたストリームから読み取られるソースコードに対する <see cref="T:Microsoft.Scripting.SourceCodeReader"/> を取得します。</summary>
            <param name="stream">読み取り用にオープンされたストリームを指定します。ストリームはシークをサポートしている必要があります。</param>
            <param name="defaultEncoding">ストリームに Unicode または言語固有のプリアンブルがない場合に使用されるエンコーディングを指定します。</param>
            <param name="path">利用可能であれば翻訳単位のパスを指定します。</param>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetCompilerOptions">
            <summary>どのスコープにも関連付けられていないコードのコンパイルに使用される言語固有の <see cref="T:Microsoft.Scripting.CompilerOptions"/> オブジェクトを作成します。</summary>
            <remarks>言語は関連するあらゆるオプションを <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> から新しく作成されるオプションのインスタンスに渡すべきです。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetCompilerOptions(Microsoft.Scripting.Runtime.Scope)">
            <summary>指定されたスコープに関連付けられたコードのコンパイルに使用される言語固有の <see cref="T:Microsoft.Scripting.CompilerOptions"/> オブジェクトを作成します。</summary>
            <param name="scope">作成する <see cref="T:Microsoft.Scripting.CompilerOptions"/> に関連付けられるスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CompileSourceCode(Microsoft.Scripting.SourceUnit,Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>ソースコードを指定されたコンパイラコンテキスト内で解析します。解析する翻訳単位はコンテキストによって保持されます。</summary>
            <param name="sourceUnit">解析する翻訳単位を指定します。</param>
            <param name="options">解析に関するオプションを指定します。</param>
            <param name="errorSink">解析時のエラーを処理する <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <returns>失敗した場合は <c>null</c></returns>
            <remarks>ソースコードの状態や、翻訳単位の行やファイルのマッピングを設定することもありえます。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.LoadCompiledCode(System.Delegate,System.String,System.String)">
            <summary>指定されたメソッドから <see cref="T:Microsoft.Scripting.ScriptCode"/> を作成します。</summary>
            <param name="method"><see cref="T:Microsoft.Scripting.ScriptCode"/> を作成するメソッドを表すデリゲート指定します。</param>
            <param name="path">ソースコードのパスを指定します。</param>
            <param name="customData">カスタムデータを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.ExecuteProgram(Microsoft.Scripting.SourceUnit)">
            <summary>コードを OS のコマンドシェルから開始されたプログラムであるように実行し、コード実行の成功またはエラー状態を示すプロセス終了コードを返します。</summary>
            <param name="program">プログラムを表す <see cref="T:Microsoft.Scripting.SourceUnit"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GenerateSourceCode(System.CodeDom.CodeObject,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary><see cref="T:System.CodeDom.CodeObject"/> をソースコードに変換し、必要であれば行番号のマッピングを行います。</summary>
            <param name="codeDom">作成するソースコードの基になる <see cref="T:System.CodeDom.CodeObject"/> を指定します。</param>
            <param name="path">作成するソースコードのパスを指定します。</param>
            <param name="kind">作成するソースコードの種類を示す <see cref="T:Microsoft.Scripting.SourceCodeKind"/> を指定します。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetService``1(System.Object[])">
            <summary>言語固有のサービスを返します。</summary>
            <param name="args">サービスの取得に使用する引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.Shutdown">
            <summary>この言語エンジンをシャットダウンします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.FormatException(System.Exception)">
            <summary>指定された例外を表す文字列を取得します。</summary>
            <param name="exception">文字列を取得する例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetStackFrames(System.Exception)">
            <summary>例外に対するスタックフレームを返します。</summary>
            <param name="exception">スタックフレームを取得する例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateSnippet(System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定されたコード断片から新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="code">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるコード断片を指定します。</param>
            <param name="kind">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> が保持するコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateSnippet(System.String,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定されたコード断片から新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="code">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるコード断片を指定します。</param>
            <param name="id">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> を識別する文字列を指定します。</param>
            <param name="kind">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> が保持するコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateFileUnit(System.String)">
            <summary>指定されたファイルから新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるファイルを表すパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateFileUnit(System.String,System.Text.Encoding)">
            <summary>指定されたファイルから新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるファイルを表すパスを指定します。</param>
            <param name="encoding">ファイルを開く際に使用するエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateFileUnit(System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定されたファイルから新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるファイルを表すパスを指定します。</param>
            <param name="encoding">ファイルを開く際に使用するエンコーディングを指定します。</param>
            <param name="kind">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> が保持するコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateFileUnit(System.String,System.String)">
            <summary>指定されたファイルのパスおよび内容から新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> を識別するファイルのパスを指定します。</param>
            <param name="content">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になるファイルの内容を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateSourceUnit(Microsoft.Scripting.StreamContentProvider,System.String,System.Text.Encoding,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定された <see cref="T:Microsoft.Scripting.StreamContentProvider"/> から新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="contentProvider">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になる <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を指定します。</param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> を識別するファイルのパスを指定します。</param>
            <param name="encoding">ストリームからのバイナリデータの読み取りに使用するエンコーディングを指定します。</param>
            <param name="kind">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> が保持するコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateSourceUnit(Microsoft.Scripting.TextContentProvider,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定された <see cref="T:Microsoft.Scripting.TextContentProvider"/> から新しい <see cref="T:Microsoft.Scripting.SourceUnit"/> を作成します。</summary>
            <param name="contentProvider">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> の基になる <see cref="T:Microsoft.Scripting.TextContentProvider"/> を指定します。</param>
            <param name="path">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> を識別するファイルのパスを指定します。</param>
            <param name="kind">作成する <see cref="T:Microsoft.Scripting.SourceUnit"/> が保持するコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateUnaryOperationBinder(System.Linq.Expressions.ExpressionType)">
            <summary>指定されたノード型の単項演算に対する <see cref="T:System.Dynamic.UnaryOperationBinder"/> を作成します。</summary>
            <param name="operation">単項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateBinaryOperationBinder(System.Linq.Expressions.ExpressionType)">
            <summary>指定されたノード型の二項演算に対する <see cref="T:System.Dynamic.BinaryOperationBinder"/> を作成します。</summary>
            <param name="operation">二項演算の種類を表す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateConvertBinder(System.Type,System.Nullable{System.Boolean})">
            <summary>指定された型への明示的及び暗黙的な型変換操作に対する <see cref="T:System.Dynamic.ConvertBinder"/> を作成します。</summary>
            <param name="toType">変換先の型を指定します。</param>
            <param name="explicitCast">変換が明示的に行われるかどうかを示す値を指定します。<c>null</c> を指定すると明示的変換か暗黙的変換かは言語が判断するようになります。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateGetMemberBinder(System.String,System.Boolean)">
            <summary>指定されたメンバの取得操作に対する <see cref="T:System.Dynamic.GetMemberBinder"/> を作成します。</summary>
            <param name="name">取得するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索で大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateSetMemberBinder(System.String,System.Boolean)">
            <summary>指定されたメンバの設定操作に対する <see cref="T:System.Dynamic.SetMemberBinder"/> を作成します。</summary>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索で大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateDeleteMemberBinder(System.String,System.Boolean)">
            <summary>指定されたメンバの削除操作に対する <see cref="T:System.Dynamic.DeleteMemberBinder"/> を作成します。</summary>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索で大文字と小文字を区別しないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateCallBinder(System.String,System.Boolean,System.Dynamic.CallInfo)">
            <summary>指定されたメンバの呼び出し操作に対する <see cref="T:System.Dynamic.InvokeMemberBinder"/> を作成します。</summary>
            <param name="name">呼び出すメンバの名前を指定します。</param>
            <param name="ignoreCase">メンバの検索で大文字と小文字を区別しないかどうかを示す値を指定します。</param>
            <param name="callInfo">引数に関する情報を表す <see cref="T:System.Dynamic.CallInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateInvokeBinder(System.Dynamic.CallInfo)">
            <summary>オブジェクトの呼び出し操作に対する <see cref="T:System.Dynamic.InvokeBinder"/> を作成します。</summary>
            <param name="callInfo">引数に関する情報を表す <see cref="T:System.Dynamic.CallInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.CreateCreateBinder(System.Dynamic.CallInfo)">
            <summary>オブジェクトのインスタンス作成操作に対する <see cref="T:System.Dynamic.CreateInstanceBinder"/> を作成します。</summary>
            <param name="callInfo">引数に関する情報を表す <see cref="T:System.Dynamic.CallInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetMemberNames(System.Object)">
            <summary>オブジェクトの既知のメンバの一覧を返します。</summary>
            <param name="obj">メンバの一覧を取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetDocumentation(System.Object)">
            <summary>指定されたオブジェクトに対する文字列で提供されるドキュメントを返します。</summary>
            <param name="obj">ドキュメントを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetCallSignatures(System.Object)">
            <summary>ユーザーに対する表示形式の指定されたオブジェクトの呼び出しに対して適用されるシグネチャのリストを返します。</summary>
            <param name="obj">シグネチャのリストを取得するオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.IsCallable(System.Object)">
            <summary>指定されたオブジェクトが呼び出し可能かどうかを示す値を取得します。</summary>
            <param name="obj">呼び出し可能かどうかを調べるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.FormatObject(Microsoft.Scripting.Runtime.DynamicOperations,System.Object)">
            <summary>オブジェクトの文字列表現を言語固有のオブジェクト表現フォーマットで返します。</summary>
            <param name="operations">フォーマットに必要なあらゆる動的ディスパッチに使用される可能性のある動的サイトコンテナを指定します。</param>
            <param name="obj">フォーマットするオブジェクトを指定します。</param>
            <returns>オブジェクトの文字列表現</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageContext.GetExceptionMessage(System.Exception,System.String@,System.String@)">
            <summary>指定された例外に対するメッセージおよび例外の型を取得します。</summary>
            <param name="exception">メッセージおよび例外の型を取得する例外を指定します。</param>
            <param name="message">取得するメッセージを格納する変数を指定します。</param>
            <param name="errorTypeName">取得する例外の型を格納する変数を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.ContextId">
            <summary>この <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> にのみ公開されるメンバを含むコンテキスト ID を取得します。コンテキスト ID はスコープのフィルタリングに使用されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.DomainManager">
            <summary>この <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> が実行される <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.CanCreateSourceCode">
            <summary>言語がコードを解析したり、翻訳入力単位を作成したりできるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.LanguageVersion">
            <summary>この <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> が表す言語のバージョンを指定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.SearchPaths">
            <summary>スクリプトが別のファイルやコードをインポートまたは要求したときに、ファイルのロードに使用される検索パスを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.LanguageGuid">
            <summary>この言語を識別する GUID (Globally Unique Identifier) を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.VendorGuid">
            <summary>この言語のベンダーを識別する GUID (Globally Unique Identifier) を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.Options">
            <summary>この言語に関する情報を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.CompilerErrorSink">
            <summary>コンパイラが使用する <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LanguageContext.Operations">
            <summary>動的オブジェクトに対する操作を表す <see cref="T:Microsoft.Scripting.Runtime.DynamicOperations"/> のインスタンスを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.InvariantContext.#ctor(Microsoft.Scripting.Runtime.ScriptDomainManager)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.InvariantContext"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="manager">言語コンテキストが実行される <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.InvariantContext.CompileSourceCode(Microsoft.Scripting.SourceUnit,Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>ソースコードを指定されたコンパイラコンテキスト内で解析します。解析する翻訳単位はコンテキストによって保持されます。</summary>
            <param name="sourceUnit">解析する翻訳単位を指定します。</param>
            <param name="options">解析に関するオプションを指定します。</param>
            <param name="errorSink">解析時のエラーを処理する <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.InvariantContext.CanCreateSourceCode">
            <summary>言語がコードを解析したり、翻訳入力単位を作成したりできるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider">
            <summary>
            バイナリデータを適切な言語セマンティクスで読み取る <see cref="T:Microsoft.Scripting.TextContentProvider"/> を作成するために
            <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/>、<see cref="T:Microsoft.Scripting.StreamContentProvider"/> および <see cref="T:System.Text.Encoding"/> をバインドします。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.TextContentProvider">
            <summary>
            テキストデータの単一のソースを基にする <see cref="T:System.IO.TextReader"/> を作成する機能を提供します。
            このクラスはすでにデコードされているか、既知の特定のエンコーディングであるソースの読み取りに使用されます。
            </summary>
            <remarks>
            たとえば、テキストエディタは基になるデータがユーザーが直接編集するメモリ内のテキストバッファである <see cref="T:Microsoft.Scripting.TextContentProvider"/> を提供するかもしれません。
            </remarks>
        </member>
        <member name="F:Microsoft.Scripting.TextContentProvider.Null">
            <summary>データを提供しない <see cref="T:Microsoft.Scripting.TextContentProvider"/> を示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.TextContentProvider.GetReader">
            <summary><see cref="T:Microsoft.Scripting.TextContentProvider"/> が作成されたコンテンツを基にする新しい <see cref="T:System.IO.TextReader"/> を作成します。</summary>
            <remarks>
            このメソッドは複数回呼び出される可能性があります。
            たとえば、1 回目はコードをコンパイルするため、2 回目はエラーメッセージを表示するためにソースコードを取得するため、などです。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider.#ctor(Microsoft.Scripting.Runtime.LanguageContext,Microsoft.Scripting.StreamContentProvider,System.Text.Encoding,System.String)">
            <summary>
            指定された <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/>、<see cref="T:Microsoft.Scripting.StreamContentProvider"/>、<see cref="T:System.Text.Encoding"/> およびファイルパスを使用して、
            <see cref="T:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider"/> クラスの新しいインスタンスを初期化します。
            </summary>
            <param name="context">言語を表す <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
            <param name="streamProvider">基になるデータを提供できる <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を指定します。</param>
            <param name="defaultEncoding">既定のエンコーディングを指定します。</param>
            <param name="path">ソースコードのファイルパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LanguageBoundTextContentProvider.GetReader">
            <summary><see cref="T:Microsoft.Scripting.TextContentProvider"/> が作成されたコンテンツを基にする新しい <see cref="T:System.IO.TextReader"/> を作成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.NotNullAttribute">
            <summary>
            引数を <c>null</c> 非許容であるとしてマークします。
            この属性はよりよいエラーメッセージの生成やメソッド選択のためにメソッドバインディングインフラストラクチャによって使用されます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.NotNullItemsAttribute">
            <summary>
            配列型の引数を <c>null</c> である要素を持たないものとしてマークします。
            この属性はよりよいエラーメッセージの生成やメソッド選択のためにメソッドバインディングインフラストラクチャによって使用されます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ParamDictionaryAttribute">
            <summary>
            通常の引数に束縛されないあらゆるキーワード引数を受け付けることができる引数をマークするために使用されます。
            この特別なキーワード引数は呼び出しで作成されるディクショナリ内で渡されます。
            </summary>
            <remarks>
            引数ディクショナリをサポートするほとんどの言語は下記の型を使用できます。
            <list type="bullet">
            	<item><description>IDictionary&lt;string, anything&gt;</description></item>
            	<item><description>IDictionary&lt;object, anything&gt;</description></item>
            	<item><description>Dictionary&lt;string, anything&gt;</description></item>
            	<item><description>Dictionary&lt;object, anything&gt;</description></item>
            	<item><description>IDictionary</description></item>
            	<item><description>IAttributeCollection (旧式)</description></item>
            </list>
            
            言語レベルでのサポートのない言語では、ユーザーが自分でディクショナリを作成し、アイテムを格納しなければなりません。
            この属性はディクショナリとして <see cref="T:System.ParamArrayAttribute"/> と同値です。
            </remarks>
            <example>
            public static void KeywordArgFunction([ParamsDictionary]IDictionary&lt;string, object&gt; dict) {
                foreach (var v in dict) {
                    Console.WriteLine("Key: {0} Value: {1}", v.Key, v.Value);
                }
            }
            
            Python からは以下のように呼び出されます。
            
            KeywordArgFunction(a = 2, b = "abc")
            
            will print:
                Key: a Value = 2
                Key: b Value = abc
            </example>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ParserSink">
            <summary>構文解析器の状態が通知されるオブジェクトです。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ParserSink.Null">
            <summary>状態が通知されても何もしない <see cref="T:Microsoft.Scripting.Runtime.ParserSink"/> オブジェクトです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.MatchPair(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan,System.Int32)">
            <summary>二つ組としての一致をこのオブジェクトに通知します。</summary>
            <param name="opening">開始トークンのソースコード上での範囲を指定します。</param>
            <param name="closing">終了トークンのソースコード上での範囲を指定します。</param>
            <param name="priority">優先度を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.MatchTriple(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan,System.Int32)">
            <summary>三つ組としての一致をこのオブジェクトに通知します。</summary>
            <param name="opening">開始トークンのソースコード上での範囲を指定します。</param>
            <param name="middle">中央トークンのソースコード上での範囲を指定します。</param>
            <param name="closing">終了トークンのソースコード上での範囲を指定します。</param>
            <param name="priority">優先度を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.EndParameters(Microsoft.Scripting.SourceSpan)">
            <summary>引数リストの終了をこのオブジェクトに通知します。</summary>
            <param name="span">引数リストの終了トークンのソースコード上での範囲を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.NextParameter(Microsoft.Scripting.SourceSpan)">
            <summary>次の引数の解析をこのオブジェクトに通知します。</summary>
            <param name="span">引数トークンのソースコード上での範囲を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.QualifyName(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan,System.String)">
            <summary>名前の修飾をこのオブジェクトに通知します。</summary>
            <param name="selector">セレクタのソースコード上での範囲を指定します。</param>
            <param name="span">修飾される名前のソースコード上での範囲を指定します。</param>
            <param name="name">名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.StartName(Microsoft.Scripting.SourceSpan,System.String)">
            <summary>名前の開始をこのオブジェクトに通知します。</summary>
            <param name="span">名前のソースコード上での範囲を指定します。</param>
            <param name="name">名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ParserSink.StartParameters(Microsoft.Scripting.SourceSpan)">
            <summary>引数リストの開始をこのオブジェクトに通知します。</summary>
            <param name="context">引数リストの開始トークンのソースコード上での範囲を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Scope">
            <summary>
            実行コードに対するホストにより提供される変数群を表します。
            スコープ拡張子を用いて言語ごとの情報をコンテキストに関連づけることもできます。
            このクラスは複数実行にわたって使用される状態の追跡や、カスタムストレージの提供
            (たとえば、オブジェクトをキーとするアクセスなど)、その他の言語固有のセマンティクスに使用することができます。
            </summary>
            <remarks>
            スコープオブジェクトは基になるストレージがスレッドセーフである限りスレッドセーフです。
            スクリプトホストはスレッドセーフなモジュールを用いるかどうかを選択できますが、
            スレッドセーフでないストレージを使用する場合はコードが単一スレッドであることを制約しなければなりません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.#ctor">
            <summary>新しい空のスレッドセーフなディクショナリを使用して、<see cref="T:Microsoft.Scripting.Runtime.Scope"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.#ctor(Microsoft.Scripting.IAttributesCollection)">
            <summary>指定されたディクショナリを使用して <see cref="T:Microsoft.Scripting.Runtime.Scope"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="dictionary">作成されるスコープの基になるディクショナリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.#ctor(System.Dynamic.IDynamicMetaObjectProvider)">
            <summary>ストレージとして任意のオブジェクトを使用する <see cref="T:Microsoft.Scripting.Runtime.Scope"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="storage">ストレージとして使用される任意のオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.GetExtension(Microsoft.Scripting.Runtime.ContextId)">
            <summary>指定された言語コンテキストを表す <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> に関連付けられたスコープ拡張子を取得します。</summary>
            <param name="languageContextId">取得するスコープ拡張子が関連付けられている言語コンテキストを表す <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Scope.SetExtension(Microsoft.Scripting.Runtime.ContextId,Microsoft.Scripting.Runtime.ScopeExtension)">
            <summary>スコープ拡張子を指定された言語コンテキストを表す <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> に関連付けてこのオブジェクトに設定します。拡張子は 1 回しか設定できません。</summary>
            <param name="languageContextId">スコープ拡張子を関連付ける言語コンテキストを表す <see cref="T:Microsoft.Scripting.Runtime.ContextId"/> を指定します。</param>
            <param name="extension">設定するスコープ拡張子を指定します。</param>
            <returns>以前に同じ言語コンテキストにスコープ拡張子が関連付けられていた場合は以前の値。それ以外の場合は新しく設定された <see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.Scope.Storage">
            <summary>このオブジェクトの基になっているストレージを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ScopeExtension">
            <summary>スコープに付加される言語ごとの情報を格納するスコープ拡張子を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScopeExtension.EmptyArray">
            <summary><see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/> の空の配列を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScopeExtension.#ctor(Microsoft.Scripting.Runtime.Scope)">
            <summary>関連づけるスコープを使用して、<see cref="T:Microsoft.Scripting.Runtime.ScopeExtension"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="scope">このスコープ拡張子を関連付けるスコープを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScopeExtension.Scope">
            <summary>このスコープ拡張子が関連付けられているスコープを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeStorage">
            <summary>
            スコープストレージに対する最適化されたキャッシュ可能なサポートを提供します。
            このクラスはスコープ内で格納する値に対して使用される既定のオブジェクトです。
            </summary>
            <remarks>
            実装は <see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> を保持する大文字と小文字を区別しないディクショナリを使用します。
            <see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> オブジェクトはそれぞれの可能なケーシングに対する <see cref="T:Microsoft.Scripting.ScopeVariable"/> オブジェクトを保持します。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetValue(System.String,System.Boolean)">
            <summary>
            オプションで大文字と小文字を区別しないでスコープ内の指定された変数を取得します。
            指定された名前が存在しない場合は <see cref="T:System.InvalidOperationException"/> が発生します。
            </summary>
            <param name="name">スコープ内に格納されている値を識別する名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.TryGetValue(System.String,System.Boolean,System.Object@)">
            <summary>
            オプションで大文字と小文字を区別しないでスコープ内の指定された変数の取得を試みます。
            もし値が存在した場合は <c>true</c>、それ以外の場合は <c>false</c> を返します。
            </summary>
            <param name="name">スコープ内に格納されている値を識別する名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
            <param name="value">取得した値を格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.SetValue(System.String,System.Boolean,System.Object)">
            <summary>オプションで大文字と小文字を区別しないでスコープに指定された値を設定します。</summary>
            <param name="name">スコープに格納される値を識別する名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
            <param name="value">スコープに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.DeleteValue(System.String,System.Boolean)">
            <summary>オプションで大文字と小文字を区別しないでスコープから指定された値を削除します。削除が成功した場合は <c>true</c> を返します。</summary>
            <param name="name">スコープで格納される値を識別する名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.HasValue(System.String,System.Boolean)">
            <summary>オプションで大文字と小文字を区別しないでスコープに指定された値が含まれているかどうかを調べます。</summary>
            <param name="name">スコープに格納されているかどうかを調べる名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetVariable(System.String,System.Boolean)">
            <summary>
            オプションで大文字と小文字を区別しないでスコープに対する <see cref="T:Microsoft.Scripting.IScopeVariable"/> を取得します。
            <see cref="T:Microsoft.Scripting.IScopeVariable"/> は後続のアクセスで辞書検索を実行せずに取得・設定・削除が行われます。
            </summary>
            <param name="name">スコープに格納されているかどうかを調べる名前を指定します。</param>
            <param name="ignoreCase">名前において大文字と小文字を区別するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetVariable(System.String)">
            <summary>
            大文字と小文字を区別するスコープに対する <see cref="T:Microsoft.Scripting.ScopeVariable"/> を取得します。
            <see cref="T:Microsoft.Scripting.ScopeVariable"/> は後続のアクセスで辞書検索を実行せずに取得・設定・削除が行われます。
            </summary>
            <param name="name">取得する <see cref="T:Microsoft.Scripting.ScopeVariable"/> に対する名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetVariableIgnoreCase(System.String)">
            <summary>
            大文字と小文字を区別しないスコープに対する <see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> を取得します。
            <see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> は後続のアクセスで辞書検索を実行せずに取得・設定・削除が行われます。
            </summary>
            <param name="name">取得する <see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> に対する名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetMemberNames">
            <summary>
            このスコープにおいて値があるすべてのメンバの名前を返します。
            返される名前にはすべての利用可能なケーシングが含まれます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetItems">
            <summary>
            このスコープにおいてすべてのメンバ名およびそれらに関連付けられた値を返します。
            返される名前にはすべての利用可能なケーシングが含まれます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeStorage.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行される操作をバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.ScopeStorage.Item(System.String)">
            <summary>大文字と小文字を区別しないでスコープ内で指定された変数を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.IScopeVariable">
            <summary>変数ストレージに対する共通のインターフェイスを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.TryGetValue(System.Object@)">
            <summary>値の取得を試みます。値が正常に取得された場合は <c>true</c> を返します。</summary>
            <param name="value">取得された値を格納する変数を指定します。</param>
            <returns>値が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.SetValue(System.Object)">
            <summary>スコープに指定された値を設定します。</summary>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.IScopeVariable.DeleteValue">
            <summary>スコープから現在の値を削除します。</summary>
            <returns>値が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.IScopeVariable.HasValue">
            <summary>スコープに値が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.IWeakReferencable">
            <summary>対象のオブジェクトに対する弱参照を取得する方法を提供します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.IWeakReferencable.WeakReference">
            <summary>このオブジェクトの弱参照を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeVariable">
            <summary>スコープ内の値を格納します。<see cref="T:Microsoft.Scripting.ScopeVariable"/> は大文字と小文字を区別し、単一の値のみを参照します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.#ctor">
            <summary><see cref="T:Microsoft.Scripting.ScopeVariable"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.TryGetValue(System.Object@)">
            <summary>値の取得を試みます。値が正常に取得された場合は <c>true</c> を返します。</summary>
            <param name="value">取得された値を格納する変数を指定します。</param>
            <returns>値が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.SetValue(System.Object)">
            <summary>スコープに指定された値を設定します。</summary>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariable.DeleteValue">
            <summary>スコープから現在の値を削除します。</summary>
            <returns>値が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariable.HasValue">
            <summary>スコープに値が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariable.WeakReference">
            <summary>このオブジェクトの弱参照を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ScopeVariableIgnoreCase">
            <summary>スコープ内の値を格納します。<see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> は大文字と小文字を区別せず、複数の値を参照します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.#ctor(System.String)">
            <summary>名前を使用して、<see cref="T:Microsoft.Scripting.ScopeVariableIgnoreCase"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="casing">最初の変数の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.TryGetValue(System.Object@)">
            <summary>値の取得を試みます。値が正常に取得された場合は <c>true</c> を返します。</summary>
            <param name="value">取得された値を格納する変数を指定します。</param>
            <returns>値が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.SetValue(System.Object)">
            <summary>スコープに指定された値を設定します。</summary>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.DeleteValue">
            <summary>スコープから現在の値を削除します。</summary>
            <returns>値が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.GetCaseSensitiveStorage(System.String)">
            <summary>指定された名前に対する大文字と小文字を区別する <see cref="T:Microsoft.Scripting.ScopeVariable"/> を取得します。</summary>
            <param name="name">大文字と小文字を区別する <see cref="T:Microsoft.Scripting.ScopeVariable"/> に対する名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.AddNames(System.Collections.Generic.List{System.String})">
            <summary>指定されたリストにこのスコープに含まれている名前を追加します。</summary>
            <param name="list">名前を追加するリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScopeVariableIgnoreCase.AddItems(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>指定されたリストにこのスコープに含まれている名前と値を追加します。</summary>
            <param name="list">名前と値を追加するリストを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariableIgnoreCase.HasValue">
            <summary>スコープに値が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ScopeVariableIgnoreCase.WeakReference">
            <summary>このオブジェクトの弱参照を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ScriptCode">
            <summary>
            特定の <see cref="P:Microsoft.Scripting.ScriptCode.LanguageContext"/> に関連付けられたコンパイルされたコードのインスタンスを表します。
            コードは異なるスコープで複数回実行できます。
            このクラスに対するもう 1 つのホスティング API は <see cref="T:Microsoft.Scripting.Hosting.CompiledCode"/> です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ScriptCode.#ctor(Microsoft.Scripting.SourceUnit)">
            <summary>翻訳単位を使用して、<see cref="T:Microsoft.Scripting.ScriptCode"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="sourceUnit">このクラスに関連づけられる<see cref="P:Microsoft.Scripting.ScriptCode.LanguageContext"/> を保持している <see cref="P:Microsoft.Scripting.ScriptCode.SourceUnit"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.ScriptCode.CreateScope">
            <summary>新しい <see cref="T:Microsoft.Scripting.Runtime.Scope"/> オブジェクトを作成します。</summary>
            <returns>新しい <see cref="T:Microsoft.Scripting.Runtime.Scope"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScriptCode.Run">
            <summary>新しいスコープでこのコードを実行します。</summary>
            <returns>このコードの実行結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScriptCode.Run(Microsoft.Scripting.Runtime.Scope)">
            <summary>指定されたスコープでこのコードを実行します。</summary>
            <param name="scope">このコードを実行するスコープを指定します。</param>
            <returns>このコードの実行結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ScriptCode.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.ScriptCode.LanguageContext">
            <summary>このクラスに関連付けられている <see cref="P:Microsoft.Scripting.ScriptCode.LanguageContext"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ScriptCode.SourceUnit">
            <summary>このクラスのコードを保持している <see cref="P:Microsoft.Scripting.ScriptCode.SourceUnit"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ScriptDomainManager">
            <summary>動的言語ランタイムにおいてスクリプトのドメインを管理します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.#ctor(Microsoft.Scripting.Runtime.DynamicRuntimeHostingProvider,Microsoft.Scripting.Runtime.DlrConfiguration)">
            <summary>指定されたホストおよび構成情報を使用して、<see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="hostingProvider">ホストを指定します。</param>
            <param name="configuration">動的言語ランタイムの構成を行う <see cref="T:Microsoft.Scripting.Runtime.DlrConfiguration"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GenerateContextId">
            <summary>言語コンテキストの ID を生成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GetLanguage(System.Type)">
            <summary>指定された言語プロバイダの型から言語を取得します。</summary>
            <param name="providerType">言語を取得する言語プロバイダの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GetLanguageByTypeName(System.String)">
            <summary>指定された言語プロバイダのアセンブリ修飾型名から言語を取得します。</summary>
            <param name="providerAssemblyQualifiedTypeName">言語を取得する言語プロバイダのアセンブリ修飾型名を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.TryGetLanguage(System.String,Microsoft.Scripting.Runtime.LanguageContext@)">
            <summary>指定された名前から言語の取得を試みます。成功した場合は <c>true</c> を返します。</summary>
            <param name="languageName">取得する言語を表す名前を指定します。</param>
            <param name="language">取得した言語コンテキストを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GetLanguageByName(System.String)">
            <summary>指定された名前から言語を取得します。</summary>
            <param name="languageName">取得する言語を表す名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.TryGetLanguageByFileExtension(System.String,Microsoft.Scripting.Runtime.LanguageContext@)">
            <summary>言語のソースファイルの拡張子から言語の取得を試みます。成功した場合は <c>true</c> を返します。</summary>
            <param name="fileExtension">取得する言語のソースファイルの拡張子を指定します。</param>
            <param name="language">取得した言語コンテキストを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GetLanguageByExtension(System.String)">
            <summary>言語のソースファイルの拡張子から言語を取得します。</summary>
            <param name="fileExtension">取得する言語のソースファイルの拡張子を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.LoadAssembly(System.Reflection.Assembly)">
            <summary>このドメインに指定したアセンブリをロードします。</summary>
            <param name="assembly">ロードするアセンブリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptDomainManager.GetLoadedAssemblies">
            <summary>このドメインに既にロードされているアセンブリのリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.Platform">
            <summary>ホストに関連付けられた <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.SharedIO">
            <summary>このオブジェクトに関連付けられた <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.Host">
            <summary>このオブジェクトのホストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.Configuration">
            <summary>動的言語ランタイムの構成に使用する <see cref="T:Microsoft.Scripting.Runtime.DlrConfiguration"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ScriptDomainManager.Globals">
            <summary>環境変数のコレクションを取得します。</summary>
        </member>
        <member name="E:Microsoft.Scripting.Runtime.ScriptDomainManager.AssemblyLoad">
            <summary>ホストが <see cref="M:Microsoft.Scripting.Runtime.ScriptDomainManager.LoadAssembly(System.Reflection.Assembly)"/> を呼び出したときに発生します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.SharedIO">
            <summary>DLR 言語によって既定の入出力として使用される I/O ストリームを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.#ctor">
            <summary>この <see cref="T:Microsoft.Scripting.Runtime.SharedIO"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.SetOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>ストリームおよび <see cref="T:System.IO.TextWriter"/> を使用して、出力を設定します。</summary>
            <param name="stream">出力データが書き込まれるストリームを指定します。</param>
            <param name="writer">出力データの書き込みに使用する <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.SetErrorOutput(System.IO.Stream,System.IO.TextWriter)">
            <summary>ストリームおよび <see cref="T:System.IO.TextWriter"/> を使用して、エラー出力を設定します。</summary>
            <param name="stream">エラー出力データが書き込まれるストリームを指定します。</param>
            <param name="writer">エラー出力データの書き込みに使用する <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.SetInput(System.IO.Stream,System.IO.TextReader,System.Text.Encoding)">
            <summary>ストリーム、<see cref="T:System.IO.TextReader"/> およびエンコーディングを使用して、入力を設定します。</summary>
            <param name="stream">入力データが読み込まれるストリームを指定します。</param>
            <param name="reader">入力データの読み込みに使用する <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="encoding">スクリプトによって入力から読み込まれたデータを変換するのに使用されるエンコーディングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.RedirectToConsole">
            <summary>出力をコンソールにリダイレクトします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.GetStream(Microsoft.Scripting.Utils.ConsoleStreamType)">
            <summary>指定されたコンソールストリームに対するストリームを取得します。</summary>
            <param name="type">取得するストリームが対応するコンソールストリームを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.GetWriter(Microsoft.Scripting.Utils.ConsoleStreamType)">
            <summary>指定されたコンソールストリームに対する <see cref="T:System.IO.TextWriter"/> を取得します。</summary>
            <param name="type">取得する <see cref="T:System.IO.TextWriter"/> が対応するコンソールストリームを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.GetEncoding(Microsoft.Scripting.Utils.ConsoleStreamType)">
            <summary>指定されたコンソールストリームのエンコーディングを取得します。</summary>
            <param name="type">取得するエンコーディングの基になるストリームが対応するコンソールストリームを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.GetReader(System.Text.Encoding@)">
            <summary>入力ストリームに対応する <see cref="T:System.IO.TextReader"/> およびエンコーディングを取得します。</summary>
            <param name="encoding">取得したエンコーディングを格納する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SharedIO.GetStreamProxy(Microsoft.Scripting.Utils.ConsoleStreamType)">
            <summary>指定されたコンソールストリームに対するストリームプロキシを取得します。</summary>
            <param name="type">取得するストリームプロキシが対応するコンソールストリームを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.InputStream">
            <summary>入力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.OutputStream">
            <summary>出力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.ErrorStream">
            <summary>エラー出力ストリームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.InputReader">
            <summary>入力から文字を読み取る <see cref="T:System.IO.TextReader"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.OutputWriter">
            <summary>出力に文字を書き込む <see cref="T:System.IO.TextWriter"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.ErrorWriter">
            <summary>エラー出力に文字を書き込む <see cref="T:System.IO.TextWriter"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.InputEncoding">
            <summary>入力のエンコーディングを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.OutputEncoding">
            <summary>出力のエンコーディングを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SharedIO.ErrorEncoding">
            <summary>エラー出力のエンコーディングを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceStringContentProvider">
            <summary>コードを表す文字列を格納する <see cref="T:Microsoft.Scripting.TextContentProvider"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceStringContentProvider.#ctor(System.String)">
            <summary>指定されたコードを使用して、<see cref="T:Microsoft.Scripting.SourceStringContentProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="code">基になるコードを表す文字列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceStringContentProvider.GetReader">
            <summary><see cref="T:Microsoft.Scripting.TextContentProvider"/> が作成されたコンテンツを基にする新しい <see cref="T:System.IO.TextReader"/> を作成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.StreamContentProvider">
            <summary>
            バイナリデータの単一のソースを基にするストリームを作成する機能を提供します。
            このクラスは不明なエンコーディングのファイルを開く場合に使用されます。
            </summary>
            <remarks>
            <see cref="T:Microsoft.Scripting.StreamContentProvider"/> はバイナリデータをテキストに変換する固有の方法をサポートできる言語によって提供される
            <see cref="T:Microsoft.Scripting.TextContentProvider"/> によってラップされます。
            たとえば、ファイルの先頭に配置され残りの部分のエンコーディングを指定できるマーカーを認める言語もあります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.StreamContentProvider.GetStream">
            <summary><see cref="T:Microsoft.Scripting.StreamContentProvider"/> が作成されたコンテンツを基にする新しい <see cref="T:System.IO.Stream"/> を作成します。</summary>
            <remarks>
            たとえば、<see cref="T:Microsoft.Scripting.StreamContentProvider"/> がファイルを基にしている場合、<see cref="M:Microsoft.Scripting.StreamContentProvider.GetStream"/> はファイルをもう一度開き新しいストリームを返します。
            このメソッドは複数回呼び出される可能性があります。
            たとえば、1 回目はコードをコンパイルするため、2 回目はエラーメッセージを表示するためにソースコードを取得するため、などです。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.TokenInfo">
            <summary>トークンに関する情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.#ctor(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.TokenCategory,Microsoft.Scripting.TokenTriggers)">
            <summary>ソースコード内の範囲、トークンの種類、トリガを使用して、<see cref="T:Microsoft.Scripting.TokenInfo"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="span">トークンのソースコード上の場所を指定します。</param>
            <param name="category">トークンの種類を指定します。</param>
            <param name="trigger">トークンに関連付けられているトリガを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.Equals(Microsoft.Scripting.TokenInfo)">
            <summary>このトークンと指定されたトークンが等しいかどうかを判断します。</summary>
            <param name="other">比較するトークンを指定します。</param>
            <returns>2 つのトークンが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.Equals(System.Object)">
            <summary>このオブジェクトと指定されたオブジェクトが等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>2 つのオブジェクトが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>計算されたハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.op_Equality(Microsoft.Scripting.TokenInfo,Microsoft.Scripting.TokenInfo)">
            <summary>2 つのトークンが等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目のトークン。</param>
            <param name="right">比較する 2 つ目のトークン。</param>
            <returns>2 つのトークンが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.TokenInfo.op_Inequality(Microsoft.Scripting.TokenInfo,Microsoft.Scripting.TokenInfo)">
            <summary>2 つのトークンが等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目のトークン。</param>
            <param name="right">比較する 2 つ目のトークン。</param>
            <returns>2 つのトークンが等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.TokenInfo.Category">
            <summary>このトークンの種類を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.TokenInfo.Trigger">
            <summary>このトークンに関連付けられているトリガを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.TokenInfo.SourceSpan">
            <summary>このトークンのソースコード上の場所を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.TokenizerService">
            <summary>言語固有のサービスとしてのトークナイザーを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.TokenizerService"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.Initialize(System.Object,System.IO.TextReader,Microsoft.Scripting.SourceUnit,Microsoft.Scripting.SourceLocation)">
            <summary>指定された状態、<see cref="T:System.IO.TextReader"/>、翻訳単位、初期位置を使用して、このオブジェクトを初期化します。</summary>
            <param name="state">トークナイザの状態を表す <see cref="T:System.Object"/> 値を指定します。</param>
            <param name="sourceReader">ソースコードを読み取る <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="sourceUnit">ソースコードを格納する翻訳単位を指定します。</param>
            <param name="initialLocation">トークナイザの初期位置を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.ReadToken">
            <summary>トークナイザを次のトークンのすぐ後まで進め、そのカテゴリを取得します。</summary>
            <returns>スキャンしたトークンに関連付けられている情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.SkipToken">
            <summary>トークナイザを次のトークンのすぐ後まで進めます。</summary>
            <returns>ストリームの末尾に到達した場合は <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.ReadTokens(System.Int32)">
            <summary>ストリームのブロックを覆うすべてのトークンを取得します。</summary>
            <remarks>startLocation + length がトークンの中間である場合でも、スキャナはすべてのトークンを返すべきです。</remarks>
            <param name="characterCount">トークンの読み取りを終了するまでに読み取る文字数を指定します。</param>
            <returns>トークン</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerService.SkipTokens(System.Int32)">
            <summary>現在の位置からすくなくとも指定された文字数分をスキャンします。</summary>
            <param name="countOfChars">トークンの読み取りを終了するまでに読み取る文字数を指定します。</param>
            <remarks>このメソッドは任意の開始位置における状態を調べるために使用されます。</remarks>
            <returns>ストリームの末尾に到達した場合は <c>false</c></returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.CurrentState">
            <summary>トークナイザの現在の内部状態を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.CurrentPosition">
            <summary>トークナイザの現在の位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.IsRestartable">
            <summary>トークナイザが再開可能かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerService.ErrorSink">
            <summary>トークナイザのエラーを処理する <see cref="T:Microsoft.Scripting.ErrorSink"/> オブジェクトを取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.TokenTriggers">
            <summary>トークナイザから駆動されるトリガを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.None">
            <summary>どのトリガも設定されていません。これは既定値です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.MemberSelect">
            <summary>メンバ選択の開始を示す文字が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.MatchBraces">
            <summary>言語においてペアとなる要素の開始または終了部分が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.ParameterStart">
            <summary>引数リストの開始を示す文字が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.ParameterNext">
            <summary>引数リスト中で引数を区切る文字が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.ParameterEnd">
            <summary>引数リストの終了を示す文字が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.Parameter">
            <summary>メソッドの引数リスト内の引数が解析されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenTriggers.MethodTip">
            <summary>インテリセンスのメソッド情報操作の制御に使用されるフラグに対するマスクです。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ScriptCodeParseResult">
            <summary>ソースコードの解析結果を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Complete">
            <summary>ソースコードは文法的に正確です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Empty">
            <summary>ソースコードは空のステートメントまたは式を表しています。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.Invalid">
            <summary>ソースコードは既に無効であり、文法的に正しいとされる部分はありません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.IncompleteToken">
            <summary>最後のトークンが未完了です。しかし、ソースコードは正確に完了させることができます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ScriptCodeParseResult.IncompleteStatement">
            <summary>最後のステートメントが未完了です。しかし、ソースコードは正確に完了させることができます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Severity">
            <summary>エラーの深刻さを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Severity.Ignore">
            <summary>無視可能なエラーです。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Severity.Warning">
            <summary>警告です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Severity.Error">
            <summary>通常のエラーです。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Severity.FatalError">
            <summary>致命的なエラーです。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceCodeKind">
            <summary>ソースコードの種類を定義します。パーサーは適宜初期状態を設定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.Unspecified">
            <summary>種類は指定されていません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.Expression">
            <summary>ソースコードは式を表しています。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.Statements">
            <summary>ソースコードは複数のステートメントを表しています。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.SingleStatement">
            <summary>ソースコードは単一のステートメントを表しています。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.File">
            <summary>ソースコードはファイルの内容です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.InteractiveCode">
            <summary>ソースコードは対話コマンドです。 </summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeKind.AutoDetect">
            <summary>言語パーサーが自動的に種類を決定します。決定できなかった場合は構文エラーが報告されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.EnumBounds">
            <summary>列挙体の範囲に関するメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.EnumBounds.IsValid(Microsoft.Scripting.SourceCodeKind)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SourceCodeKind"/> 列挙体が有効な値を示しているかどうかを返します。</summary>
            <param name="value">有効かどうかを調べる <see cref="T:Microsoft.Scripting.SourceCodeKind"/> 列挙体の値を指定します。</param>
            <returns>有効な値であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.SourceCodeReader">
            <summary>ソースコードを読み取る <see cref="T:System.IO.TextReader"/> を表します。</summary>    
        </member>
        <member name="F:Microsoft.Scripting.SourceCodeReader.Null">
            <summary>何も読み取らない <see cref="T:Microsoft.Scripting.SourceCodeReader"/> を示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.#ctor(System.IO.TextReader,System.Text.Encoding)">
            <summary>指定された <see cref="T:System.IO.TextReader"/> およびエンコーディングを使用して、<see cref="T:Microsoft.Scripting.SourceCodeReader"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="textReader">基になる <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="encoding">基になるバイトストリームからのデータの読み取りに使用されるエンコーディングを指定します。基になるデータがテキストの場合は <c>null</c> を指定できます。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.ReadLine">
            <summary>テキスト リーダーから 1 行分の文字を読み取り、そのデータを文字列として返します。</summary>
            <returns>リーダーの次の行。またはすべての文字が読み取られた場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.SeekLine(System.Int32)">
            <summary>テキストストリームから指定された行の最初の文字を検索します。</summary>
            <param name="line">行番号を指定します。現在の行番号が 1 と仮定されます。</param>
            <returns>行が見つかった場合は <c>true</c>、それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.ReadToEnd">
            <summary>テキスト リーダーの現在位置から末尾まですべての文字を読み取り、1 つの文字列として返します。</summary>
            <returns>テキスト リーダーの現在位置から末尾までのすべての文字を含む文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>指定した最大文字数を現在のリーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
            <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index"/> から (<paramref name="index"/> + <paramref name="count"/> - 1) までの値が、現在のソースから読み取られた文字に置き換えられます。</param>
            <param name="index">書き込みを開始する <paramref name="buffer"/>内の位置。</param>
            <param name="count">読み取り対象の最大文字数。 指定された文字数をバッファーに読み取る前にリーダーの末尾に到達した場合、メソッドは制御を返します。</param>
            <returns>
            読み取られた文字数。
            この数値は、リーダー内に使用できるデータがあるかどうかによって異なりますが、<paramref name="count"/> 以下の数値になります。
            読み取り対象の文字がない場合にこのメソッドを呼び出すと、0 (ゼロ) が返されます。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary> 指定した最大文字数を現在のテキスト リーダーから読み取り、バッファーの指定したインデックス位置にそのデータを書き込みます。</summary>
            <param name="buffer">このメソッドが戻るとき、指定した文字配列の <paramref name="index"/> から (<paramref name="index"/> + <paramref name="count"/> -1) までの値が、現在のソースから読み取られた文字に置き換えられています。</param>
            <param name="index">書き込みを開始する <paramref name="buffer"/> 内の位置。</param>
            <param name="count">読み取り対象の最大文字数。</param>
            <returns>読み取られた文字数。この数値は、すべての入力文字が読み取られたかどうかによって異なりますが、<paramref name="count"/> 以下の数値になります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.Peek">
            <summary>リーダーや文字の読み取り元の状態を変更せずに、次の文字を読み取ります。 リーダーから実際に文字を読み取らずに次の文字を返します。</summary>
            <returns>読み取り対象の次の文字を表す整数。使用できる文字がないか、リーダーがシークをサポートしていない場合は -1。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.Read">
            <summary> テキスト リーダーから次の文字を読み取り、1 文字分だけ文字位置を進めます。</summary>
            <returns>テキスト リーダーからの次の文字。それ以上読み取り可能な文字がない場合は -1。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceCodeReader.Dispose(System.Boolean)">
            <summary><see cref="T:Microsoft.Scripting.SourceCodeReader"/> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
            <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <c>trie</c>。アンマネージ リソースだけを解放する場合は <c>false</c>。</param>
        </member>
        <member name="P:Microsoft.Scripting.SourceCodeReader.Encoding">
            <summary>
            基になるバイトストリームから読み取られたデータを変換するためにリーダーによって使用されるエンコーディングを取得します。
            リーダーがテキストから読み取っていて、デコードが行われていない場合は <c>null</c> になります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceCodeReader.BaseReader">
            <summary>基になる <see cref="T:System.IO.TextReader"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.FileStreamContentProvider">
            <summary>ディスク上のファイルによって保持されるストリームコンテンツに対する <see cref="T:Microsoft.Scripting.StreamContentProvider"/> を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.FileStreamContentProvider.#ctor(Microsoft.Scripting.PlatformAdaptationLayer,System.String)">
            <summary><see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> および基になるファイルのパスを使用して、<see cref="T:Microsoft.Scripting.FileStreamContentProvider"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="pal">ファイルのオープンに使用する <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を指定します。</param>
            <param name="path">対象となるコンテンツを保持しているファイルのパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.FileStreamContentProvider.GetStream">
            <summary><see cref="T:Microsoft.Scripting.FileStreamContentProvider"/> が作成されたコンテンツを基にする新しい <see cref="T:System.IO.Stream"/> を作成します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.FileStreamContentProvider.Path">
            <summary>このコンテンツを保持しているファイルのパスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceLocation">
            <summary>ソースコード内の位置を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary><see cref="T:Microsoft.Scripting.SourceLocation"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="index">ソースコード内での 0 から始まるインデックスを指定します。</param>
            <param name="line">ソースコード内での 1 から始まる行番号を指定します。</param>
            <param name="column">ソースコード内での 1 から始まる桁番号を指定します。</param>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.None">
            <summary>どの場所も示していない有効な位置を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.Invalid">
            <summary>無効な位置を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceLocation.MinValue">
            <summary>有効な最小の位置を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.Equals(System.Object)">
            <summary>指定のオブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
            <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.GetHashCode">
            <summary>特定の型のハッシュ関数として機能します。</summary>
            <returns>現在のオブジェクトのハッシュ コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.ToString">
            <summary>現在のオブジェクトを表す文字列を返します。</summary>
            <returns>現在のオブジェクトを表す文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.ToDebugString">
            <summary>現在のオブジェクトのデバッグ用の文字列を返します。</summary>
            <returns>現在のオブジェクトのデバッグ用の文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.Equals(Microsoft.Scripting.SourceLocation)">
            <summary>この位置が指定された位置と等しいかどうかを判断します。</summary>
            <param name="other">比較する位置を指定します。</param>
            <returns>指定された位置が現在の位置と等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.CompareTo(Microsoft.Scripting.SourceLocation)">
            <summary>この位置を指定された位置と比較します。</summary>
            <param name="other">比較する位置を指定します。</param>
            <returns>この位置が指定された位置よりも後にある場合は 0 より大きい値。等しい場合は 0。先にある場合は 0 より小さい値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.CompareTo(System.Object)">
            <summary>このオブジェクトを指定されたオブジェクトと比較します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトよりも後にある場合は 0 より大きい値。等しい場合は 0。先にある場合は 0 より小さい値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Equality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>2 つの位置が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_Inequality(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>2 つの位置が等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して 1 つ目の位置が 2 つ目の位置よりも先にあるかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>1 つ目の位置が 2 つ目の位置よりも先にある場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThan(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して 1 つ目の位置が 2 つ目の位置よりも後にあるかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>1 つ目の位置が 2 つ目の位置よりも後にある場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_LessThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して 1 つ目の位置が 2 つ目の位置と等しいか、または、先にあるかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>1 つ目の位置が 2 つ目の位置よりも等しいか先にある場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceLocation.op_GreaterThanOrEqual(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された 2 つの位置を比較して 1 つ目の位置が 2 つ目の位置と等しいか、または、後にあるかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の位置。</param>
            <param name="right">比較する 2 つ目の位置。</param>
            <returns>1 つ目の位置が 2 つ目の位置よりも等しいか後にある場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Index">
            <summary>ソースコード内での 0 から始まるインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Line">
            <summary>ソースコード内での 1 から始まる行番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.Column">
            <summary>ソースコード内での 1 から始まる桁番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceLocation.IsValid">
            <summary>この位置が有効かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceSpan">
            <summary>ソースコード内の範囲を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.#ctor(Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>開始位置と終了位置を使用して、<see cref="T:Microsoft.Scripting.SourceSpan"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="start">この範囲の開始位置を指定します。</param>
            <param name="end">この範囲の終了位置を指定します。</param>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.None">
            <summary>どの位置も示さない有効な範囲を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SourceSpan.Invalid">
            <summary>無効な範囲を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.Equals(System.Object)">
            <summary>指定のオブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
            <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.ToString">
            <summary>現在のオブジェクトを表す文字列を返します。</summary>
            <returns>現在のオブジェクトを表す文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.GetHashCode">
            <summary>特定の型のハッシュ関数として機能します。</summary>
            <returns>現在のオブジェクトのハッシュ コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.ToDebugString">
            <summary>現在のオブジェクトのデバッグ用の文字列を返します。</summary>
            <returns>現在のオブジェクトのデバッグ用の文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.Equals(Microsoft.Scripting.SourceSpan)">
            <summary>この範囲が指定された範囲と等しいかどうかを判断します。</summary>
            <param name="other">比較する範囲を指定します。</param>
            <returns>指定された範囲が現在の範囲と等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Equality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>指定された 2 つの範囲を比較して等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の範囲。</param>
            <param name="right">比較する 2 つ目の範囲。</param>
            <returns>2 つの範囲が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceSpan.op_Inequality(Microsoft.Scripting.SourceSpan,Microsoft.Scripting.SourceSpan)">
            <summary>指定された 2 つの範囲を比較して等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 つ目の範囲。</param>
            <param name="right">比較する 2 つ目の範囲。</param>
            <returns>2 つの範囲が等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Start">
            <summary>この範囲の開始位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.End">
            <summary>この範囲の終了位置を取得します。範囲の後の最初の文字位置を表します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.Length">
            <summary>この範囲の長さ (範囲に含まれている文字数) を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceSpan.IsValid">
            <summary>この範囲に含まれている位置が有効かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceUnit">
            <summary>翻訳入力単位を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.FetchCodeProperties">
            <summary>ソースコードを解析することにより、ソースコードの状態を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.FetchCodeProperties(Microsoft.Scripting.CompilerOptions)">
            <summary>ソースコードを解析することにより、ソースコードの状態を取得します。</summary>
            <param name="options">解析に使用する <see cref="T:Microsoft.Scripting.CompilerOptions"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.#ctor(Microsoft.Scripting.Runtime.LanguageContext,Microsoft.Scripting.TextContentProvider,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>言語、ソースコード、パス、ソースコードの種類を使用して、<see cref="T:Microsoft.Scripting.SourceUnit"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="context">この翻訳入力単位が保持するソースコードの言語を表す <see cref="P:Microsoft.Scripting.SourceUnit.LanguageContext"/> を指定します。</param>
            <param name="contentProvider">この翻訳入力単位が保持するソースコードを提供する <see cref="T:Microsoft.Scripting.TextContentProvider"/> を指定します。</param>
            <param name="path">この翻訳入力単位を識別する文字列を指定します。</param>
            <param name="kind">この翻訳入力単位が保持するソースコードの種類を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.GetReader">
            <summary>ソースコードを読み取る新しい <see cref="T:System.IO.TextReader"/> を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.GetCodeLines(System.Int32,System.Int32)">
            <summary>翻訳入力単位から指定された範囲の行を読み取ります。</summary>
            <param name="start">取得する行の 1 から始まるインデックスを指定します。</param>
            <param name="count">取得する行数を指定します。</param>
            <returns>読み取られた各行を格納する <see cref="T:System.String"/> 型の配列。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.GetCodeLine(System.Int32)">
            <summary>翻訳入力単位から指定された行を読み取ります。</summary>
            <param name="line">取得する行の 1 から始まるインデックスを指定します。</param>
            <returns>行の内容。改行文字は含まれません。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.GetCode">
            <summary>スクリプトの翻訳入力の内容を取得します。</summary>
            <returns>コンテンツ全体。</returns>
            <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.MapLocation(Microsoft.Scripting.SourceLocation)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SourceLocation"/> から実際のソースコード上の位置を表す <see cref="T:Microsoft.Scripting.SourceLocation"/> を返します。</summary>
            <param name="loc"><see cref="T:Microsoft.Scripting.SourceLocation"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Compile">
            <summary>この翻訳入力単位を<see cref="T:Microsoft.Scripting.ScriptCode"/> オブジェクトにコンパイルします。</summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Compile(Microsoft.Scripting.ErrorSink)">
            <summary>この翻訳入力単位を<see cref="T:Microsoft.Scripting.ScriptCode"/> オブジェクトにコンパイルします。</summary>
            <param name="errorSink">エラーが報告される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Compile(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>この翻訳入力単位を<see cref="T:Microsoft.Scripting.ScriptCode"/> オブジェクトにコンパイルします。</summary>
            <param name="options">コンパイル時に使用するオプションを指定します。</param>
            <param name="errorSink">エラーが報告される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできませんでした。</exception>
            <returns>コンパイルされたコードを表す <see cref="T:Microsoft.Scripting.ScriptCode"/>。エラーによってパーサーがコードをコンパイルできない場合は <c>null</c> になります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.Runtime.Scope)">
            <summary>コードを指定したスコープで実行し、結果を返します。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.Runtime.Scope,Microsoft.Scripting.ErrorSink)">
            <summary>コードを指定したスコープで実行し、結果を返します。エラーは指定された <see cref="T:Microsoft.Scripting.ErrorSink"/> に報告されます。</summary>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <param name="errorSink">エラーが報告される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute">
            <summary>コードを言語によって作成された新しいスコープで実行し、結果を返します。</summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.ErrorSink)">
            <summary>コードを言語によって作成された新しいスコープで実行し、結果を返します。エラーは指定された <see cref="T:Microsoft.Scripting.ErrorSink"/> に報告されます。</summary>
            <param name="errorSink">エラーが報告される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.Execute(Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>コードを言語によって作成された新しいスコープで実行し、結果を返します。エラーは指定された <see cref="T:Microsoft.Scripting.ErrorSink"/> に報告されます。</summary>
            <param name="options">コンパイル時に使用するオプションを指定します。</param>
            <param name="errorSink">エラーが報告される <see cref="T:Microsoft.Scripting.ErrorSink"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードをコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.ExecuteProgram">
            <summary>コードを OS のコマンドシェルから開始されたプログラムであるように実行し、コード実行の成功またはエラー状態を示すプロセス終了コードを返します。</summary>
            <exception cref="T:Microsoft.Scripting.SyntaxErrorException">コードがコンパイルできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SourceUnit.SetLineMapping(System.Collections.Generic.KeyValuePair{System.Int32,System.Int32}[])">
            <summary>この翻訳入力単位に行のマッピングを設定します。</summary>
            <param name="lineMap">行のマッピングを表す配列を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.Path">
            <summary>翻訳入力単位を識別するホストにより設定される値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.HasPath">
            <summary>この翻訳入力単位を識別する値が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.Kind">
            <summary>この翻訳入力単位によって保持されるソースコードの種類を示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.Document">
            <summary>この翻訳入力単位を説明する <see cref="T:System.Linq.Expressions.SymbolDocumentInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.LanguageContext">
            <summary>この翻訳入力単位の言語を表す <see cref="P:Microsoft.Scripting.SourceUnit.LanguageContext"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.CodeProperties">
            <summary>ソースコードの状態を示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceUnit.EmitDebugSymbols">
            <summary>この翻訳入力単位でのコンパイルがデバッグシンボルを出力可能かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SymbolId">
            <summary>大文字と小文字を区別する場合としない場合の両方をサポートする文字列の内部表現を提供します。</summary>
            <remarks>
            規定ではすべての検索は大文字と小文字を区別します。
            大文字と小文字を区別しない検索は最初に通常の <see cref="T:Microsoft.Scripting.SymbolId"/> を作成したのち、<see cref="P:Microsoft.Scripting.SymbolId.CaseInsensitiveIdentifier"/> プロパティにアクセスすることで実行できます。
            </remarks>
        </member>
        <member name="F:Microsoft.Scripting.SymbolId.EmptyId">
            <summary><c>null</c> 文字列に対する ID を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SymbolId.InvalidId">
            <summary>無効な ID を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.#ctor(System.Int32)">
            <summary>指定された ID を使用して <see cref="T:Microsoft.Scripting.SymbolId"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="value">この <see cref="T:Microsoft.Scripting.SymbolId"/> の識別子を指定します。</param>
        </member>
        <member name="F:Microsoft.Scripting.SymbolId.Empty">
            <summary><c>null</c> 文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/> を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.SymbolId.Invalid">
            <summary>無効な値に対する <see cref="T:Microsoft.Scripting.SymbolId"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.Equals(Microsoft.Scripting.SymbolId)">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> が指定された <see cref="T:Microsoft.Scripting.SymbolId"/> と同じ文字列を表しているかどうかを示す値を取得します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.SymbolId"/> が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.CompareTo(Microsoft.Scripting.SymbolId)">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> と指定された <see cref="T:Microsoft.Scripting.SymbolId"/> が表す文字列を比較します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.SymbolId"/> のソートにおける前後関係を表す数値を指定します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.CompareTo(System.Object)">
            <summary>このオブジェクトと指定されたオブジェクトを比較します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトの指定されたオブジェクトに対する前後関係を表す数値を指定します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary><see cref="T:System.Runtime.Serialization.SerializationInfo"/> に、オブジェクトをシリアル化するために必要なデータを設定します。</summary>
            <param name="info">データを読み込む先の <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">このシリアル化のシリアル化先 (<see cref="T:System.Runtime.Serialization.StreamingContext"/> を参照)。</param>
            <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.Equals(System.Object)">
            <summary>このオブジェクトと指定されたオブジェクトが等しいかどうかを返します。</summary>
            <param name="obj">等価性を比較するオブジェクトを指定します。</param>
            <returns>2 つのオブジェクトが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>このオブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.ToString">
            <summary>このオブジェクトの文字列表現を取得します。このメソッドをシンボルが表す文字列を取得するために使用しないでください。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_Explicit(System.String)~Microsoft.Scripting.SymbolId">
            <summary>指定された文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/> を取得します。</summary>
            <param name="s"><see cref="T:Microsoft.Scripting.SymbolId"/> に対する文字列を指定します。</param>
            <returns>文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_Equality(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SymbolId"/> が等しいかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.SymbolId"/> が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_Inequality(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SymbolId"/> が等しくないかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.SymbolId"/> が等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_LessThanOrEqual(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> 以下であるかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> 以下の場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_LessThan(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> よりも小さいかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> よりも小さい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_GreaterThanOrEqual(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> 以上であるかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> 以上の場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolId.op_GreaterThan(Microsoft.Scripting.SymbolId,Microsoft.Scripting.SymbolId)">
            <summary>指定された 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> よりも大きいかどうかを比較します。</summary>
            <param name="a">比較する 1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <param name="b">比較する 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns>1 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> が 2 つ目の <see cref="T:Microsoft.Scripting.SymbolId"/> よりも大きい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.IsEmpty">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> が null 文字列を表しているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.IsInvalid">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> が無効であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.Id">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> が表現する文字列の ID を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.CaseInsensitiveIdentifier">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> に対する大文字と小文字を区別しない <see cref="T:Microsoft.Scripting.SymbolId"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.CaseInsensitiveId">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> に対する大文字と小文字を区別しない ID を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SymbolId.IsCaseInsensitive">
            <summary>この <see cref="T:Microsoft.Scripting.SymbolId"/> が大文字と小文字を区別しないかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.SymbolTable">
            <summary>システム上のすべての <see cref="T:Microsoft.Scripting.SymbolId"/> の共通のテーブルを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SymbolTable.StringToId(System.String)">
            <summary>指定された文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/> を取得します。</summary>
            <param name="value">取得する <see cref="T:Microsoft.Scripting.SymbolId"/> が表す文字列を指定します。</param>
            <returns>文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolTable.IdToString(Microsoft.Scripting.SymbolId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SymbolId"/> が表す文字列を取得します。</summary>
            <param name="id">取得する文字列を表す <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.SymbolId"/> に対する文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolTable.ContainsId(Microsoft.Scripting.SymbolId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SymbolId"/> が文字列を表しているかどうかを示す値を取得します。</summary>
            <param name="id">有効かどうかを確認する <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.SymbolId"/> が有効ならば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolTable.StringHasId(System.String)">
            <summary>指定された文字列を表す <see cref="T:Microsoft.Scripting.SymbolId"/> が存在するかどうかを示す値を取得します。</summary>
            <param name="symbol"><see cref="T:Microsoft.Scripting.SymbolId"/> の存在を確認する文字列を指定します。</param>
            <returns>文字列に <see cref="T:Microsoft.Scripting.SymbolId"/> が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SymbolTable.StringToIdOrEmpty(System.String)">
            <summary>指定された文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/> を取得します。文字列が <c>null</c> の場合は <see cref="F:Microsoft.Scripting.SymbolId.Empty"/> が返されます。</summary>
            <param name="value">取得する <see cref="T:Microsoft.Scripting.SymbolId"/> が表す文字列を指定します。</param>
            <returns>文字列に対する <see cref="T:Microsoft.Scripting.SymbolId"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.SyntaxErrorException">
            <summary>構文解析が失敗した場合にスローされる例外。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor(System.String)">
            <summary>指定したメッセージを使用して、<see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">エラーを説明するメッセージ。</param>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の原因を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は <c>null</c> 参照 (Visual Basic では、Nothing)。</param>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor(System.String,Microsoft.Scripting.SourceUnit,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>指定したメッセージを使用して、<see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">エラーを説明するメッセージ。</param>
            <param name="sourceUnit">エラーが発生した翻訳入力単位。</param>
            <param name="span">エラーが発生したソースコード上の範囲。</param>
            <param name="errorCode">エラーの種類を示す数値。</param>
            <param name="severity">エラーの深刻さを示す値。</param>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor(System.String,System.String,System.String,System.String,Microsoft.Scripting.SourceSpan,System.Int32,Microsoft.Scripting.Severity)">
            <summary>指定したメッセージを使用して、<see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">エラーを説明するメッセージ。</param>
            <param name="path">エラーが発生したファイルを示すパス。</param>
            <param name="code">エラーが発生したソースコード。</param>
            <param name="line">エラーが発生した行のソースコード。</param>
            <param name="span">エラーが発生したソースコード上の範囲。</param>
            <param name="errorCode">エラーの種類を示す数値。</param>
            <param name="severity">エラーの深刻さを示す値。</param>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.SyntaxErrorException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
        </member>
        <member name="M:Microsoft.Scripting.SyntaxErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>その例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo"/> を設定します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> 参照 (Visual Basic の場合は Nothing) です。</exception>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.RawSpan">
            <summary>エラーが発生したマッピングされていないソースコード上の範囲を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.SourceCode">
            <summary>エラーが発生したソースコードを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.SourcePath">
            <summary>エラーが発生したファイルを示すパスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.Severity">
            <summary>発生したエラーの深刻さを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.Line">
            <summary>エラーが発生したソースコード上の 1 から始まる行番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.Column">
            <summary>エラーが発生したソースコード上の 1 から始まる桁番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.ErrorCode">
            <summary>発生したエラーの種類を示す数値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.SymbolDocumentName">
            <summary>エラーが発生したシンボルドキュメント名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SyntaxErrorException.CodeLine">
            <summary>エラーが発生したソースコードの行を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.TokenCategory">
            <summary>トークンの種類を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.None">
            <summary>なし</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.EndOfStream">
            <summary>ストリームの終わり</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.WhiteSpace">
            <summary>空白文字</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Comment">
            <summary>ブロックコメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.LineComment">
            <summary>単一行コメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.DocComment">
            <summary>ドキュメントコメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.NumericLiteral">
            <summary>数値リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.CharacterLiteral">
            <summary>文字リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.StringLiteral">
            <summary>文字列リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.RegularExpressionLiteral">
            <summary>正規表現リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Keyword">
            <summary>キーワード</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Directive">
            <summary>ディレクティブ (例: #line)</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Operator">
            <summary>言語で特定の意味を持つ区切り文字</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Delimiter">
            <summary>2 つの言語要素間で区切りとして動作するトークン</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Identifier">
            <summary>識別子</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Grouping">
            <summary>波括弧、丸括弧、角括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.Error">
            <summary>エラー</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenCategory.LanguageDefined">
            <summary>言語により定義された要素</summary>
        </member>
        <member name="T:Microsoft.Scripting.TokenKind">
            <summary>トークンの種類を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Default">
            <summary>既定値</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Error">
            <summary>エラー</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Whitespace">
            <summary>空白文字</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.EndOfLine">
            <summary>行の終端</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LineJoin">
            <summary>行結合文字</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Indentation">
            <summary>インデント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.SingleLineComment">
            <summary>単一行コメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.MultiLineComment">
            <summary>複数行コメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.NestableCommentStart">
            <summary>ネスト可能なコメント開始</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.NestableCommentEnd">
            <summary>ネスト可能なコメント終了</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.SingleLineDocComment">
            <summary>単一行ドキュメントコメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.MultiLineDocComment">
            <summary>複数行ドキュメントコメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Directive">
            <summary>ディレクティブ</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Keyword">
            <summary>キーワード</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Identifier">
            <summary>識別子</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.VerbatimIdentifier">
            <summary>逐語的識別子</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Variable">
            <summary>変数</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.IntegerLiteral">
            <summary>整数リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.FloatLiteral">
            <summary>浮動小数点リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.CharacterLiteral">
            <summary>文字リテラル</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.String">
            <summary>文字列</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.UnicodeString">
            <summary>Unicode 文字列</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.FormattedString">
            <summary>フォーマットされた文字列</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.FormattedUnicodeString">
            <summary>フォーマットされた Unicode 文字列</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LeftParenthesis">
            <summary>左丸括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.RightParenthesis">
            <summary>右丸括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LeftBracket">
            <summary>左角括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.RightBracket">
            <summary>右角括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LeftBrace">
            <summary>左波括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.RightBrace">
            <summary>右波括弧</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Comma">
            <summary>カンマ</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Dot">
            <summary>ドット (ピリオド)</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Semicolon">
            <summary>セミコロン</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Colon">
            <summary>コロン</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleColon">
            <summary>2 連続コロン</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.TripleColon">
            <summary>3 連続コロン</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Plus">
            <summary>加算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.PlusPlus">
            <summary>インクリメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.PlusEqual">
            <summary>加算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Minus">
            <summary>減算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.MinusMinus">
            <summary>デクリメント</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.MinusEqual">
            <summary>減算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Mul">
            <summary>乗算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.MulEqual">
            <summary>乗算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Div">
            <summary>除算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DivEqual">
            <summary>除算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.FloorDivide">
            <summary>整数化除算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.FloorDivideEqual">
            <summary>整数化除算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Mod">
            <summary>剰余算</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.ModEqual">
            <summary>剰余算代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Power">
            <summary>冪乗</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.PowerEqual">
            <summary>冪乗代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LeftShift">
            <summary>左シフト</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LeftShiftEqual">
            <summary>左シフト代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.RightShift">
            <summary>右シフト</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.RightShiftEqual">
            <summary>右シフト代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BitwiseAnd">
            <summary>ビット積</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BitwiseAndEqual">
            <summary>ビット積代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BitwiseOr">
            <summary>ビット和</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BitwiseOrEqual">
            <summary>ビット和代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Xor">
            <summary>排他的論理和</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.XorEqual">
            <summary>排他的論理和代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BooleanAnd">
            <summary>論理積</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BooleanAndEqual">
            <summary>論理積代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BooleanOr">
            <summary>論理和</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BooleanOrEqual">
            <summary>論理和代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Twiddle">
            <summary>チルダ</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.TwiddleEqual">
            <summary>チルダ代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LessThan">
            <summary>より小さい</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.GreaterThan">
            <summary>より大きい</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LessThanOrEqual">
            <summary>以下</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.GreaterThanOrEqual">
            <summary>以上</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Assign">
            <summary>代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.AssignAlias">
            <summary>エイリアス代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.AssignColon">
            <summary>コロン代入</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Equal">
            <summary>等しい</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.StrictEqual">
            <summary>厳密に等しい</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Not">
            <summary>否定</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.NotEqual">
            <summary>等しくない</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.StrictNotEqual">
            <summary>厳密に等しくない</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Unequal">
            <summary>等しくない</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.CompareEqual">
            <summary>比較等価</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Match">
            <summary>マッチする</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.NotMatch">
            <summary>マッチしない</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Arrow">
            <summary>アロー</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleArrow">
            <summary>二重アロー</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.BackQuote">
            <summary>バッククオート</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleDot">
            <summary>2 連続ドット</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.TripleDot">
            <summary>3 連続ドット</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.At">
            <summary>アットマーク</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleAt">
            <summary>2 連続アットマーク</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Question">
            <summary>疑問符</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleQuestion">
            <summary>2 連続疑問符</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Backslash">
            <summary>バックスラッシュ</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleBackslash">
            <summary>2 連続バックスラッシュ</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.Dollar">
            <summary>ドル記号</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.DoubleDollar">
            <summary>2 連続ドル記号</summary>
        </member>
        <member name="F:Microsoft.Scripting.TokenKind.LanguageDefined">
            <summary>言語により定義された要素</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ArrayUtils">
            <summary>配列に関するユーティリティメソッドを提供します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ArrayUtils.EmptyStrings">
            <summary><see cref="T:System.String"/> 型の空の配列を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ArrayUtils.EmptyObjects">
            <summary><see cref="T:System.Object"/> 型の空の配列を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.Copy``1(``0[])">
            <summary>指定された配列の簡易コピーを作成します。</summary>
            <typeparam name="T">簡易コピーを作成する配列の要素型を指定します。</typeparam>
            <param name="array">簡易コピーを作成する配列を指定します。</param>
            <returns>配列の簡易コピー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>指定されたシーケンスを配列に変換します。シーケンスがすでに配列である場合は元のシーケンスを返します。</summary>
            <typeparam name="T">配列を取得するシーケンスの要素型を指定します。</typeparam>
            <param name="items">配列を取得するシーケンスを指定します。</param>
            <returns>シーケンスに対応する配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.ShiftLeft``1(``0[],System.Int32)">
            <summary>指定された配列を指定された数左へシフトします。0 未満のインデックスになった要素は削除され、長さは切り詰められます。</summary>
            <typeparam name="T">左シフトする配列の要素型を指定します。</typeparam>
            <param name="array">左シフトする配列を指定します。</param>
            <param name="count">配列のシフト量を指定します。</param>
            <returns>左シフトされた配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.Insert``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>指定された要素をコレクションの先頭に追加した配列を返します。</summary>
            <typeparam name="T">追加される要素の型を指定します。</typeparam>
            <param name="item">追加する要素を指定します。</param>
            <param name="items">要素を追加する元のコレクションを指定します。</param>
            <returns>コレクションの先頭に要素が追加された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.Insert``1(``0,``0,System.Collections.Generic.ICollection{``0})">
            <summary>指定された 2 個の要素をコレクションの先頭に追加した配列を返します。</summary>
            <typeparam name="T">追加される要素の型を指定します。</typeparam>
            <param name="item1">追加する 1 番目の要素を指定します。</param>
            <param name="item2">追加する 2 番目の要素を指定します。</param>
            <param name="items">要素を追加する元のコレクションを指定します。</param>
            <returns>コレクションの先頭に 2 個の要素が追加された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.Append``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>指定された任意個の要素をコレクションの末尾に追加した配列を返します。</summary>
            <typeparam name="T">追加される要素の型を指定します。</typeparam>
            <param name="items">要素を追加する元のコレクションを指定します。</param>
            <param name="added">追加する要素を指定します。</param>
            <returns>コレクションの末尾に要素が追加された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.RemoveFirst``1(``0[])">
            <summary>指定された配列の最初の要素を削除した配列を返します。</summary>
            <typeparam name="T">配列の要素型を指定します。</typeparam>
            <param name="array">最初の要素を削除する配列を指定します。</param>
            <returns>最初の要素が削除された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.RemoveLast``1(``0[])">
            <summary>指定された配列の最後の要素を削除した配列を返します。</summary>
            <typeparam name="T">配列の要素型を指定します。</typeparam>
            <param name="array">最後の要素を削除する配列を指定します。</param>
            <returns>最後の要素が削除された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.RemoveAt``1(``0[],System.Int32)">
            <summary>指定された配列の指定されたインデックスにある要素を削除した配列を返します。</summary>
            <typeparam name="T">配列の要素型を指定します。</typeparam>
            <param name="array">要素が削除される配列を指定します。</param>
            <param name="indexToRemove">削除する要素の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスの要素が削除された配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ArrayUtils.InsertAt``1(``0[],System.Int32,``0[])">
            <summary>指定された配列の指定されたインデックスに指定された任意個の要素を挿入した配列を返します。</summary>
            <typeparam name="T">配列の要素型を指定します。</typeparam>
            <param name="array">要素が挿入される配列を指定します。</param>
            <param name="index">要素の挿入の開始位置を示す 0 から始まるインデックスを指定します。</param>
            <param name="items">挿入する要素を指定します。</param>
            <returns>指定されたインデックスに指定された要素が挿入された配列。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName">
            <summary>アセンブリ名によって修飾された型名を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.TypeName">
            <summary>型名を取得します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.AssemblyName">
            <summary>アセンブリ名を表す <see cref="T:System.Reflection.AssemblyName"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.#ctor(System.String,System.Reflection.AssemblyName)">
            <summary>型名とそれを修飾するアセンブリ名を使用して、<see cref="T:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="typeName">型名を指定します。</param>
            <param name="assemblyName">アセンブリ名を表す <see cref="T:System.Reflection.AssemblyName"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.#ctor(System.Type)">
            <summary>型を使用して、<see cref="T:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="type">型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.#ctor(System.String)">
            <summary>文字列で表されたアセンブリ修飾型名から <see cref="T:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="assemblyQualifiedTypeName">アセンブリ修飾型名を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.ParseArgument(System.String,System.String)">
            <summary>指定された引数を解析して、<see cref="T:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="str">引数として渡された文字列を指定します。</param>
            <param name="argumentName">引数の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.Equals(Microsoft.Scripting.Utils.AssemblyQualifiedTypeName)">
            <summary>指定されたアセンブリ修飾型名がこのアセンブリ修飾型名と等しいかどうかを判断します。</summary>
            <param name="other">等価比較をするアセンブリ修飾型名を指定します。</param>
            <returns>等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.Equals(System.Object)">
            <summary>指定されたオブジェクトがこのオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">等価比較をするオブジェクトを指定します。</param>
            <returns>等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.GetHashCode">
            <summary>このオブジェクトに対するハッシュ値を返します。</summary>
            <returns>ハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.op_Equality(Microsoft.Scripting.Utils.AssemblyQualifiedTypeName,Microsoft.Scripting.Utils.AssemblyQualifiedTypeName)">
            <summary>指定された 2 つのアセンブリ修飾型名が等しいかどうかを判断します。</summary>
            <param name="name">1 つ目のアセンブリ修飾型名を指定します。</param>
            <param name="other">2 つ目のアセンブリ修飾型名を指定します。</param>
            <returns>等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.AssemblyQualifiedTypeName.op_Inequality(Microsoft.Scripting.Utils.AssemblyQualifiedTypeName,Microsoft.Scripting.Utils.AssemblyQualifiedTypeName)">
            <summary>指定された 2 つのアセンブリ修飾型名が等しくないかどうかを判断します。</summary>
            <param name="name">1 つ目のアセンブリ修飾型名を指定します。</param>
            <param name="other">2 つ目のアセンブリ修飾型名を指定します。</param>
            <returns>等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.Assert">
            <summary>表明を行うメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotNull(System.Object)">
            <summary>1 つの参照型変数が <c>null</c> でないことを表明します。</summary>
            <param name="var"><c>null</c> でないことを表明する参照型変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotNull(System.Object,System.Object)">
            <summary>2 つの参照型変数がどちらも <c>null</c> でないことを表明します。</summary>
            <param name="var1"><c>null</c> でないことを表明する 1 つ目の参照型変数を指定します。</param>
            <param name="var2"><c>null</c> でないことを表明する 2 つ目の参照型変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotNull(System.Object,System.Object,System.Object)">
            <summary>3 つの参照型変数がどれも <c>null</c> でないことを表明します。</summary>
            <param name="var1"><c>null</c> でないことを表明する 1 つ目の参照型変数を指定します。</param>
            <param name="var2"><c>null</c> でないことを表明する 2 つ目の参照型変数を指定します。</param>
            <param name="var3"><c>null</c> でないことを表明する 3 つ目の参照型変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotNull(System.Object,System.Object,System.Object,System.Object)">
            <summary>4 つの参照型変数がどれも <c>null</c> でないことを表明します。</summary>
            <param name="var1"><c>null</c> でないことを表明する 1 つ目の参照型変数を指定します。</param>
            <param name="var2"><c>null</c> でないことを表明する 2 つ目の参照型変数を指定します。</param>
            <param name="var3"><c>null</c> でないことを表明する 3 つ目の参照型変数を指定します。</param>
            <param name="var4"><c>null</c> でないことを表明する 4 つ目の参照型変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotEmpty(System.String)">
            <summary>指定された <see cref="T:System.String"/> 型の変数が <c>null</c> または空でないことを表明します。</summary>
            <param name="str"><c>null</c> または空でないことを表明する変数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>指定されたシーケンスが <c>null</c> または空でないことを表明します。</summary>
            <typeparam name="T">シーケンスの要素型を指定します。</typeparam>
            <param name="items">空でないことを表明するシーケンスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.Assert.NotNullItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>指定されたシーケンスに <c>null</c> である要素が含まれていないことを表明します。</summary>
            <typeparam name="T">シーケンスの要素型を指定します。</typeparam>
            <param name="items"><c>null</c> である要素が含まれていないことを表明するシーケンスを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Utils.Assert.Unreachable">
            <summary>コード上で到達しない部分をマークし、到達した場合はメッセージを表示して例外を返します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ConsoleInputStream">
            <summary>
            コンソール入力ストリーム (Console.OpenStandardInput) には少量のデータを読み取った際に発生するバグがあります。
            このクラスは標準入力ストリームを十分な量のデータが読み取られることを保証するバッファでラップします。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ConsoleInputStream.Instance">
            <summary>標準入力ストリームの唯一のインスタンスを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ConsoleInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>現在のストリームからバイト シーケンスを読み取り、読み取ったバイト数の分だけストリームの位置を進めます。</summary>
            <param name="buffer">バイト配列。 このメソッドが戻るとき、指定したバイト配列の <paramref name="offset"/> から (<paramref name="offset"/> + <paramref name="count"/> -1) までの値が、現在のソースから読み取られたバイトに置き換えられます。</param>
            <param name="offset">現在のストリームから読み取ったデータの格納を開始する位置を示す <paramref name="buffer"/> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
            <param name="count">現在のストリームから読み取る最大バイト数。</param>
            <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ConsoleInputStream.Flush">
            <summary>ストリームに対応するすべてのバッファーをクリアし、バッファー内のデータを基になるデバイスに書き込みます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ConsoleInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>現在のストリーム内の位置を設定します。</summary>
            <param name="offset"><paramref name="origin"/> パラメーターからのバイト オフセット。</param>
            <param name="origin">新しい位置を取得するために使用する参照ポイントを示す <see cref="T:System.IO.SeekOrigin"/> 型の値。</param>
            <returns>現在のストリーム内の新しい位置。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ConsoleInputStream.SetLength(System.Int64)">
            <summary>現在のストリームの長さを設定します。</summary>
            <param name="value">現在のストリームの希望の長さ (バイト数)。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ConsoleInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>現在のストリームにバイト シーケンスを書き込み、書き込んだバイト数の分だけストリームの現在位置を進めます。</summary>
            <param name="buffer">バイト配列。 このメソッドは、<paramref name="buffer"/> から現在のストリームに、<paramref name="count"/> で指定されたバイト数だけコピーします。</param>
            <param name="offset">現在のストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer"/> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
            <param name="count">現在のストリームに書き込むバイト数。</param>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ConsoleInputStream.CanRead">
            <summary>現在のストリームが読み取りをサポートするかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ConsoleInputStream.CanSeek">
            <summary>現在のストリームがシークをサポートするかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ConsoleInputStream.CanWrite">
            <summary>現在のストリームが書き込みをサポートするかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ConsoleInputStream.Length">
            <summary>ストリームの長さをバイト単位で取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.ConsoleInputStream.Position">
            <summary>現在のストリーム内の位置を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ConsoleStreamType">
            <summary>基となるコンソールのストリームを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ConsoleStreamType.Input">
            <summary>入力ストリーム</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ConsoleStreamType.Output">
            <summary>出力ストリーム</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ConsoleStreamType.ErrorOutput">
            <summary>エラー出力ストリーム</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ContractUtils">
            <summary>契約を実行し、違反した場合には例外を送出するメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Requires(System.Boolean)">
            <summary>指定された条件を引数に要求します。</summary>
            <param name="precondition">条件を指定します。</param>
            <exception cref="T:System.ArgumentException">条件が不成立です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Requires(System.Boolean,System.String)">
            <summary>指定された条件を引数に要求します。</summary>
            <param name="precondition">条件を指定します。</param>
            <param name="paramName">引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentException">条件が不成立です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Requires(System.Boolean,System.String,System.String)">
            <summary>指定された条件を引数に要求します。</summary>
            <param name="precondition">条件を指定します。</param>
            <param name="paramName">引数の名前を指定します。</param>
            <param name="message">条件が不成立のとき送出される例外のメッセージを指定します。</param>
            <exception cref="T:System.ArgumentException">条件が不成立です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotNull(System.Object,System.String)">
            <summary>指定された引数が <c>null</c> でないことを要求します。</summary>
            <param name="value"><c>null</c> でないことを要求する参照型変数を指定します。</param>
            <param name="paramName">引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException">引数が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotEmpty(System.String,System.String)">
            <summary>指定された <see cref="T:System.String"/> 型の引数が空文字でないことを要求します。</summary>
            <param name="str">空でないことを要求する <see cref="T:System.String"/> 型の引数を指定します。</param>
            <param name="paramName">引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException">引数は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">引数は空文字です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>指定されたシーケンスの引数が空でないことを要求します。</summary>
            <typeparam name="T">シーケンスの型を指定します。</typeparam>
            <param name="collection">空でないことを要求するシーケンスを指定します。</param>
            <param name="paramName">引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException">引数は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">引数は空のシーケンスを表しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresNotNullItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>指定された列挙可能なコレクションに <c>null</c> である要素が含まれていないことを要求します。</summary>
            <param name="collection"><c>null</c> 要素が含まれていないことを要求するコレクションを指定します。</param>
            <param name="collectionName">コレクションの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException">コレクションは <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">コレクションに <c>null</c> 要素が含まれています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>指定されたインデックスがコレクション内の位置を示していることを要求します。</summary>
            <typeparam name="T">コレクションの要素型を指定します。</typeparam>
            <param name="collection">インデックスが位置を示していることを要求するコレクションを指定します。</param>
            <param name="index">コレクション内の位置を示していることを要求するインデックスを指定します。</param>
            <param name="indexName">インデックスの名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">インデックスはコレクション外の場所を示しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayIndex(System.Int32,System.Int32,System.String)">
            <summary>指定されたインデックスがコレクション内の位置を示していることを要求します。</summary>
            <param name="length">インデックスが位置を示していることを要求するコレクションの長さを指定します。</param>
            <param name="index">コレクション内の位置を示していることを要求するインデックスを指定します。</param>
            <param name="indexName">インデックスの名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">インデックスはコレクション外の場所を示しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayInsertIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.String)">
            <summary>指定されたインデックスがコレクション内の位置または末尾を示していることを要求します。</summary>
            <typeparam name="T">コレクションの要素型を指定します。</typeparam>
            <param name="collection">インデックスが位置を示していることを要求するコレクションを指定します。</param>
            <param name="index">コレクション内の位置または末尾を示していることを要求するインデックスを指定します。</param>
            <param name="indexName">インデックスの名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">インデックスはコレクション外の場所を示しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayInsertIndex(System.Int32,System.Int32,System.String)">
            <summary>指定されたインデックスがコレクション内の位置または末尾を示していることを要求します。</summary>
            <param name="length">インデックスが位置を示していることを要求するコレクションの長さを指定します。</param>
            <param name="index">コレクション内の位置または末尾を示していることを要求するインデックスを指定します。</param>
            <param name="indexName">インデックスの名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">インデックスはコレクション外の場所を示しています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayRange``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32,System.String,System.String)">
            <summary>指定された範囲がコレクション内にあることを要求します。</summary>
            <typeparam name="T">コレクションの要素型を指定します。</typeparam>
            <param name="collection">範囲が存在することを要求するコレクションを指定します。</param>
            <param name="offset">範囲の開始位置を示すインデックスを指定します。</param>
            <param name="count">範囲の長さを指定します。</param>
            <param name="offsetName">範囲の開始位置を表す引数の名前を指定します。</param>
            <param name="countName">範囲の長さを表す引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">指定された範囲がコレクション内にありません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.RequiresArrayRange(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>指定された範囲がコレクション内にあることを要求します。</summary>
            <param name="length">範囲が存在することを要求するコレクションの長さを指定します。</param>
            <param name="offset">範囲の開始位置を示すインデックスを指定します。</param>
            <param name="count">範囲の長さを指定します。</param>
            <param name="offsetName">範囲の開始位置を表す引数の名前を指定します。</param>
            <param name="countName">範囲の長さを表す引数の名前を指定します。</param>
            <exception cref="T:System.ArgumentOutOfRangeException">指定された範囲がコレクション内にありません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Invariant(System.Boolean)">
            <summary>不変条件を指定します。</summary>
            <param name="condition">不変条件となる条件を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Ensures(System.Boolean)">
            <summary>メソッドの事後条件を指定します。</summary>
            <param name="condition">事後条件を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ContractUtils.Result``1">
            <summary>メソッドの結果を表します。</summary>
            <typeparam name="T">結果型を指定します。</typeparam>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Strings">
            <summary>
               Strongly-typed and parameterized string factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation_ContainsGenericParameters(System.Object,System.Object)">
            <summary>
            A string like  "Cannot access member {1} declared on type {0} because the type contains generic parameters."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MissingType(System.Object)">
            <summary>
            A string like  "Type '{0}' is missing or cannot be loaded."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAccessFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be read through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAssignmentFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be assigned to through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            A string like  "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCast(System.Object,System.Object)">
            <summary>
            A string like  "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnknownMemberType(System.Object)">
            <summary>
            A string like  "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NonGenericWithGenericGroup(System.Object)">
            <summary>
            A string like  "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation(System.Object)">
            <summary>
            A string like  "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            A string like  "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnhandledConvert(System.Object)">
            <summary>
            A string like  "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoCallableMethods(System.Object,System.Object)">
            <summary>
            A string like  "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExtensionMustBePublic(System.Object)">
            <summary>
            A string like  "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            A string like  "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.FieldReadonly(System.Object)">
            <summary>
            A string like  "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.PropertyReadonly(System.Object)">
            <summary>
            A string like  "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExpectedBoundEvent(System.Object)">
            <summary>
            A string like  "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedType(System.Object,System.Object)">
            <summary>
            A string like  "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MemberWriteOnly(System.Object)">
            <summary>
            A string like  "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidStreamType(System.Object)">
            <summary>
            A string like  "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddCasing(System.Object)">
            <summary>
            A string like  "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddIdentifier(System.Object)">
            <summary>
            A string like  "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCtorImplementation(System.Object,System.Object)">
            <summary>
            A string like  "Type '{0}' doesn't provide a suitable public constructor or its implementation is faulty: {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            A string like  "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoImplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoExplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NameNotDefined(System.Object)">
            <summary>
            A string like  "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.IllegalNew_GenericParams(System.Object)">
            <summary>
            A string like  "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodPreconditionViolated">
            <summary>
            A string like  "Method precondition violated"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidArgumentValue">
            <summary>
            A string like  "Invalid argument value"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyStringRequired">
            <summary>
            A string like  "Non-empty string required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyCollectionRequired">
            <summary>
            A string like  "Non-empty collection required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustBeExceptionInstance">
            <summary>
            A string like  "must by an Exception instance"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfTestMustBeBool">
            <summary>
            A string like  "Type of test must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfExpressionMustBeBool">
            <summary>
            A string like  "Type of the expression must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EmptyStringIsInvalidPath">
            <summary>
            A string like  "Empty string is not a valid path."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidDelegate">
            <summary>
            A string like  "Invalid delegate type (Invoke method not found)."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ExpectedStaticProperty">
            <summary>
            A string like  "expected only static property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.PropertyDoesNotExist">
            <summary>
            A string like  "Property doesn't exist on the provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FieldDoesNotExist">
            <summary>
            A string like  "Field doesn't exist on provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveConstructorForTheSignature">
            <summary>
            A string like  "Type doesn't have constructor with a given signature"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForName">
            <summary>
            A string like  "Type doesn't have a method with a given name."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForNameSignature">
            <summary>
            A string like  "Type doesn't have a method with a given name and signature."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CountCannotBeNegative">
            <summary>
            A string like  "Count must be non-negative."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ArrayTypeMustBeArray">
            <summary>
            A string like  "arrayType must be an array type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustHaveCodeOrTarget">
            <summary>
            A string like  "Either code or target must be specified."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FirstArgumentMustBeCallSite">
            <summary>
            A string like  "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoInstanceForCall">
            <summary>
            A string like  "no instance for call."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTest">
            <summary>
            A string like  "Missing Test."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTarget">
            <summary>
            A string like  "Missing Target."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FinallyAlreadyDefined">
            <summary>
            A string like  "Finally already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotHaveFaultAndFinally">
            <summary>
            A string like  "Can not have fault and finally."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FaultAlreadyDefined">
            <summary>
            A string like  "Fault already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GlobalsMustBeUnique">
            <summary>
            A string like  "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GenNonSerializableBinder">
            <summary>
            A string like  "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidPath">
            <summary>
            A string like  "Specified path is invalid."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.DictionaryNotHashable">
            <summary>
            A string like  "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.LanguageRegistered">
            <summary>
            A string like  "language already registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodOrOperatorNotImplemented">
            <summary>
            A string like  "The method or operation is not implemented."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoException">
            <summary>
            A string like  "No exception."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.AlreadyInitialized">
            <summary>
            A string like  "Already initialized."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustReturnScopeExtension">
            <summary>
            A string like  "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidParamNumForService">
            <summary>
            A string like  "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotChangeNonCachingValue">
            <summary>
            A string like  "Cannot change non-caching value."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoCodeToCompile">
            <summary>
            A string like  "No code to compile."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.QueueEmpty">
            <summary>
            A string like  "Queue empty."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationNotStarted">
            <summary>
            A string like  "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationFinished">
            <summary>
            A string like  "Enumeration already finished."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidOutputDir">
            <summary>
            A string like  "Invalid output directory."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidAsmNameOrExtension">
            <summary>
            A string like  "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoDefaultValue">
            <summary>
            A string like  "No default value for a given type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnknownLanguageProviderType">
            <summary>
            A string like  "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantReadProperty">
            <summary>
            A string like  "can't read from property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantWriteProperty">
            <summary>
            A string like  "can't write to property"
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustHaveCodeOrTarget">
            <summary>
            ArgumentException with message like "Either code or target must be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            InvalidOperationException with message like "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidCast(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownMemberType(System.Object)">
            <summary>
            InvalidOperationException with message like "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FirstArgumentMustBeCallSite">
            <summary>
            InvalidOperationException with message like "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoInstanceForCall">
            <summary>
            InvalidOperationException with message like "no instance for call."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTest">
            <summary>
            InvalidOperationException with message like "Missing Test."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTarget">
            <summary>
            InvalidOperationException with message like "Missing Target."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NonGenericWithGenericGroup(System.Object)">
            <summary>
            TypeLoadException with message like "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOperation(System.Object)">
            <summary>
            ArgumentException with message like "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FinallyAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Finally already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotHaveFaultAndFinally">
            <summary>
            InvalidOperationException with message like "Can not have fault and finally."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FaultAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Fault already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnhandledConvert(System.Object)">
            <summary>
            ArgumentException with message like "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCallableMethods(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GlobalsMustBeUnique">
            <summary>
            ArgumentException with message like "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GenNonSerializableBinder">
            <summary>
            ArgumentException with message like "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidPath">
            <summary>
            ArgumentException with message like "Specified path is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DictionaryNotHashable">
            <summary>
            ArgumentTypeException with message like "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.LanguageRegistered">
            <summary>
            InvalidOperationException with message like "language already registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MethodOrOperatorNotImplemented">
            <summary>
            NotImplementedException with message like "The method or operation is not implemented."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoException">
            <summary>
            InvalidOperationException with message like "No exception."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExtensionMustBePublic(System.Object)">
            <summary>
            ArgumentException with message like "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.AlreadyInitialized">
            <summary>
            InvalidOperationException with message like "Already initialized."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustReturnScopeExtension">
            <summary>
            InvalidImplementationException with message like "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidParamNumForService">
            <summary>
            ArgumentException with message like "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotChangeNonCachingValue">
            <summary>
            ArgumentException with message like "Cannot change non-caching value."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FieldReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.PropertyReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExpectedBoundEvent(System.Object)">
            <summary>
            ArgumentTypeException with message like "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedType(System.Object,System.Object)">
            <summary>
            ArgumentTypeException with message like "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MemberWriteOnly(System.Object)">
            <summary>
            MemberAccessException with message like "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCodeToCompile">
            <summary>
            InvalidOperationException with message like "No code to compile."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidStreamType(System.Object)">
            <summary>
            ArgumentException with message like "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.QueueEmpty">
            <summary>
            InvalidOperationException with message like "Queue empty."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationNotStarted">
            <summary>
            InvalidOperationException with message like "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationFinished">
            <summary>
            InvalidOperationException with message like "Enumeration already finished."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddCasing(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddIdentifier(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOutputDir">
            <summary>
            ArgumentException with message like "Invalid output directory."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidAsmNameOrExtension">
            <summary>
            ArgumentException with message like "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoImplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoExplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NameNotDefined(System.Object)">
            <summary>
            MissingMemberException with message like "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoDefaultValue">
            <summary>
            ArgumentException with message like "No default value for a given type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownLanguageProviderType">
            <summary>
            ArgumentException with message like "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantReadProperty">
            <summary>
            InvalidOperationException with message like "can't read from property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantWriteProperty">
            <summary>
            InvalidOperationException with message like "can't write to property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.IllegalNew_GenericParams(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            System.Security.VerificationException with message like "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ExceptionUtils">
            <summary>よく利用される例外を送出するユーティリティ メソッドを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ExceptionUtils.MakeArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>引数名、引数の値、エラーメッセージを使用して、新しい <see cref="T:System.ArgumentOutOfRangeException"/> を作成します。</summary>
            <param name="paramName">例外の原因となったパラメーターの名前。</param>
            <param name="actualValue">この例外の原因である引数の値。</param>
            <param name="message">エラーを説明するメッセージ。</param>
            <returns>新しく作成された <see cref="T:System.ArgumentOutOfRangeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ExceptionUtils.MakeArgumentItemNullException(System.Int32,System.String)">
            <summary>引数の指定されたインデックスが <c>null</c> であることを示す新しい <see cref="T:System.ArgumentNullException"/> を作成します。</summary>
            <param name="index"><c>null</c> 要素が格納されている引数のインデックスを指定します。</param>
            <param name="arrayName">引数の名前を指定します。</param>
            <returns>引数に <c>null</c> 要素が格納されていることを示す新しく作成された <see cref="T:System.ArgumentNullException"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ExpressionUtils">
            <summary>式木に対するユーティリティメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ExpressionUtils.Convert(System.Linq.Expressions.Expression,System.Type)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> が指定された型でない場合のみ型変換ノードでラップする変換操作を返します。</summary>
            <param name="expression">変換の対象となる <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="type">変換先の型を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Utils.NativeMethods">
            <summary>ネイティブメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.NativeMethods.SetEnvironmentVariable(System.String,System.String)">
            <summary>指定された環境変数に指定された値を設定します。環境変数が存在しない場合は新しく作成し、値に <c>null</c> が指定された場合はその変数を削除します。</summary>
            <param name="name">環境変数を表す名前を指定します。</param>
            <param name="value">環境変数に設定する値を指定します。</param>
            <returns>成功した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
    </members>
</doc>
