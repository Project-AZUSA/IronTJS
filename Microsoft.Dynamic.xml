<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Dynamic</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Scripting.Actions.Calls.ActualArguments">
            <summary>メソッドに渡される実引数のセットを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ActualArguments.#ctor(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>実引数に関する情報を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ActualArguments"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="args">実引数を指定します。</param>
            <param name="namedArgs">名前付き実引数を指定します。</param>
            <param name="argNames">名前付き実引数の名前を指定します。</param>
            <param name="hiddenCount">エラー報告に使用される隠された実引数の数を指定します。</param>
            <param name="collapsedCount">折りたたまれた実引数の数を指定します。</param>
            <param name="firstSplattedArg">展開された実引数の先頭の引数リスト内での位置を指定します。</param>
            <param name="splatIndex">省略された展開された実引数の先頭の引数リスト内での位置を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ActualArguments.TryBindNamedArguments(Microsoft.Scripting.Actions.Calls.MethodCandidate,Microsoft.Scripting.Actions.Calls.ArgumentBinding@,Microsoft.Scripting.Actions.Calls.CallFailure@)">
            <summary>
            名前付き実引数を仮引数に関連付け、名前付き実引数と対応する仮引数の間の関係を示すインデックスの置換を返します。
            このメソッドは重複および関連付けられていない名前付き引数を確認します。
            </summary>
            <param name="method">関連付ける仮引数を持つメソッドを指定します。</param>
            <param name="binding">関連付けの結果として得られる置換を格納する変数を指定します。</param>
            <param name="failure">関連付けが失敗した際に <see cref="T:Microsoft.Scripting.Actions.Calls.CallFailure"/> オブジェクトが格納される変数を指定します。</param>
            <returns>関連付けが成功した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <remarks>すべての i に対して、namedArgs[i] は parameters[args.Length + bindingPermutation[i]] に関連付けられていることを保証します。</remarks>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.CollapsedCount">
            <summary>折りたたまれた引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.SplatIndex">
            <summary>省略された展開された実引数の先頭の引数リスト内での位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.FirstSplattedArg">
            <summary>展開された実引数の先頭の引数リスト内での位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.ArgNames">
            <summary>名前付き実引数の名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.NamedArguments">
            <summary>名前付き実引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.Arguments">
            <summary>実引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.Count">
            <summary>折りたたまれた実引数を含まない実引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.HiddenCount">
            <summary>エラー報告に使用される隠された実引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.VisibleCount">
            <summary>コールサイトに渡された折りたたまれた実引数を含む可視である実引数の総数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ActualArguments.Item(System.Int32)">
            <summary>指定されたインデックスの実引数を取得します。</summary>
            <param name="index">インデックスを指定します。</param>
            <returns>指定されたインデックスの実引数。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ApplicableCandidate">
            <summary>適用可能なメソッドとその名前付き引数の関連付けを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ApplicableCandidate.#ctor(Microsoft.Scripting.Actions.Calls.MethodCandidate,Microsoft.Scripting.Actions.Calls.ArgumentBinding)">
            <summary>指定されたメソッドと名前付き引数の関連付けを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ApplicableCandidate"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">適用可能なメソッドを指定します。</param>
            <param name="argBinding">適用可能なメソッドに対する名前付き引数の関連付けを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ApplicableCandidate.GetParameter(System.Int32)">
            <summary>指定されたインデックスに対応する仮引数を取得します。</summary>
            <param name="argumentIndex">仮引数に対応するインデックスを指定します。</param>
            <returns>指定されたインデックスに対応する仮引数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ApplicableCandidate.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>このオブジェクトに対する文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ApplicableCandidate.Method">
            <summary>適用可能なメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ApplicableCandidate.ArgumentBinding">
            <summary>適用可能なメソッドに対する名前付き引数の関連付けを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ArgBuilder">
            <summary>
            メソッドビルダーによって使用される実引数の値を提供します。
            メソッドに渡されるそれぞれの物理引数に対して 1 つの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が存在します。
            メソッドに定義された論理引数を表す <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> とは対照的です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.#ctor(System.Reflection.ParameterInfo)">
            <summary>指定された仮引数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">この <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が対応する仮引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.ArgumentRead(System.Object,System.Object[])">
            <summary>
            指定されたインデックスに対する実引数にアクセスする関数を表します。
            ToDelegate から返されるとき、クローズオーバーされた値は引数を最適化除去したデリゲート呼び出しを可能にします。
            この関数はリフレクションを用いて参照されるため、名前を変更する場合は呼び出し元の更新が必要になります。
            </summary>
            <param name="value">引数に対応するインデックスを指定します。</param>
            <param name="args">実引数を指定します。</param>
            <returns>指定されたインデックスに対応する実引数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.UpdateFromReturn(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>メソッド呼び出しの後に提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <returns>提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/>。更新が不要な場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.ToReturnExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver)">
            <summary>引数が返戻値を生成する (ref あるいは out のような) 場合、呼び出し元に追加で返される値を提供します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <returns>呼び出し基で追加で返される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgBuilder.ParameterInfo">
            <summary>基になる仮引数を取得します。コンストラクタの返戻値に対する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> などでは <c>null</c> になることもあります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgBuilder.Type">
            <summary>引数に対して要求される型を取得します。<see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が引数を消費しない場合は <c>null</c> が返されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgBuilder.ByRefArgument">
            <summary>参照渡しの引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding">
            <summary>実引数と仮引数の間の関連付けを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.#ctor(System.Int32)">
            <summary>位置が決定されている引数の数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="positionalArgCount">位置が決定されている引数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.#ctor(System.Int32,System.Int32[])">
            <summary>位置が決定されている引数の数と名前付き引数の関連付けを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="positionalArgCount">位置が決定されている引数の数を指定します。</param>
            <param name="binding">名前付き引数の関連付けを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.ArgumentToParameter(System.Int32)">
            <summary>指定された実引数のインデックスに対する仮引数のインデックスを取得します。</summary>
            <param name="argumentIndex">実引数の引数リスト内の場所を示すインデックスを指定します。</param>
            <returns>仮引数の引数リスト内の場所を示すインデックス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.Equals(Microsoft.Scripting.Actions.Calls.ArgumentBinding)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> がこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> と等しいかどうかを判断します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/>。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> が指定された <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> と等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.Equals(System.Object)">
            <summary>指定されたオブジェクトがこのオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクト。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>このオブジェクトに対するハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.op_Equality(Microsoft.Scripting.Actions.Calls.ArgumentBinding,Microsoft.Scripting.Actions.Calls.ArgumentBinding)">
            <summary>2 つの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> が等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ArgumentBinding.op_Inequality(Microsoft.Scripting.Actions.Calls.ArgumentBinding,Microsoft.Scripting.Actions.Calls.ArgumentBinding)">
            <summary>2 つの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> が等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgumentBinding"/> が等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ArgumentBinding.PositionalArgCount">
            <summary>位置が決定されている引数の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.BindingResult">
            <summary>メソッドに対するバインディングの結果を示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.Success">
            <summary>バインディングは成功しました。ただ 1 つのメソッドが適用可能であったか最適な変換が存在しました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.AmbiguousMatch">
            <summary>複数のメソッドが指定された引数に対して適用可能であったか、どのメソッドも最適であると判断できませんでした。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.IncorrectArgumentCount">
            <summary>呼び出しに対して要求される引数の数に適合するオーバーロードは存在しません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.CallFailure">
            <summary>
            どのメソッドも正常に呼び出すことができませんでした。以下の原因が考えられます。
            実引数を正常に変換できませんでした。
            名前付き引数を位置決定済み引数に代入できませんでした。
            名前付き引数が複数回代入されました。(引数間で競合が発生しているか、名前付き引数が重複しています。)
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.InvalidArguments">
            <summary>実引数を構築できませんでした。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.BindingResult.NoCallableMethod">
            <summary>どのメソッドも呼び出し可能ではありません。たとえば、すべてのメソッドがバインドされていないジェネリック引数を含んでいます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.BindingTarget">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を使用した 1 つ以上のメソッドへのバインディングの結果をカプセル化します。</summary>
            <remarks>
            ユーザーは最初に <see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Result"/> プロパティからバインディングが成功したか、特定のエラーが発生したかを判断する必要があります。
            バインディングが成功した場合、<see cref="M:Microsoft.Scripting.Actions.Calls.BindingTarget.MakeExpression"/> からメソッドを呼び出す式を作成できます。
            バインディングが失敗した場合、呼び出し元は失敗の理由に基づいたカスタムエラーメッセージを作成できます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Actions.Calls.MethodCandidate,Microsoft.Scripting.Actions.Calls.NarrowingLevel,Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>メソッドバインディングが成功したことを示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を作成します。</summary>
            <param name="name">メソッドの名前を指定します。</param>
            <param name="actualArgumentCount">メソッドに実際に渡された引数の数を指定します。</param>
            <param name="candidate">対象となるメソッドを指定します。</param>
            <param name="level">メソッドの <see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.NarrowingLevel"/> を指定します。</param>
            <param name="restrictedArgs">本来バインディングを実行した <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.#ctor(System.String,System.Int32,System.Int32[])">
            <summary>引数の数が正しくないためにバインディングが失敗したことを示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を作成します。</summary>
            <param name="name">メソッドの名前を指定します。</param>
            <param name="actualArgumentCount">メソッドに実際に渡された引数の数を指定します。</param>
            <param name="expectedArgCount">メソッドが受け入れ可能な引数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Actions.Calls.CallFailure[])">
            <summary>1 つ以上の引数が変換できないためにバインディングが失敗したことを示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を作成します。</summary>
            <param name="name">メソッドの名前を指定します。</param>
            <param name="actualArgumentCount">メソッドに実際に渡された引数の数を指定します。</param>
            <param name="failures">メソッドとそれに関連付けられたエラーを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.#ctor(System.String,System.Int32,Microsoft.Scripting.Actions.Calls.MethodCandidate[])">
            <summary>一致があいまいであるためにバインディングが失敗したことを示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を作成します。</summary>
            <param name="name">メソッドの名前を指定します。</param>
            <param name="actualArgumentCount">メソッドに実際に渡された引数の数を指定します。</param>
            <param name="ambiguousMatches">一致が発生した複数のメソッドを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.#ctor(System.String,Microsoft.Scripting.Actions.Calls.BindingResult)">
            <summary>他の失敗を示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を作成します。</summary>
            <param name="name">メソッドの名前を指定します。</param>
            <param name="result">他の失敗を示す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingResult"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.MakeExpression">
            <summary>バインディングターゲットを呼び出す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <returns>バインディングターゲットを呼び出す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
            <exception cref="T:System.InvalidOperationException">バインディングが失敗しています。または、<see cref="T:System.Dynamic.DynamicMetaObject"/> に対するバインディングが完了していません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.BindingTarget.MakeDelegate">
            <summary>バインディングターゲットを呼び出すデリゲートを作成します。</summary>
            <returns>バインディングターゲットを呼び出すデリゲート。</returns>
            <exception cref="T:System.InvalidOperationException">バインディングが失敗しています。または、<see cref="T:System.Dynamic.DynamicMetaObject"/> に対するバインディングが完了していません。</exception>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Result">
            <summary>バインディングの結果を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Overload">
            <summary>バインディングが成功した場合は、選択されたオーバーロードを取得します。失敗した場合は、<c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Name">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に提供されるメソッドの名前を指定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.MethodCandidate">
            <summary>バインディングが成功した場合は、対象となるメソッドを取得します。失敗した場合は、<c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.AmbiguousMatches">
            <summary><see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Result"/> が <see cref="F:Microsoft.Scripting.Actions.Calls.BindingResult.AmbiguousMatch"/> の場合に、一致が発生した複数のメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.CallFailures">
            <summary><see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Result"/> が <see cref="F:Microsoft.Scripting.Actions.Calls.BindingResult.CallFailure"/> の場合に、メソッドとそれに関連付けられた変換エラーを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.ExpectedArgumentCount">
            <summary><see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Result"/> が <see cref="F:Microsoft.Scripting.Actions.Calls.BindingResult.IncorrectArgumentCount"/> の場合に、メソッドが受け入れ可能な引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.ActualArgumentCount">
            <summary>メソッドに実際に渡された引数の総数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.RestrictedArguments">
            <summary>
            本来バインディングを実行した <see cref="T:System.Dynamic.DynamicMetaObject"/> を制約された状態で返します。
            配列のメンバはそれぞれの引数に対応しています。すべてのメンバには値が存在します。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.ReturnType">
            <summary>バインディングの結果の型を取得します。どのメソッドも適用できない場合は <c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.NarrowingLevel">
            <summary>呼び出しが成功した場合は、メソッドの <see cref="P:Microsoft.Scripting.Actions.Calls.BindingTarget.NarrowingLevel"/> を取得します。失敗した場合は <see cref="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.None"/> が返されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.BindingTarget.Success">
            <summary>バインディングが成功したかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ByRefReturnBuilder">
            <summary>参照渡しされた引数の更新に対する <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder">
            <summary>メソッドビルダーによって使用される、戻り値を表す式を構築する方法を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnBuilder.#ctor(System.Type)">
            <summary>戻り値の型を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="returnType"><see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> がスタックに置く値の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ArgBuilder},Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Linq.Expressions.Expression)">
            <summary>メソッド呼び出しの結果を返す <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="builders">メソッドに渡されたそれぞれの実引数に対する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="ret">メソッド呼び出しの現在の結果を表す <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>メソッド呼び出しの結果を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReturnBuilder.CountOutParams">
            <summary>戻り値を生成するような引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReturnBuilder.ReturnType">
            <summary>このビルダーが表す戻り値の型を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ByRefReturnBuilder.#ctor(System.Collections.Generic.IList{System.Int32})">
            <summary>参照渡しされた引数の位置のリストを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ByRefReturnBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="returnArgs">参照渡しされた引数の位置を示す 0 から始まるインデックスのリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ByRefReturnBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ArgBuilder},Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Linq.Expressions.Expression)">
            <summary>メソッド呼び出しの結果を返す <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="builders">メソッドに渡されたそれぞれの実引数に対する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="ret">メソッド呼び出しの現在の結果を表す <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>メソッド呼び出しの結果を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ByRefReturnBuilder.CountOutParams">
            <summary>戻り値を生成するような引数の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.CallFailure">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> による特定のメソッドに対する呼び出しが実行できない理由を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CallFailure.#ctor(Microsoft.Scripting.Actions.Calls.MethodCandidate,Microsoft.Scripting.Actions.Calls.ConversionResult[])">
            <summary><see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.ConversionFailure"/> である <see cref="T:Microsoft.Scripting.Actions.Calls.CallFailure"/> を作成します。</summary>
            <param name="candidate">呼び出しが失敗したメソッドを指定します。</param>
            <param name="results">それぞれの引数に対して変換が成功したかどうかおよび変換される型を格納する <see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CallFailure.#ctor(Microsoft.Scripting.Actions.Calls.MethodCandidate,System.String[],System.Boolean)">
            <summary><see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.UnassignableKeyword"/> または <see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.DuplicateKeyword"/> である <see cref="T:Microsoft.Scripting.Actions.Calls.CallFailure"/> を作成します。</summary>
            <param name="candidate">呼び出しが失敗したメソッドを指定します。</param>
            <param name="keywordArgs">重複しているか代入不可能とされた名前付き引数を指定します。</param>
            <param name="unassignable"><see cref="P:Microsoft.Scripting.Actions.Calls.CallFailure.Reason"/> プロパティが <see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.UnassignableKeyword"/> であるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CallFailure.#ctor(Microsoft.Scripting.Actions.Calls.MethodCandidate,Microsoft.Scripting.Actions.Calls.CallFailureReason)">
            <summary>その他の失敗を表す <see cref="T:Microsoft.Scripting.Actions.Calls.CallFailure"/> を作成します。</summary>
            <param name="candidate">呼び出しが失敗したメソッドを指定します。</param>
            <param name="reason">失敗の理由を示す <see cref="T:Microsoft.Scripting.Actions.Calls.CallFailureReason"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CallFailure.Candidate">
            <summary>呼び出しが失敗したメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CallFailure.Reason">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.CallFailure"/> の他のどのプロパティを参照すべきかを決定する呼び出しが失敗した理由を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CallFailure.ConversionResults">
            <summary><see cref="P:Microsoft.Scripting.Actions.Calls.CallFailure.Reason"/> プロパティが <see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.ConversionFailure"/> の場合、それぞれの引数に対して、変換が成功したかどうかおよび変換される型を格納する <see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CallFailure.KeywordArguments">
            <summary><see cref="P:Microsoft.Scripting.Actions.Calls.CallFailure.Reason"/> プロパティが <see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.UnassignableKeyword"/> または <see cref="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.DuplicateKeyword"/> の場合、重複しているか代入不可能とされた名前付き引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.CallFailureReason">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> による呼び出しが実行できない理由を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.None">
            <summary>既定値。エラーはありません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.ConversionFailure">
            <summary>1 つ以上の引数の変換に失敗しました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.UnassignableKeyword">
            <summary>1 つ以上の名前付き引数を正常に位置決定済み引数に代入できませんでした。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.DuplicateKeyword">
            <summary>1 つ以上の名前付き引数が重複しているか、位置決定済み引数と競合しています。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.CallFailureReason.TypeInference">
            <summary>型引数を推論できませんでした。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.CandidateSet">
            <summary>すべて同じ数の論理引数を受け入れる <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> のコレクションを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.#ctor(System.Int32)">
            <summary>受け入れる論理引数の数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> クラスの新しいインスタンスを作成します。</summary>
            <param name="count">受け入れる論理引数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.IsParamsDictionaryOnly">
            <summary>格納されているすべての <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> の引数リストに辞書引数が存在するかどうかを示す値を返します。</summary>
            <returns>すべての <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> の引数リストに辞書引数が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.IndexOf(Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>このコレクション内で指定された <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> が存在する位置を返します。</summary>
            <param name="item">このコレクション内から検索する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定します。</param>
            <returns>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> が存在するインデックス。見つからない場合は -1。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.Insert(System.Int32,Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>このコレクションの指定された位置に新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を追加します。</summary>
            <param name="index"><see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を追加する位置を指定します。</param>
            <param name="item">追加する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.RemoveAt(System.Int32)">
            <summary>このコレクションから指定された位置にある <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を削除します。</summary>
            <param name="index">削除する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> の位置を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.Add(Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>このコレクションに新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を追加します。</summary>
            <param name="item">追加する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.Clear">
            <summary>このコレクション内のすべての <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を削除します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.Contains(Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>このコレクションに指定された <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> が存在するかどうかを返します。</summary>
            <param name="item">存在するかどうかを調べる <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定します。</param>
            <returns>コレクション内に <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.CopyTo(Microsoft.Scripting.Actions.Calls.MethodCandidate[],System.Int32)">
            <summary>このコレクション内の <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定された配列にコピーします。</summary>
            <param name="array"><see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> がコピーされる配列を指定します。</param>
            <param name="arrayIndex"><paramref name="array"/> 内のコピーが開始される 0 から始まるインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.Remove(Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>このコレクション内から指定された <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を削除します。</summary>
            <param name="item">削除する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を指定します。</param>
            <returns>削除が正常に実行された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションの反復処理に使用する列挙子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションの反復処理に使用する列挙子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateSet.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CandidateSet.Arity">
            <summary>受け入れる論理引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CandidateSet.Item(System.Int32)">
            <summary>このコレクション内の指定された位置にある <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を取得または設定します。</summary>
            <param name="index"><see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を取得または設定する位置を指定します。</param>
            <returns>指定された位置にある <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CandidateSet.Count">
            <summary>このコレクションに格納されている <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.CandidateSet.IsReadOnly">
            <summary>このコレクションが読み取り専用かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ConversionResult">
            <summary>引数をある型から別の型に変換する際に発生したエラーに関する情報を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ConversionResult.#ctor(System.Object,System.Type,System.Type,System.Boolean)">
            <summary>引数の値、型、変換先の型、および変換が失敗したかどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="arg">実引数の値を指定します。</param>
            <param name="argType">実引数の型または制限型を指定します。</param>
            <param name="toType">値の変換先の型を指定します。</param>
            <param name="failed">変換が失敗したかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ConversionResult.ReplaceLastFailure(System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ConversionResult},System.Boolean)">
            <summary>リストの最後の <see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> の <see cref="P:Microsoft.Scripting.Actions.Calls.ConversionResult.Failed"/> プロパティに指定された引数を設定します。</summary>
            <param name="failures">最後の <see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> を書き換えるリストを指定します。</param>
            <param name="isFailure">最後の <see cref="T:Microsoft.Scripting.Actions.Calls.ConversionResult"/> の <see cref="P:Microsoft.Scripting.Actions.Calls.ConversionResult.Failed"/> プロパティに設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ConversionResult.GetArgumentTypeName(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>指定されたバインダーを使用して引数の型名を取得します。</summary>
            <param name="binder">型名を取得する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を指定します。</param>
            <returns>現在の引数の型名。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ConversionResult.Arg">
            <summary>利用可能であれば実引数の値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ConversionResult.ArgType">
            <summary>値が既知であれば、実引数の型または制限型を取得します。値が <c>null</c> である場合は、<see cref="T:Microsoft.Scripting.Runtime.DynamicNull"/> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ConversionResult.To">
            <summary>値の変換先の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ConversionResult.Failed">
            <summary>変換が失敗したかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder">
            <summary>メソッド呼び出しに対して引数の既定値を提供する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder.#ctor(System.Reflection.ParameterInfo)">
            <summary>指定された仮引数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">この <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が対応する仮引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.DefaultArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DefaultOverloadResolverFactory">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> の既定の実装を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory">
            <summary><see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を作成する方法を抽象化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory.CreateOverloadResolver(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Runtime.CallTypes)">
            <summary>指定された引数および呼び出しシグネチャを使用して新しい <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を作成します。</summary>
            <param name="args">オーバーロード解決の対象となる引数のリストを指定します。</param>
            <param name="signature">オーバーロードを呼び出すシグネチャを指定します。</param>
            <param name="callType">オーバーロードを呼び出す方法を指定します。</param>
            <returns>指定された引数およびシグネチャに対するオーバーロードを解決する <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolverFactory.#ctor(Microsoft.Scripting.Actions.DefaultBinder)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolverFactory"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">作成される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> に適用される <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolverFactory.CreateOverloadResolver(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Runtime.CallTypes)">
            <summary>指定された引数および呼び出しシグネチャを使用して新しい <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を作成します。</summary>
            <param name="args">オーバーロード解決の対象となる引数のリストを指定します。</param>
            <param name="signature">オーバーロードを呼び出すシグネチャを指定します。</param>
            <param name="callType">オーバーロードを呼び出す方法を指定します。</param>
            <returns>指定された引数およびシグネチャに対するオーバーロードを解決する <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DefaultOverloadResolver">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に対する既定の実装を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.OverloadResolver">
            <summary>
            .NET メソッドに対するバインディングとオーバーロード解決を提供します。
            このクラスを利用することで、メソッドの呼び出しに対する新しい抽象構文木の生成、実行時のリフレクションを通したメソッド呼び出し、未実装ですが抽象呼び出しを実行できます。
            このクラスは既定値を持つ引数、省略可能な引数、参照渡し (in および out)、およびキーワード引数をサポートします。
            </summary>
            <remarks>
            実装の詳細:
            
            このクラスはオーバーロードセットに渡されるそれぞれの有効な引数の数に対する <see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> を構築することにより動作します。
            例えば、オーバーロードセットが次のようなものであるとします:
                foo(object a, object b, object c)
                foo(int a, int b)
            上のセットでは 2 個のターゲットセットが存在します。1 つは 3 個の引数をとり、もう 1 つは 2 個の引数をとります。
            このクラスは引数配列に対して、必要に応じて適切な大きさの <see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> をフォールバックし作成します。
            
            それぞれの <see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> は <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> の集合を保持しています。
            それぞれの <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は受け取ることができる平坦化された引数を知っています。
            例えば、次のような関数があるとします:
                foo(params int[] args)
            このメソッドが大きさが 3 の <see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> 内に存在しているとき、<see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は 3 個の引数をとります。そしてそれはすべて int 型です。
            そして、もし大きさ 4 の <see cref="T:Microsoft.Scripting.Actions.Calls.CandidateSet"/> 内に存在していれば、同様に 4 個の引数をとります。
            事実上 <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は必須の位置決定済み引数として扱われるすべての引数を許容する単純化されたビューです。
            
            それぞれの <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は同様にメソッドターゲットを参照します。
            メソッドターゲットは位置決定済み引数をどのように消費するか、そしてどのように対象メソッドの適切な引数に渡すかを知っている
            <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> と <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> の集合で構成されています。
            これはキーワード引数の適切な位置の決定や、省略可能な引数の既定値の提供などを含んでいます。
            
            バインディングの完了後は <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は破棄され、<see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> が返されます。
            <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> はバインディングが成功したかを示し、そうでなければ、ユーザーに報告されるべき失敗したバインディングに関するあらゆる追加情報を提供します。
            これはさらにユーザーに呼び出しに必須な引数の平坦化されたリストを取得することを可能にするメソッドターゲットも公開します。
            <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は公開されず、またそれはメソッドバインダーに関する内部実装の詳細となります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.#ctor(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetTemporary(System.Type,System.String)">
            <summary>指定された型および名前を使用して、この <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に関連付けられた一時変数を作成します。</summary>
            <param name="type">一時変数の型を指定します。</param>
            <param name="name">一時変数の名前を指定します。<c>null</c> を指定できます。</param>
            <returns>一時変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.ResolveOverload(System.String,System.Collections.Generic.IEnumerable{System.Reflection.MethodBase},Microsoft.Scripting.Actions.Calls.NarrowingLevel,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>
            メソッドオーバーロードを解決します。
            バインディングに成功した場合、<see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> は特定のオーバーロードの選択を保証する追加の制約が付加された引数に対する <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納されています。
            </summary>
            <param name="methodName">解決するオーバーロードがもっている名前を指定します。</param>
            <param name="methods">解決するオーバーロードを表す <see cref="T:System.Reflection.MethodBase"/> のリストを指定します。</param>
            <param name="minLevel">オーバーロードの解決に使用する最小の縮小変換レベルを指定します。</param>
            <param name="maxLevel">オーバーロードの解決に使用する最大の縮小変換レベルを指定します。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.ResolveOverload(System.String,System.Collections.Generic.IEnumerable{Microsoft.Scripting.Actions.Calls.OverloadInfo},Microsoft.Scripting.Actions.Calls.NarrowingLevel,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>
            メソッドオーバーロードを解決します。
            バインディングに成功した場合、<see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> は特定のオーバーロードの選択を保証する追加の制約が付加された引数に対する <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納されています。
            </summary>
            <param name="methodName">解決するオーバーロードがもっている名前を指定します。</param>
            <param name="methods">解決するオーバーロードを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> のリストを指定します。</param>
            <param name="minLevel">オーバーロードの解決に使用する最小の縮小変換レベルを指定します。</param>
            <param name="maxLevel">オーバーロードの解決に使用する最大の縮小変換レベルを指定します。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.AllowMemberInitialization(Microsoft.Scripting.Actions.Calls.OverloadInfo)">
            <summary>言語が名前付き引数をインスタンスフィールドまたはプロパティに関連付けセッターにできるかどうかを判断します。既定ではこれはコンストラクタにのみ許容されます。</summary>
            <param name="method">判断の対象となるメソッドの情報を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を指定します。</param>
            <returns>指定されたメソッドに対する名前付き引数をインスタンスフィールドまたはプロパティに関連付けられる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetByRefArrayExpression(System.Linq.Expressions.Expression)">
            <summary>GetByRefArray 操作の結果を評価する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <param name="argumentArrayExpression">操作の結果を表す <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>GetByRefArray 操作の結果を評価する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.BindToUnexpandedParams(Microsoft.Scripting.Actions.Calls.MethodCandidate)">
            <summary>配列またはディクショナリのインスタンスまたは <c>null</c> 参照を配列引数または辞書引数に関連付けられるかどうかを判断します。</summary>
            <param name="candidate">関連付けの対象となるメソッドを指定します。</param>
            <returns>配列またはディクショナリのインスタンスまたは <c>null</c> 参照を配列引数または辞書引数に関連づけられる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.MapSpecialParameters(Microsoft.Scripting.Actions.Calls.ParameterMapping)">
            <summary>引数のバインディングの前に呼び出されます。</summary>
            <param name="mapping">マッピングの対象となる <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> オブジェクト。</param>
            <returns>
            仮引数がこのメソッドによってマッピングされたかどうかを示すビットマスク。
            既定のビットマスクは残りの仮引数に対して構築されます。(ビットはクリアされています。)
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetNamedArguments(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}@,System.Collections.Generic.IList{System.String}@)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に渡される名前付き引数を取得します。</summary>
            <param name="namedArgs">名前付き引数の値を格納するリスト。</param>
            <param name="argNames">名前付き引数の名前を格納するリスト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.CreateActualArguments(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>指定された名前付き引数と展開された引数に関する情報から <see cref="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.ActualArguments"/> を作成します。</summary>
            <param name="namedArgs">名前付き引数の値を格納するリストを指定します。</param>
            <param name="argNames">名前付き引数の名前を格納するリストを指定します。</param>
            <param name="preSplatLimit">実際の引数内で展開記号に先行して存在しなければならない引数の最小数を指定します。</param>
            <param name="postSplatLimit">実際の引数内で展開記号に後続して存在しなければならない引数の最小数を指定します。</param>
            <returns>作成された <see cref="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.ActualArguments"/>。引数が構築されないかオーバーロード解決がエラーを生成した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.IsOverloadedOnParameter(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Microsoft.Scripting.Actions.Calls.ApplicableCandidate})">
            <summary>指定されたオーバーロードが指定されたインデックスの引数でオーバーロードされているか (指定されたインデックスの引数の型が同じか) を判断します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.CompareEquivalentCandidates(Microsoft.Scripting.Actions.Calls.ApplicableCandidate,Microsoft.Scripting.Actions.Calls.ApplicableCandidate)">
            <summary>仮引数が等価である 2 つの候補を比較します。</summary>
            <param name="one">比較する 1 番目の適用可能な候補を指定します。</param>
            <param name="two">比較する 2 番目の適用可能な候補を指定します。</param>
            <returns>どちらの候補が選択されたか、あるいは完全に等価かを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.ParametersEquivalent(Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.ParameterWrapper)">
            <summary>指定された 2 つの仮引数が等価かどうかを判断します。</summary>
            <param name="parameter1">比較する 1 番目の仮引数を指定します。</param>
            <param name="parameter2">比較する 2 番目の仮引数を指定します。</param>
            <returns>2 つの仮引数が等価であれば <c>true</c>。そうでなければ <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.CanConvertFrom(Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.ParameterWrapper)">
            <summary><see cref="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.None"/> の場合に、<paramref name="parameter1"/> から <paramref name="parameter2"/> の間で型を変換できるかどうかを判断します。</summary>
            <param name="parameter1">変換元となる仮引数を指定します。</param>
            <param name="parameter2">変換先となる仮引数を指定します。</param>
            <returns><paramref name="parameter1"/> から <paramref name="parameter2"/> の間で型を変換できる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.CanConvertFrom(System.Type,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>指定された縮小変換レベルで、指定された型を持つ実引数を指定された仮引数の型に変換できるかどうかを判断します。</summary>
            <param name="fromType">変換元の実引数の型を指定します。</param>
            <param name="fromArgument">変換元の実引数の値を指定します。</param>
            <param name="toParameter">変換先の仮引数を指定します。</param>
            <param name="level">変換を実行する縮小レベルを指定します。</param>
            <returns>指定された縮小変換レベルで、指定された型を持つ実引数を指定された仮引数の型に変換できる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.SelectBestConversionFor(System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>指定された縮小変換レベルで、指定された実引数から 2 つの指定された仮引数の間でどちらに適切に変換できるかどうかを判断します。</summary>
            <param name="arg">実引数の値を指定します。</param>
            <param name="candidateOne">1 番目の仮引数を指定します。</param>
            <param name="candidateTwo">2 番目の仮引数を指定します。</param>
            <param name="level">変換を実行する縮小変換レベルを指定します。</param>
            <returns>指定された縮小変換レベルでどちらの候補に適切に変換できるかどうかを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.PreferConvert(System.Type,System.Type)">
            <summary>2 つの仮引数の型の間に変換が存在しない場合に、2 つの仮引数の型の間の順序を決定します。</summary>
            <param name="t1">1 番目の仮引数の型を指定します。</param>
            <param name="t2">2 番目の仮引数の型を指定します。</param>
            <returns>指定された 2 つの仮引数の型の間でどちらに変換するかを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.Convert(System.Dynamic.DynamicMetaObject,System.Type,System.Reflection.ParameterInfo,System.Type)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定された型に変換する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="metaObject">変換する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="restrictedType">変換する <see cref="T:System.Dynamic.DynamicMetaObject"/> の制限型を指定します。</param>
            <param name="info">変換する仮引数についての情報を格納する <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <returns>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定された型に変換する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetConvertor(System.Int32,System.Dynamic.DynamicMetaObject,System.Reflection.ParameterInfo,System.Type)">
            <summary>引数リストの指定されたインデックスに存在する引数を指定された型に変換するデリゲートを取得します。</summary>
            <param name="index">変換する引数を示す引数リスト内のインデックスを指定します。</param>
            <param name="metaObject">変換する引数の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="info">変換する仮引数に関する情報を格納する <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <returns>引数リストの指定されたインデックスに存在する引数を指定された型に変換するデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetDynamicConversion(System.Linq.Expressions.Expression,System.Type)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> を指定された型に変換する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <param name="value">型を変換する <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="type">変換先の型を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.Expression"/> を指定された型に変換する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.MakeInvalidParametersError(Microsoft.Scripting.Actions.Calls.BindingTarget)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> から正しくない引数に関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。</summary>
            <param name="target">失敗したバインディングを表す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を指定します。</param>
            <returns>正しくない引数に関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetSplattedItemExpression(System.Linq.Expressions.Expression)">
            <summary>指定されたインデックスにある遅延展開された引数の値を示す <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <param name="indexExpression">取得する遅延展開された引数の位置を示すインデックスを表す <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>指定されたインデックスにある遅延展開された引数の値を示す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetSplattedExpression">
            <summary>遅延展開された引数を示す <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <returns>遅延展開された引数を示す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetSplattedItem(System.Int32)">
            <summary>指定されたインデックスにある遅延展開された引数の値を取得します。</summary>
            <param name="index">取得する遅延展開された引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスにある遅延展開された引数の値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetCollapsedArgsCondition">
            <summary>折りたたまれた引数に関する条件を取得します。</summary>
            <returns>折りたたまれた引数に関する条件を示す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.GetGenericInferenceType(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> に対するジェネリック型引数を推論します。</summary>
            <param name="dynamicObject">ジェネリック型引数を推論する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>推論されたジェネリック型引数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadResolver.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.Binder">
            <summary>バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.Temps">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> が保持する一時変数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.ActualArguments">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に渡される実引数のセットを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadResolver.MaxAccessedCollapsedArg">
            <summary>折りたたまれた引数の中でアクセスされたインデックスが最大の引数を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.#ctor(Microsoft.Scripting.Actions.ActionBinder,System.Dynamic.DynamicMetaObject,System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},Microsoft.Scripting.Actions.CallSignature)">
            <summary>インスタンスメソッド呼び出しに対する <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を指定します。</param>
            <param name="instance">メソッド呼び出しのインスタンスを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="args">メソッド呼び出しの実引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> のリストを指定します。</param>
            <param name="signature">オーバーロードのシグネチャを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.#ctor(Microsoft.Scripting.Actions.ActionBinder,System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},Microsoft.Scripting.Actions.CallSignature)">
            <summary>静的メソッド呼び出しに対する <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を指定します。</param>
            <param name="args">メソッド呼び出しの実引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> のリストを指定します。</param>
            <param name="signature">オーバーロードのシグネチャを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.#ctor(Microsoft.Scripting.Actions.ActionBinder,System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Runtime.CallTypes)">
            <summary>一般のメソッド呼び出しに対する <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">バインディングを実行する <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> を指定します。</param>
            <param name="args">メソッド呼び出しの実引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> のリストを指定します。</param>
            <param name="signature">オーバーロードのシグネチャを指定します。</param>
            <param name="callType">オーバーロードを呼び出す方法を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.MapSpecialParameters(Microsoft.Scripting.Actions.Calls.ParameterMapping)">
            <summary>引数のバインディングの前に呼び出されます。</summary>
            <param name="mapping">マッピングの対象となる <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> オブジェクト。</param>
            <returns>
            仮引数がこのメソッドによってマッピングされたかどうかを示すビットマスク。
            既定のビットマスクは残りの仮引数に対して構築されます。(ビットはクリアされています。)
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.CompareEquivalentCandidates(Microsoft.Scripting.Actions.Calls.ApplicableCandidate,Microsoft.Scripting.Actions.Calls.ApplicableCandidate)">
            <summary>仮引数が等価である 2 つの候補を比較します。</summary>
            <param name="one">比較する 1 番目の適用可能な候補を指定します。</param>
            <param name="two">比較する 2 番目の適用可能な候補を指定します。</param>
            <returns>どちらの候補が選択されたか、あるいは完全に等価かを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.GetArgument(System.Int32)">
            <summary>指定されたインデックスにある実引数の値を取得します。インスタンスメソッド呼び出しに対する暗黙の引数が考慮されます。</summary>
            <param name="index">取得する実引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスにある実引数の値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.GetNamedArguments(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject}@,System.Collections.Generic.IList{System.String}@)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に渡される名前付き引数を取得します。</summary>
            <param name="namedArgs">名前付き引数の値を格納するリスト。</param>
            <param name="argNames">名前付き引数の名前を格納するリスト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.CreateActualArguments(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},System.Collections.Generic.IList{System.String},System.Int32,System.Int32)">
            <summary>指定された名前付き引数と展開された引数に関する情報から <see cref="T:Microsoft.Scripting.Actions.Calls.ActualArguments"/> を作成します。</summary>
            <param name="namedArgs">名前付き引数の値を格納するリストを指定します。</param>
            <param name="argNames">名前付き引数の名前を格納するリストを指定します。</param>
            <param name="preSplatLimit">実際の引数内で展開記号に先行して存在しなければならない引数の最小数を指定します。</param>
            <param name="postSplatLimit">実際の引数内で展開記号に後続して存在しなければならない引数の最小数を指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Actions.Calls.ActualArguments"/>。引数が構築されないかオーバーロード解決がエラーを生成した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.GetSplattedExpression">
            <summary>遅延展開された引数を示す <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <returns>遅延展開された引数を示す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.GetSplattedItem(System.Int32)">
            <summary>指定されたインデックスにある遅延展開された引数の値を取得します。</summary>
            <param name="index">取得する遅延展開された引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスにある遅延展開された引数の値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultOverloadResolver.MakeInvalidParametersError(Microsoft.Scripting.Actions.Calls.BindingTarget)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> から正しくない引数に関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。</summary>
            <param name="target">失敗したバインディングを表す <see cref="T:Microsoft.Scripting.Actions.Calls.BindingTarget"/> を指定します。</param>
            <returns>正しくない引数に関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.DefaultOverloadResolver.Factory">
            <summary><see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を作成する方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.DefaultOverloadResolver.Signature">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> の対象となるオーバーロードのシグネチャを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.DefaultOverloadResolver.Arguments">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> が呼び出すオーバーロードに渡す実引数のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.DefaultOverloadResolver.CallType">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> がオーバーロードを呼び出す方法を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.InstanceBuilder">
            <summary>メソッドを呼び出すことのできるインタスタンスを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.InstanceBuilder.#ctor(System.Int32)">
            <summary>インスタンスを表す実引数のインデックスを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.InstanceBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">インスタンスを表す引数リスト内の実引数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.InstanceBuilder.ToExpression(System.Reflection.MethodInfo@,Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>インスタンスの値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="method">呼び出すメソッドを示す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>インスタンスの値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.InstanceBuilder.ToDelegate(System.Reflection.MethodInfo@,Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>インスタンスの値を提供するデリゲートを返します。</summary>
            <param name="method">呼び出すメソッドを示す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>インスタンスの値を提供するデリゲート。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.InstanceBuilder.HasValue">
            <summary>このインスタンスが <c>null</c> であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.InstanceBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder">
            <summary>キーワード引数に対する値を提供する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> です。
            
            <see cref="T:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder"/> はエミット時における位置をユーザーから渡されたキーワード引数内における初期オフセット、キーワード引数の数、引数の総数から計算します。
            その後、単一の正確な引数のみを受け入れる基になる <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> に処理を委譲します。
            エミット時まで位置の計算を遅延させることで、ユーザーから渡された正確な引数の数を知らなくてもメソッドバインディングを完了できるようになります。
            したがって、メソッドバインダはメソッドオーバーロードセットとキーワード名にのみ依存することになり、ユーザー引数への依存はなくなります。
            ユーザー引数の数は事前に決定できますが、現在のメソッドバインダはこの形式をとっていません。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.#ctor(Microsoft.Scripting.Actions.Calls.ArgBuilder,System.Int32,System.Int32)">
            <summary>基になる <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>、キーワード引数の数およびキーワード引数内の位置を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="builder">基になる <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> を指定します。</param>
            <param name="kwArgCount">キーワード引数の数を指定します。</param>
            <param name="kwArgIndex">キーワード引数内の現在の引数の位置を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.BuilderExpectsSingleParameter(Microsoft.Scripting.Actions.Calls.ArgBuilder)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が単一の引数のみをことを保証します。</summary>
            <param name="builder">判断する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.ToReturnExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver)">
            <summary>引数が返戻値を生成する (ref あるいは out のような) 場合、呼び出し元に追加で返される値を提供します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <returns>呼び出し基で追加で返される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.UpdateFromReturn(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>メソッド呼び出しの後に提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <returns>提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/>。更新が不要な場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.Type">
            <summary>引数に対して要求される型を取得します。<see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が引数を消費しない場合は <c>null</c> が返されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.KeywordArgBuilder.ByRefArgument">
            <summary>参照私の引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.KeywordConstructorReturnBuilder">
            <summary>返戻値のフィールドまたはプロパティを使用されないキーワード引数を使用して更新します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordConstructorReturnBuilder.#ctor(Microsoft.Scripting.Actions.Calls.ReturnBuilder,System.Int32,System.Int32[],System.Reflection.MemberInfo[],System.Boolean)">
            <summary>基になる <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/>、キーワード引数の数、位置、設定するメンバ、CLR 可視性チェックを行うかどうかを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.KeywordConstructorReturnBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="builder">基になる <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> を指定します。</param>
            <param name="kwArgCount">キーワード引数の数を指定します。</param>
            <param name="indexesUsed">使用するキーワード引数の位置を示す 0 から始まるインデックスの配列を指定します。</param>
            <param name="membersSet">設定するメンバを表す <see cref="T:System.Reflection.MemberInfo"/> を指定します。</param>
            <param name="privateBinding">CLR 可視性チェックを無視するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.KeywordConstructorReturnBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ArgBuilder},Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Linq.Expressions.Expression)">
            <summary>メソッド呼び出しの結果を返す <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="builders">メソッドに渡されたそれぞれの実引数に対する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="ret">メソッド呼び出しの現在の結果を表す <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>メソッド呼び出しの結果を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.MethodCandidate">
            <summary>
            メソッドまたはメソッドオーバーロードを呼び出すありうるさまざまな方法を表します。
            それぞれの <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> は <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> を使用して候補に対する引数の型を表します。
            </summary>
            <remarks>
            単一のメソッドでも複数の <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を生成する場合があります。次に理由を挙げます。
            - それぞれの省略可能な引数または既定値のある引数が候補になります。
            - ref または out 引数の存在は言語に対して返戻値として更新された値を返す候補を追加します。
            - <see cref="F:Microsoft.Scripting.Actions.ArgumentType.List"/> または <see cref="F:Microsoft.Scripting.Actions.ArgumentType.Dictionary"/> はリストが毎回異なる場合、新しい候補になります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.#ctor(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.OverloadInfo,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ParameterWrapper},Microsoft.Scripting.Actions.Calls.ParameterWrapper,Microsoft.Scripting.Actions.Calls.ReturnBuilder,Microsoft.Scripting.Actions.Calls.InstanceBuilder,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ArgBuilder},System.Collections.Generic.Dictionary{System.Dynamic.DynamicMetaObject,System.Dynamic.BindingRestrictions})">
            <summary>指定された引数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="resolver">メソッド呼び出しの生成時にオーバーロードの解決に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="method">メソッドを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を指定します。</param>
            <param name="parameters">メソッドの仮引数のリストを指定します。</param>
            <param name="paramsDict">メソッドの辞書引数を指定します。</param>
            <param name="returnBuilder">返戻値の生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> を指定します。</param>
            <param name="instanceBuilder">メソッド呼び出しの対象のインスタンスの生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.InstanceBuilder"/> を指定します。</param>
            <param name="argBuilders">引数の生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを指定します。</param>
            <param name="restrictions">オーバーロード解決時に使用する特定の <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する追加のバインディング制約を保持するディクショナリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.ReplaceMethod(Microsoft.Scripting.Actions.Calls.OverloadInfo,System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ParameterWrapper},System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ArgBuilder},System.Collections.Generic.Dictionary{System.Dynamic.DynamicMetaObject,System.Dynamic.BindingRestrictions})">
            <summary>このメソッド候補が対象とするメソッドを指定されたメソッドに置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を作成します。</summary>
            <param name="newMethod">新しいメソッドを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を指定します。</param>
            <param name="parameters">新しいメソッドに対する仮引数のリストを指定します。</param>
            <param name="argBuilders">メソッド呼び出しの生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを指定します。</param>
            <param name="restrictions">オーバーロード解決時に使用する特定の <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する追加のバインディング制約を保持するディクショナリを指定します。</param>
            <returns>このメソッド候補の対象メソッドを指定されたメソッドに置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.IndexOfParameter(System.String)">
            <summary>指定された名前の引数に対する引数リスト内での位置を示すインデックスを返します。</summary>
            <param name="name">引数の名前を指定します。</param>
            <returns>引数リスト内での引数の位置を示すインデックス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.MakeParamsExtended(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定された数の引数とキーワード引数をとる新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を作成します。
            基本的な考えはどの引数が通常の引数または辞書引数に割り当てられるかを計算し、それらの場所を余分な <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> で埋めることです。
            </summary>
            <param name="count">引数の数を指定します。</param>
            <param name="names">キーワード引数の名前を指定します。</param>
            <returns>指定された数の引数とキーワード引数をとる新しい <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.GetParameterTypes">
            <summary>引数の型を配列として取得します。</summary>
            <returns>それぞれの要素に引数の型が格納された <see cref="T:System.Type"/> 型の配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.MakeDelegate(Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>制限された引数を使用してメソッド呼び出しを表すデリゲートを作成します。</summary>
            <param name="restrictedArgs">制限された引数を指定します。</param>
            <returns>メソッド呼び出しを表すデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.MakeExpression(Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>制限された引数を使用してメソッド呼び出しを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="restrictedArgs">制限された引数を指定します。</param>
            <returns>メソッド呼び出しを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.MethodCandidate.ToString">
            <summary>このインスタンスの文字列表現を返します。</summary>
            <returns>インスタンスの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.ReturnBuilder">
            <summary>返戻値の生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.ReturnBuilder"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.ArgBuilders">
            <summary>メソッド呼び出しの引数の生成に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.Resolver">
            <summary>メソッド呼び出しの生成時にオーバーロードの解決に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.Overload">
            <summary>対象となるオーバーロードを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.Restrictions">
            <summary>オーバーロード解決時に使用する特定の <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する追加のバインディング制約を保持するディクショナリを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.ReturnType">
            <summary>このメソッド候補の返戻値の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.ParamsArrayIndex">
            <summary>このメソッド候補の引数リスト内での配列引数の位置を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.HasParamsArray">
            <summary>このメソッド候補の引数リスト内に配列引数が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.HasParamsDictionary">
            <summary>このメソッド候補の引数リスト内に辞書引数が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.VisibleParameterCount">
            <summary>可視である引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.MethodCandidate.Parameters">
            <summary>引数の読み取り専用のリストを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.NarrowingLevel">
            <summary>オーバーロードの解決などに使用される縮小変換のレベルを表します。変換のレベルはそれぞれの言語が定義します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.None">
            <summary>このレベルの変換はどのような縮小も行いません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.One">
            <summary>言語は第 1 レベルの縮小変換を行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.Two">
            <summary>言語は第 2 レベルとして <see cref="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.One"/> 以上の縮小変換を行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.Three">
            <summary>言語は第 3 レベルとして <see cref="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.Two"/> 以上の縮小変換を行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.NarrowingLevel.All">
            <summary>多少意味のある変換である可能性はありますが、情報が損失する可能性があります。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.OutArgBuilder">
            <summary>StrongBox として渡されなかった場合、out 引数に対する実引数を生成します。out 引数は追加の返戻値として返されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OutArgBuilder.#ctor(System.Reflection.ParameterInfo)">
            <summary>指定された仮引数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.OutArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">この <see cref="T:Microsoft.Scripting.Actions.Calls.OutArgBuilder"/> が対応する仮引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OutArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OutArgBuilder.ToReturnExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver)">
            <summary>引数が返戻値を生成する (ref あるいは out のような) 場合、呼び出し元に追加で返される値を提供します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <returns>呼び出し基で追加で返される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OutArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OutArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OutArgBuilder.ByRefArgument">
            <summary>参照私の引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.OverloadInfo">
            <summary>
            オーバーロード解決のためのメソッドオーバーロードの要約を定義します。
            このクラスは <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> に解決の実行に必要となるメタデータを提供します。
            </summary>
            <remarks>警告: このクラスは一時的な API であり、将来のバージョンで破壊的変更を受ける可能性があります。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadInfo.ProhibitsNull(System.Int32)">
            <summary>このメソッドオーバーロードの指定されたインデックスにある仮引数が <c>null</c> を許容しないかどうかを示す値を返します。</summary>
            <param name="parameterIndex"><c>null</c> 非許容かどうかを判断する仮引数のインデックスを指定します。</param>
            <returns>指定された仮引数が <c>null</c> 非許容であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadInfo.ProhibitsNullItems(System.Int32)">
            <summary>このメソッドオーバーロードの指定されたインデックスにある仮引数が <c>null</c> である要素を許容しないかどうかを示す値を返します。</summary>
            <param name="parameterIndex"><c>null</c> 要素非許容かどうかを判断する仮引数のインデックスを指定します。</param>
            <returns>指定された仮引数が <c>null</c> 要素を許容しなければ <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsParamArray(System.Int32)">
            <summary>このメソッドオーバーロードの指定されたインデックスにある仮引数が配列引数であるかどうかを示す値を返します。</summary>
            <param name="parameterIndex">配列引数かどうかを判断する仮引数のインデックスを指定します。</param>
            <returns>指定された仮引数が配列引数であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsParamDictionary(System.Int32)">
            <summary>このメソッドオーバーロードの指定されたインデックスにある仮引数が辞書引数であるかどうかを示す値を返します。</summary>
            <param name="parameterIndex">辞書引数かどうかを判断する仮引数のインデックスを指定します。</param>
            <returns>指定された仮引数が辞書引数であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.OverloadInfo.MakeGenericMethod(System.Type[])">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードのジェネリック型引数に指定された型を割り当てて、ジェネリックメソッドを作成します。</summary>
            <param name="genericArguments">ジェネリックメソッドの型引数に割り当てる型を指定します。</param>
            <returns>指定された型が割り当てられたジェネリックメソッドを示す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.Name">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.Parameters">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードの仮引数のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.ParameterCount">
            <summary>このメソッドオーバーロードの仮引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.ReturnParameter">
            <summary>派生クラスでオーバーライドされた場合は、戻り値に対する <see cref="T:System.Reflection.ParameterInfo"/> を取得します。コンストラクタの場合は <c>null</c> となります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.DeclaringType">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードが宣言されている型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.ReturnType">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードの戻り値の型を取得します。コンストラクタの場合は <c>null</c> になります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.Attributes">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードの属性を示すフラグを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsConstructor">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードがコンストラクタであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsExtension">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードが拡張メソッドであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsVariadic">
            <summary>
            派生クラスでオーバーライドされた場合は、このメソッドオーバーロードの引数の数が可変であるかどうかを示す値を取得します。
            配列引数や辞書引数の場合は、引数の数は変化します。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsGenericMethodDefinition">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードがジェネリックメソッドの定義かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsGenericMethod">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードがジェネリックメソッドかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.ContainsGenericParameters">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードが割り当てられていないジェネリック型引数を含んでいるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.GenericArguments">
            <summary>派生クラスでオーバーライドされた場合は、このメソッドオーバーロードのジェネリック型引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.CallingConvention">
            <summary>このメソッドオーバーロードに対して有効な呼び出し規約を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.ReflectionInfo">
            <summary>このメソッドオーバーロードに対する <see cref="T:System.Reflection.MethodBase"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsInstanceFactory">
            <summary>このメソッドオーバーロードがインスタンスを作成できるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsPrivate">
            <summary>このメソッドオーバーロードが定義されている型からしかアクセスできないかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsPublic">
            <summary>このメソッドオーバーロードがすべてのオブジェクトからアクセス可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsAssembly">
            <summary>このメソッドオーバーロードが定義されているアセンブリ内からしかアクセスできないかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsFamily">
            <summary>このメソッドオーバーロードが定義されているクラスとすべての派生クラスからアクセス可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsFamilyOrAssembly">
            <summary>このメソッドオーバーロードが定義されているアセンブリ内と任意の派生クラスからアクセス可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsFamilyAndAssembly">
            <summary>このメソッドオーバーロードが定義されているクラスとアセンブリ内にある派生クラスからしかアクセスできないかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsProtected">
            <summary>このメソッドオーバーロードが派生クラスからアクセス可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsStatic">
            <summary>このメソッドオーバーロードを静的に呼び出すことが可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsVirtual">
            <summary>このメソッドオーバーロードが仮想メソッドであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsSpecialName">
            <summary>このメソッドオーバーロードが特別であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.OverloadInfo.IsFinal">
            <summary>このメソッドオーバーロードをオーバーライドできないかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo">
            <summary><see cref="T:System.Reflection.MethodBase"/> に関連付けられたメソッドオーバーロードを表します。</summary>
            <remarks>
            このクラスはスレッドセーフではありません。
            警告: このクラスは一時的な API であり、将来のバージョンで破壊的変更を受ける可能性があります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.#ctor(System.Reflection.MethodBase)">
            <summary>指定されたメソッドまたはコンストラクタを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">基になるメソッドまたはコンストラクタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.MakeGenericMethod(System.Type[])">
            <summary>このメソッドオーバーロードのジェネリック型引数に指定された型を割り当てて、ジェネリックメソッドを作成します。</summary>
            <param name="genericArguments">ジェネリックメソッドの型引数に割り当てる型を指定します。</param>
            <returns>指定された型が割り当てられたジェネリックメソッドを示す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.CreateArray(System.Reflection.MemberInfo[])">
            <summary>指定されたメソッドの配列から対応する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を作成します。</summary>
            <param name="methods"><see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> の基になるメソッドの配列を指定します。</param>
            <returns>指定されたメソッドに対応する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> の配列。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.ReflectionInfo">
            <summary>このメソッドオーバーロードに対する <see cref="T:System.Reflection.MethodBase"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.Name">
            <summary>このメソッドオーバーロードの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.Parameters">
            <summary>このメソッドオーバーロードの仮引数のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.ReturnParameter">
            <summary>戻り値に対する <see cref="T:System.Reflection.ParameterInfo"/> を取得します。コンストラクタの場合は <c>null</c> となります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.GenericArguments">
            <summary>このメソッドオーバーロードのジェネリック型引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.DeclaringType">
            <summary>このメソッドオーバーロードが宣言されている型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.ReturnType">
            <summary>このメソッドオーバーロードの戻り値の型を取得します。コンストラクタの場合は <c>null</c> になります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.CallingConvention">
            <summary>このメソッドオーバーロードに対して有効な呼び出し規約を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.Attributes">
            <summary>このメソッドオーバーロードの属性を示すフラグを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsInstanceFactory">
            <summary>このメソッドオーバーロードがインスタンスを作成できるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsConstructor">
            <summary>このメソッドオーバーロードがコンストラクタであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsExtension">
            <summary>このメソッドオーバーロードが拡張メソッドであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsVariadic">
            <summary>このメソッドオーバーロードの引数の数が可変であるかどうかを示す値を取得します。配列引数や辞書引数の場合は、引数の数は変化します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsGenericMethod">
            <summary>このメソッドオーバーロードがジェネリックメソッドかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.IsGenericMethodDefinition">
            <summary>このメソッドオーバーロードがジェネリックメソッドの定義かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReflectionOverloadInfo.ContainsGenericParameters">
            <summary>このメソッドオーバーロードが割り当てられていないジェネリック型引数を含んでいるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ParameterMapping">
            <summary>メソッドに渡される仮引数と実引数の関連付けを行う方法を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.#ctor(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.OverloadInfo,System.Collections.Generic.IList{System.String})">
            <summary>オーバーロードを解決する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/>、対象のオーバーロード、名前付き引数の名前を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="resolver">オーバーロードの解決に使用する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="method">対象となるオーバーロードを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を指定します。</param>
            <param name="argNames">名前付き引数の名前のリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.MapParameters(System.Boolean)">
            <summary>参照渡し引数を縮退するかどうかを指定して、オーバーロードの特定の仮引数を実引数にマッピングします。</summary>
            <param name="reduceByRef">参照渡し引数を縮退するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.AddInstanceBuilder(Microsoft.Scripting.Actions.Calls.InstanceBuilder)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.InstanceBuilder"/> を使用して、次の実引数を消費します。</summary>
            <param name="builder">実引数を消費してインスタンスを提供する <see cref="T:Microsoft.Scripting.Actions.Calls.InstanceBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.AddBuilder(Microsoft.Scripting.Actions.Calls.ArgBuilder)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> を使用して、次の実引数を消費します。</summary>
            <param name="builder">実引数を消費して実引数の値を提供する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.AddParameter(Microsoft.Scripting.Actions.Calls.ParameterWrapper)">
            <summary>このマッピングに新しい仮引数を追加します。</summary>
            <param name="parameter">追加する仮引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.MapParameter(System.Reflection.ParameterInfo)">
            <summary>指定された仮引数に関する情報と一致する仮引数を実引数にマッピングします。</summary>
            <param name="pi">仮引数を探索するための情報を格納している <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.MapParameterReduceByRef(System.Reflection.ParameterInfo)">
            <summary>out 引数を戻り値に、ref 引数を <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> を受け付けない引数にマッピングします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.CreateCandidate">
            <summary>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> の状態に対応する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を作成します。</summary>
            <returns>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> の状態に対応する <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.CreateByRefReducedCandidate">
            <summary>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> の状態に対応し、参照渡しを縮退した <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を作成します。</summary>
            <returns>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> の状態に対応し、参照渡しを縮退した <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterMapping.CreateDefaultCandidates">
            <summary>あらゆるすべての数の既定値を使用した <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/> を返します。</summary>
            <returns>あらゆるすべての数の既定値を使用した <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterMapping.Overload">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterMapping"/> が作成されたオーバーロードを表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterMapping.ArgIndex">
            <summary>消費する次の実引数の位置を示す 0 から始まるインデックスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags">
            <summary>仮引数のバインディングに関する情報を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.None">
            <summary>追加情報はありません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.ProhibitNull">
            <summary>仮引数は <c>null</c> を拒否します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.ProhibitNullItems">
            <summary>仮引数は <c>null</c> 要素を拒否します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.IsParamArray">
            <summary>仮引数は配列引数です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.IsParamDictionary">
            <summary>仮引数は辞書引数です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.ParameterBindingFlags.IsHidden">
            <summary>仮引数は隠し引数です。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper">
            <summary>
            仮引数の論理ビューを表します。
            例えば、参照渡し縮小シグネチャの論理ビューは引数が値渡しされ (さらに、更新値は戻り値に含められ) ることであるため、
            参照渡し引数のあるメソッドの参照渡し縮小シグネチャは基になる要素型の <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> を用いて表されます。
            このクラスはメソッドに実際に渡された物理実引数を表現する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> とは対照的です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterWrapper.#ctor(System.Reflection.ParameterInfo,System.Type,System.String,Microsoft.Scripting.Actions.Calls.ParameterBindingFlags)">
            <summary>仮引数のメタデータ、型、名前、バインディング情報を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">仮引数のメタデータを表す <see cref="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.ParameterInfo"/> を指定します。</param>
            <param name="type">仮引数の型を指定します。</param>
            <param name="name">仮引数の名前を指定します。</param>
            <param name="flags">仮引数のバインディング情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterWrapper.Clone(System.String)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> の名前を指定された名前に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> を作成します。</summary>
            <param name="name">作成される <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> の名前を指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> の名前を指定された名前に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParameterWrapper.Expand">
            <summary>配列引数の展開された要素を表す仮引数を作成します。</summary>
            <returns>配列引数の展開された要素を表す仮引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.Type">
            <summary>この仮引数の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.ParameterInfo">
            <summary>この仮引数のメタデータを表す <see cref="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.ParameterInfo"/> を取得します。これは <c>null</c> である可能性があります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.Name">
            <summary>この仮引数の名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.Flags">
            <summary>この仮引数のバインディング情報を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.ProhibitNull">
            <summary>この仮引数が <c>null</c> を拒否するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.ProhibitNullItems">
            <summary>この仮引数が <c>null</c> 要素を拒否するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.IsHidden">
            <summary>この仮引数が隠し引数かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.IsByRef">
            <summary>この仮引数が参照渡しであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.IsParamArray">
            <summary>この仮引数が配列引数を表しているかどうかを示す値を取得します。(配列引数の展開により作成された仮引数では <c>false</c> を返します。)</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParameterWrapper.IsParamDict">
            <summary>この仮引数が辞書引数を表しているかどうかを示す値を取得します。(辞書引数の展開により作成された仮引数では <c>false</c> を返します。)</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder">
            <summary>配列引数を仮引数に提供する <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.#ctor(System.Reflection.ParameterInfo,System.Type,System.Int32,System.Int32)">
            <summary>仮引数のメタデータ、要素型、展開の開始位置、展開された実引数の数を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">配列引数を表す仮引数のメタデータを指定します。</param>
            <param name="elementType">配列引数の要素型を指定します。</param>
            <param name="start">配列引数の展開の開始位置を指定します。</param>
            <param name="expandedCount">展開された実引数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。展開された実引数の数だけ消費されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder.Type">
            <summary>引数に対して要求される型を取得します。<see cref="T:Microsoft.Scripting.Actions.Calls.ParamsArgBuilder"/> の要素型の配列型になります。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder">
            <summary>辞書引数である実引数を仮引数に提供します。これは関数に提供されるすべての余分な名前/値ペアを関数に渡されるシンボルディクショナリに収集します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.#ctor(System.Reflection.ParameterInfo,System.Int32,System.String[],System.Int32[])">
            <summary>仮引数に関するメタデータ、実引数リスト内での辞書引数の開始位置、名前および対応するインデックスのリストを使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">仮引数に関するメタデータを指定します。</param>
            <param name="argIndex">実引数リスト内での辞書引数の開始位置を示す 0 から始まるインデックスを指定します。</param>
            <param name="names">辞書引数の名前のリストを指定します。</param>
            <param name="nameIndexes">辞書引数のインデックスのリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。<see cref="T:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder"/> では残りのすべての引数が消費されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ParamsDictArgBuilder.Type">
            <summary>引数に対して要求される型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder">
            <summary>
            ユーザーが明示的に参照を使用して (copy-in または copy-out セマンティクスで) 渡すことを希望している引数を表します。
            ユーザーは呼び出しが完了した際に値が更新される <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> オブジェクトを渡します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder">
            <summary>
            ユーザーによって実引数の値として生成された値を生成します。
            このクラスはさらに元の仮引数に関する情報を追跡し、配列引数や辞書引数を持つ関数に対する拡張メソッドを作成するために使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.#ctor(System.Type,System.Int32,System.Boolean,System.Boolean)">
            <summary>実引数に対する仮引数の情報が利用できない場合に、<see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="parameterType">対象となる仮引数の型を指定します。</param>
            <param name="index">実引数の位置を示すインデックスを指定します。</param>
            <param name="isParams">この引数が配列引数かどうかを示す値を指定します。</param>
            <param name="isParamsDict">この引数が辞書引数かどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.#ctor(System.Reflection.ParameterInfo,System.Type,System.Int32,System.Boolean,System.Boolean)">
            <summary>実引数に対する仮引数の情報が利用できない場合に、<see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">仮引数の情報を表す <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
            <param name="parameterType">対象となる仮引数の型を指定します。</param>
            <param name="index">実引数の位置を示すインデックスを指定します。</param>
            <param name="isParams">この引数が配列引数かどうかを示す値を指定します。</param>
            <param name="isParamsDict">この引数が辞書引数かどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.MakeCopy(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> を作成します。</summary>
            <param name="newIndex">作成する <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を示すインデックスを指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.Copy(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> を作成します。</summary>
            <param name="newIndex">作成する <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を示すインデックスを指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.ConsumedArgumentCount">
            <summary>このビルダによって消費される実際の引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.IsParamsArray">
            <summary>この引数が配列引数であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.IsParamsDict">
            <summary>この引数が辞書引数であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.Index">
            <summary>実引数の位置を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder.Type">
            <summary>引数に対して要求される型を取得します。<see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> が引数を消費しない場合は <c>null</c> が返されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.#ctor(System.Reflection.ParameterInfo,System.Type,System.Int32)">
            <summary>仮引数に関する情報、要素型、引数の位置を指定して、<see cref="T:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">仮引数の情報を表す <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
            <param name="elementType">引数の要素型を指定します。</param>
            <param name="index">実引数の位置を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.Copy(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> を作成します。</summary>
            <param name="newIndex">作成する <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を示すインデックスを指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.ToDelegate(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>実引数から引数に渡される値を提供するデリゲートを返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>実引数から引数に渡される値を提供するデリゲート。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.UpdateFromReturn(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments)">
            <summary>メソッド呼び出しの後に提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <returns>提供された値を更新する <see cref="T:System.Linq.Expressions.Expression"/>。更新が不要な場合は <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReferenceArgBuilder.ByRefArgument">
            <summary>参照渡しの引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.RestrictedArguments">
            <summary>それぞれの実引数に明示的な型を追加した実引数のコレクションを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.RestrictedArguments.#ctor(System.Dynamic.DynamicMetaObject[],System.Type[],System.Boolean)">
            <summary>指定されたオブジェクトに対する <see cref="T:Microsoft.Scripting.Actions.Calls.RestrictedArguments"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="objects">実引数の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> の配列を指定します。</param>
            <param name="types">実引数の制約された型の配列を指定します。</param>
            <param name="hasUntypedRestrictions">この実引数リストに単純な型制約以外に制約が存在するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.RestrictedArguments.GetAllRestrictions">
            <summary>このコレクションに含まれているすべてのバインディング制約を 1 つのセットにまとめて取得します。</summary>
            <returns>1 つにまとめられたコレクションに含まれているすべての <see cref="T:System.Dynamic.DynamicMetaObject"/> のバインディング制約。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.RestrictedArguments.Length">
            <summary>実引数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.RestrictedArguments.HasUntypedRestrictions">
            <summary>単純な型制約以外に制約が存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.RestrictedArguments.Objects">
            <summary>実引数の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.RestrictedArguments.Types">
            <summary>対応する <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder">
            <summary>
            <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> が提供されないときに、参照引数に対する実引数を構築します。
            更新された値は戻り値の一部として返されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.#ctor(System.Reflection.ParameterInfo,System.Int32)">
            <summary>仮引数の情報および実引数の位置を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">仮引数の情報を表す <see cref="T:System.Reflection.ParameterInfo"/> を指定します。</param>
            <param name="index">実引数の位置を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.Copy(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> を作成します。</summary>
            <param name="newIndex">作成する <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を示すインデックスを指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/> の引数の位置を指定された位置に置き換えた新しい <see cref="T:Microsoft.Scripting.Actions.Calls.SimpleArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.Clone(System.Reflection.ParameterInfo)">
            <summary>指定された引数に対するこの <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/> のコピーを生成します。</summary>
            <param name="newType">コピーが基にする仮引数を指定します。</param>
            <returns>コピーされた <see cref="T:Microsoft.Scripting.Actions.Calls.ArgBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.ToExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver,Microsoft.Scripting.Actions.Calls.RestrictedArguments,System.Boolean[])">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <param name="args">制約された引数を指定します。</param>
            <param name="hasBeenUsed">呼び出しが完了すると使用された引数に対応する位置に <c>true</c> が格納されます。</param>
            <returns>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。引数がスキップされた場合 (つまり、呼び出し先に渡されない場合) <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.ToReturnExpression(Microsoft.Scripting.Actions.Calls.OverloadResolver)">
            <summary>引数が返戻値を生成する (ref あるいは out のような) 場合、呼び出し元に追加で返される値を提供します。</summary>
            <param name="resolver">メソッドに対するオーバーロードを解決するために使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolver"/> を指定します。</param>
            <returns>呼び出し基で追加で返される値を提供する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.ByRefArgument">
            <summary>参照渡しの引数によって渡される代入可能な値を取得します。呼び出し後は更新された値が格納されます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.ReturnReferenceArgBuilder.Priority">
            <summary>この引数の優先順位を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.InferGenericMethod(Microsoft.Scripting.Actions.Calls.ApplicableCandidate,Microsoft.Scripting.Actions.Calls.ActualArguments)">
            <summary>指定されたジェネリックメソッドに対するジェネリック型引数を推論します。</summary>
            <param name="candidate">推論の対象となるメソッドを表す <see cref="T:Microsoft.Scripting.Actions.Calls.ApplicableCandidate"/> を指定します。</param>
            <param name="actualArgs">ジェネリックメソッドに適用された実引数を表す <see cref="T:Microsoft.Scripting.Actions.Calls.ActualArguments"/> を指定します。</param>
            <returns>推論されてジェネリック型引数が決定されたメソッドを表す <see cref="T:Microsoft.Scripting.Actions.Calls.MethodCandidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.CreateNewWrappers(System.Collections.Generic.IEnumerable{Microsoft.Scripting.Actions.Calls.ParameterWrapper},System.Collections.Generic.IList{System.Reflection.ParameterInfo},System.Collections.Generic.IList{System.Reflection.ParameterInfo})">
            <summary>古い引数を新しいもので置き換えるジェネリックメソッドに対する <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> の新しいリストを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.GetSortedGenericArguments(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>他の型引数から依存されている型引数がそれに依存している型引数の前になるようにソートされたソート済みのジェネリック型引数を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.IsDependentConstraint(System.Collections.Generic.IDictionary{System.Type,System.Collections.Generic.IEnumerable{System.Type}},System.Type,System.Type)">
            <summary>型引数 <paramref name="x"/> が型引数 <paramref name="y"/> に依存しているかどうかを判断します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.GetArgumentToInputMapping(System.Collections.Generic.IList{Microsoft.Scripting.Actions.Calls.ParameterWrapper},System.Func{System.Int32,System.Dynamic.DynamicMetaObject})">
            <summary>ジェネリック型引数から入力された <see cref="T:System.Dynamic.DynamicMetaObject"/> への関係を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.CollectGenericParameters(System.Type,System.Collections.Generic.ICollection{System.Type})">
            <summary>
            この型によって参照されているすべてのジェネリック型引数を構築するためにネストされたジェネリック階層を探索します。
            </summary>
            <remarks>
            例えば、次のようなメソッドの引数 x に対するジェネリック型引数を取得することを考えます:
            void Foo{T0, T1}(Dictionary{T0, T1} x);
            このとき、このメソッドはジェネリック型引数のリストに typeof(T0) と typeof(T1) の両方を追加します。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ArgumentInputs">
            <summary>単一の型引数と推論の基になる <see cref="T:System.Dynamic.DynamicMetaObject"/> を可能性のある引数に割り当てます。</summary>
            <remarks>
            たとえば、次のようなシグネチャを考えます。
            
            void Foo{T0, T1}(T0 x, T1 y, IList{T1} z);
            
            まず、x に対する実引数値を保持する T0 に対する <see cref="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ArgumentInputs"/> が 1 つあります。
            さらに、 y および z に対する <see cref="T:System.Dynamic.DynamicMetaObject"/> を保持する T1 に対する <see cref="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ArgumentInputs"/> も 1 つ存在します。
            y に関連付けられたものは <see cref="T:Microsoft.Scripting.Actions.Calls.TypeInferer.GenericParameterInferer"/> に、z に関連付けられたものは <see cref="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ConstructedParameterInferer"/> になります。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ParameterInferer">
            <summary>単一の引数に対するジェネリック型引数の推論機構を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.ParameterInferer.ConstraintsViolated(System.Type,System.Type,System.Collections.Generic.IDictionary{System.Type,System.Type})">
            <summary>
            指定されたジェネリック型引数が制約に違反しているかどうかを判断します。
            このメソッドにはこのメソッドが制約されている依存するあらゆるジェネリック型引数に対するマッピングが指定される必要があります。
            例えば、シグネチャが "void Foo{T0, T1}(T0 x, T1 y) where T0 : T1" のような場合、
            T1 がどのような型であるかが判明しなければ、制約に違反しているかどうか判断できません。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.TypeInferer.ParameterInferer.ParameterType">
            <summary>
            推論が発生する引数の型を取得します。
            これはジェネリック型引数ではなく実引数の型を表します。
            この値は typeof(IList&lt;T&gt;) または typeof(T) のようにもなります。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.TypeInferer.GenericParameterInferer">
            <summary>型がメソッド型引数の型である引数に対する型推論機構を提供します。</summary>
            <example>M{T}(T x)</example>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ConstructedParameterInferer">
            <summary>型がメソッド型引数から構築される型である引数に対する型推論機構を提供します。</summary>
            <example>
            M{T}(IList{T} x)
            M{T}(ref T x)
            M{T}(T[] x)
            M{T}(ref Dictionary{T,T}[] x)
            </example>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.ConstructedParameterInferer.#ctor(System.Type)">
            <summary>指定された引数の型を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.TypeInferer.ConstructedParameterInferer"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="parameterType">ジェネリック型引数を含む引数の型を指定します。型自体はジェネリック型引数ではありません。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.TypeInferer.ConstructedParameterInferer.MatchGenericParameter(System.Type,System.Type,System.Type,System.Collections.Generic.IDictionary{System.Type,System.Type},System.Type@)">
            <summary>
            <paramref name="openType"/> と <paramref name="closedType"/> 内の対応する具象型からすべての <paramref name="genericParameter"/> の出現を検索します。
            <paramref name="openType"/> 内の <paramref name="genericParameter"/> のすべての出現が <paramref name="closedType"/> 内の同じ具象型に対応していて、
            この型が <paramref name="constraints"/> を充足していれば <c>true</c> を返します。
            さらにその場合は、<paramref name="match"/> に具象型を返します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.IInferableInvokable">
            <summary>
            関連付けられたオブジェクトがジェネリック型推論に参加できるようにします。
            このインターフェイスは型推論機構がデリゲート型の引数に対する型推論を試みる際に使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.IInferableInvokable.GetInferredType(System.Type,System.Type)">
            <summary>デリゲート型への変換に対する推論を実行する際に、指定されたジェネリック型引数に対する推論された型を返します。</summary>
            <param name="delegateType">実引数が変換されるデリゲート型。</param>
            <param name="parameterType">推論の対象となるジェネリック型引数。</param>
            <returns>型推論の結果を格納する <see cref="T:Microsoft.Scripting.Actions.Calls.InferenceResult"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.InferenceResult">
            <summary>
            動的に基になる型を推論するカスタムオブジェクトの結果に関する情報を提供します。
            現在は呼び出し可能オブジェクトがデリゲート型に対する型をフィードバックする目的でのみ使用されています。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.InferenceResult.#ctor(System.Type,System.Dynamic.BindingRestrictions)">
            <summary>推論された型とバインディング制約を使用して、<see cref="T:Microsoft.Scripting.Actions.Calls.InferenceResult"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="type">推論された型を表す <see cref="P:Microsoft.Scripting.Actions.Calls.InferenceResult.Type"/> オブジェクトを指定します。</param>
            <param name="restrictions">推論を行った実引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> に追加するバインディング制約を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.InferenceResult.Type">
            <summary>推論された型を表す <see cref="P:Microsoft.Scripting.Actions.Calls.InferenceResult.Type"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Calls.InferenceResult.Restrictions">
            <summary>推論を行った実引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> に追加するバインディング制約を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ConversionResultKind">
            <summary>
            変換操作の結果を判別します。
            結果は例外、正常に変換されたか default(T) によって与えられた場合の値、または値が変換できるかどうかを示すブール値の場合があります。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ConversionResultKind.ImplicitCast">
            <summary>利用可能な暗黙的変換を試み、利用可能な変換が存在しない場合には例外をスローします。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ConversionResultKind.ExplicitCast">
            <summary>利用可能な暗黙的および明示的変換を試み、利用可能な変換が存在しない場合には例外をスローします。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ConversionResultKind.ImplicitTry">
            <summary>利用可能な暗黙的変換を試み、変換が実行されない場合には <c>default(ReturnType)</c> を返します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ConversionResultKind.ExplicitTry">
            <summary>利用可能な暗黙的および明示的変換を試み、変換が実行されない場合には <c>default(ReturnType)</c> を返します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DefaultBinder">
            <summary><see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> の既定の実装を提供します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ActionBinder">
            <summary>
            言語に対するバインディングセマンティクスを提供します。
            これにはアクションに対する規則を生成するためのサポートと同様に変換も含みます。
            これらの最適化された規則はメソッド呼び出し、操作の実行および <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> の変換セマンティクスを使用するメンバの取得に使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.Convert(System.Object,System.Type)">
            <summary>実行時にオブジェクトを指定された型に変換します。</summary>
            <param name="obj">変換するオブジェクトを指定します。</param>
            <param name="toType">オブジェクトを変換する型を指定します。</param>
            <returns>指定された型に変換されたオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.CanConvertFrom(System.Type,System.Type,System.Boolean,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>
            指定された縮小変換レベルで <paramref name="fromType"/> から <paramref name="toType"/> に変換が存在するかどうかを返します。
            対象の変数が <c>null</c> を許容しない場合は <paramref name="toNotNullable"/> は <c>true</c> になります。
            </summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <param name="toNotNullable">変換先の変数が <c>null</c> を許容しないかどうかを示す値を指定します。</param>
            <param name="level">変換を実行する縮小変換レベルを指定します。</param>
            <returns>指定された縮小変換レベルで <paramref name="fromType"/> から <paramref name="toType"/> に変換が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.PreferConvert(System.Type,System.Type)">
            <summary>2 つの仮引数の型の間に変換が存在しない場合は、2 つの仮引数の型の順序を返します。</summary>
            <param name="t1">1 番目の仮引数の型を指定します。</param>
            <param name="t2">2 番目の仮引数の型を指定します。</param>
            <returns>2 つの仮引数の型の間でどちらが適切かどうかを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.ConvertExpression(System.Linq.Expressions.Expression,System.Type,Microsoft.Scripting.Actions.ConversionResultKind,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> を指定された型に変換します。<see cref="T:System.Linq.Expressions.Expression"/> は複数回評価可能です。</summary>
            <param name="expr">複数回評価可能な指定された型に変換される <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="toType"><see cref="T:System.Linq.Expressions.Expression"/> が変換される型を指定します。</param>
            <param name="kind">実行される変換の種類を指定します。</param>
            <param name="resolverFactory">この変換に使用できる <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>指定された型に変換された <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.ConvertObject(System.Int32,System.Dynamic.DynamicMetaObject,System.Type,Microsoft.Scripting.Actions.ConversionResultKind)">
            <summary>デリゲートによって指定される配列の指定されたインデックスに存在する値を指定された型に変換するデリゲートを取得します。</summary>
            <param name="index">変換する引数を示すデリゲート引数内のインデックスを指定します。</param>
            <param name="knownType">変換する値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <param name="conversionResultKind">実行される変換の種類を指定します。</param>
            <returns>デリゲートによって指定された配列の指定されたインデックスに存在する引数を指定された型に変換するデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetMember(Microsoft.Scripting.Actions.MemberRequestKind,System.Type,System.String)">
            <summary>
            指定された型から指定された名前の可視であるメンバを取得します。
            既定の実装は、型、平坦化された型階層、そして登録された拡張メソッドの順に検索されます。
            </summary>
            <param name="action">メンバに対する操作を指定します。</param>
            <param name="type">メンバを検索する型を指定します。</param>
            <param name="name">検索するメンバの名前を指定します。</param>
            <returns>検索されたメンバの一覧を表す <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeContainsGenericParametersError(Microsoft.Scripting.Actions.MemberTracker)">
            <summary>指定されたメンバのジェネリック型引数に関するエラーを生成します。</summary>
            <param name="tracker">エラーが発生したメンバを指定します。</param>
            <returns>指定されたメンバのジェネリック型引数に関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorInfo(System.Type,System.String)">
            <summary>指定された型に指定された名前のメンバが見つからないことを表すエラーを生成します。</summary>
            <param name="type">メンバを検索した型を指定します。</param>
            <param name="name">検索したメンバの名前を指定します。</param>
            <returns>指定された型に指定された名前のメンバが見つからないことを表すエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeGenericAccessError(Microsoft.Scripting.Actions.MemberTracker)">
            <summary>指定されたメンバにおけるジェネリックアクセスに関するエラーを生成します。</summary>
            <param name="info">アクセスが発生したメンバを指定します。</param>
            <returns>指定されたメンバにおけるジェネリックアクセスに関するエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeStaticAssignFromDerivedTypeError(System.Type,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.MemberTracker,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>セットがフィールドまたはプロパティに派生クラスから基底クラスを通して代入を試みたときに呼ばれます。既定の動作では代入を許可します。</summary>
            <param name="accessingType">アクセスする型を指定します。</param>
            <param name="self">代入が発生したインスタンスを指定します。</param>
            <param name="assigning">代入されるプロパティまたはフィールドを指定します。</param>
            <param name="assignedValue">代入される値を指定します。</param>
            <param name="context">代入を行うメソッドオーバーロードを解決する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>セットがフィールドまたはプロパティに派生クラスから基底クラスを通して代入を試みた際の情報を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeStaticPropertyInstanceAccessError(Microsoft.Scripting.Actions.PropertyTracker,System.Boolean,System.Collections.Generic.IEnumerable{System.Dynamic.DynamicMetaObject})">
            <summary>
            静的プロパティがインスタンスメンバからアクセスされた場合を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。
            既定の動作では、静的メンバプロパティはインスタンスを通してアクセスされなければならないことを示す例外を発生させます。
            言語は例外、メッセージをカスタマイズしたり、アクセスされたプロパティを読み書きする <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> オブジェクトを生成したりするためにこのメソッドをオーバーライドできます。
            </summary>
            <param name="tracker">インスタンスを通してアクセスされた静的プロパティを指定します。</param>
            <param name="isAssignment">ユーザーがプロパティに値を代入したかどうかを示す値を指定します。</param>
            <param name="parameters">
            プロパティへのアクセスに使用される引数を指定します。
            このリストには最初の要素としてインスタンスが、<paramref name="isAssignment"/> が <c>true</c> の場合は、最後の要素として代入された値が格納されています。
            </param>
            <returns>例外またはプロパティの読み書き操作を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeStaticPropertyInstanceAccessError(Microsoft.Scripting.Actions.PropertyTracker,System.Boolean,System.Dynamic.DynamicMetaObject[])">
            <summary>
            静的プロパティがインスタンスメンバからアクセスされた場合を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を表します。
            既定の動作では、静的メンバプロパティはインスタンスを通してアクセスされなければならないことを示す例外を発生させます。
            言語は例外、メッセージをカスタマイズしたり、アクセスされたプロパティを読み書きする <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> オブジェクトを生成したりするためにこのメソッドをオーバーライドできます。
            </summary>
            <param name="tracker">インスタンスを通してアクセスされた静的プロパティを指定します。</param>
            <param name="isAssignment">ユーザーがプロパティに値を代入したかどうかを示す値を指定します。</param>
            <param name="parameters">
            プロパティへのアクセスに使用される引数を指定します。
            このリストには最初の要素としてインスタンスが、<paramref name="isAssignment"/> が <c>true</c> の場合は、最後の要素として代入された値が格納されています。
            </param>
            <returns>例外またはプロパティの読み書き操作を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeSetValueTypeFieldError(Microsoft.Scripting.Actions.FieldTracker,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>値型のフィールドに値を割り当てようとした際に発生するエラーを生成します。</summary>
            <param name="field">代入が行われたフィールドを指定します。</param>
            <param name="instance">代入が行われたフィールドを保持しているインスタンスを指定します。</param>
            <param name="value">代入される値を指定します。</param>
            <returns>例外またはフィールドへの代入操作を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeConversionError(System.Type,System.Linq.Expressions.Expression)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> を指定された型に変換できない場合に発生するエラーを生成します。</summary>
            <param name="toType"><paramref name="value"/> が変換される型を指定します。</param>
            <param name="value">型を変換する <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns>例外または変換操作を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberError(System.Type,System.Dynamic.DynamicMetaObject,System.String)">
            <summary>
            検索が失敗した際にカスタムエラーメッセージを返します。
            より堅牢なエラー返却メカニズムを実装するまでこのメソッドは使用されます。
            </summary>
            <param name="type">検索を行った型を指定します。</param>
            <param name="self">検索を行ったインスタンスを指定します。</param>
            <param name="name">検索したメンバの名前を指定します。</param>
            <returns>メンバが見つからない場合の例外を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorForAssign(System.Type,System.Dynamic.DynamicMetaObject,System.String)">
            <summary>値の代入のためのメンバ検索で指定された名前のメンバが見つからない場合に発生するエラーを生成します。</summary>
            <param name="type">検索を行った型を指定します。</param>
            <param name="self">検索を行ったインスタンスを指定します。</param>
            <param name="name">値の代入のために検索したメンバの名前を指定します。</param>
            <returns>例外または代入用のメンバを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorForAssignReadOnlyProperty(System.Type,System.Dynamic.DynamicMetaObject,System.String)">
            <summary>読み取り専用のプロパティに値を代入しようとした場合に発生するエラーを生成します。</summary>
            <param name="type">検索を行った型を指定します。</param>
            <param name="self">検索を行ったインスタンスを指定します。</param>
            <param name="name">読み取り専用のプロパティを検索したメンバの名前を指定します。</param>
            <returns>例外を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorForDelete(System.Type,System.Dynamic.DynamicMetaObject,System.String)">
            <summary>メンバの削除のための検索で指定された名前のメンバが見つからない場合に発生するエラーを生成します。</summary>
            <param name="type">検索を行った型を指定します。</param>
            <param name="self">検索を行ったインスタンスを指定します。</param>
            <param name="name">削除のために検索したメンバの名前を指定します。</param>
            <returns>例外を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetTypeName(System.Type)">
            <summary>指定された型に対する名前を返します。</summary>
            <param name="t">名前を取得する型を指定します。</param>
            <returns>型に対する名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetObjectTypeName(System.Object)">
            <summary>指定されたオブジェクトに対する型の名前を返します。</summary>
            <param name="arg">型の名前を取得するオブジェクトを指定します。</param>
            <returns>オブジェクトの型に対する名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetAllExtensionMembers(System.Type,System.String)">
            <summary>指定された型から指定された名前の拡張メンバを取得します。基底クラスも検索されます。継承階層の型が 1 つでも拡張メソッドを提供した場合、検索は停止します。</summary>
            <param name="type">拡張メンバを検索する型を指定します。</param>
            <param name="name">検索する拡張メンバの名前を指定します。</param>
            <returns>指定された型の継承関係で見つかった拡張メンバのリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetExtensionMembers(System.Type,System.String)">
            <summary>指定された型から指定された名前の拡張メンバを取得します。基底クラスは検索されません。</summary>
            <param name="declaringType">拡張メンバを検索する型を指定します。</param>
            <param name="name">検索する拡張メンバの名前を指定します。</param>
            <returns>指定された型で見つかった拡張メンバのリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.GetExtensionTypes(System.Type)">
            <summary>指定された型に対するすべての拡張型を取得します。</summary>
            <param name="t">拡張型を取得する型を指定します。</param>
            <returns>型に対する拡張型。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.ReturnMemberTracker(System.Type,Microsoft.Scripting.Actions.MemberTracker)">
            <summary>
            言語がすべての <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> をそれ自身の型で置き換える機会を提供します。
            代わりに言語は <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を直接公開することもできます。
            </summary>
            <param name="type"><paramref name="memberTracker"/> がアクセスされた型を指定します。</param>
            <param name="memberTracker">ユーザーに返されるメンバを指定します。</param>
            <returns>指定されたメンバに対する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ActionBinder.MakeCallExpression(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Reflection.MethodInfo,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を使用して、指定されたメソッドを指定された引数で呼び出す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="resolverFactory">オーバーロードを解決する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="method">呼び出すメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="parameters">メソッドに渡す引数を指定します。</param>
            <returns>指定されたメソッドを呼び出す <see cref="T:System.Linq.Expressions.Expression"/> を格納する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ActionBinder.PrivateBinding">
            <summary>
            バインダーがパブリックでないメンバにアクセスできるかどうかを示す値を取得します。
            既定では、バインダーはプライベートメンバへアクセスできませんが、
            この値をオーバーライドすることで、派生クラスはプライベートメンバへのバインディングが利用可能かどうかをカスタマイズできます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.DoOperation(System.Linq.Expressions.ExpressionType,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された引数に対して、指定された演算を実行します。</summary>
            <param name="operation">演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="args">演算のオペランドを指定します。</param>
            <returns>指定された演算の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.DoOperation(System.Linq.Expressions.ExpressionType,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された引数に対して、指定された演算を実行します。</summary>
            <param name="operation">演算の種類を示す <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <param name="resolverFactory">オーバーロードの解決とメソッドバインディングを実行する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="args">演算のオペランドを指定します。</param>
            <returns>指定された演算の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetIndex(System.Dynamic.DynamicMetaObject[])">
            <summary>
            配列に対する直接のインデックス取得操作および既定のメンバを持つオブジェクトに対するインデックス取得操作を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。
            インデックス取得操作が実行できなかった場合は <c>null</c> を返します。
            </summary>
            <param name="args">インデックス取得操作の対象および引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> の配列を指定します。</param>
            <returns>インデックス取得操作の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。操作が失敗した場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetIndex(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject[])">
            <summary>
            配列に対する直接のインデックス取得操作および既定のメンバを持つオブジェクトに対するインデックス取得操作を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。
            インデックス取得操作が実行できなかった場合は <c>null</c> を返します。
            </summary>
            <param name="resolverFactory">オーバーロードの解決とメソッドバインディングを実行する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="args">インデックス取得操作の対象および引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> の配列を指定します。</param>
            <returns>インデックス取得操作の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。操作が失敗した場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetIndex(System.Dynamic.DynamicMetaObject[])">
            <summary>
            配列に対する直接のインデックス設定操作および既定のメンバを持つオブジェクトに対するインデックス設定操作を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。
            インデックス設定操作が実行できなかった場合は <c>null</c> を返します。
            </summary>
            <param name="args">インデックス設定操作の対象および引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> の配列を指定します。</param>
            <returns>インデックス設定操作の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。操作が失敗した場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetIndex(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject[])">
            <summary>
            配列に対する直接のインデックス設定操作および既定のメンバを持つオブジェクトに対するインデックス設定操作を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。
            インデックス設定操作が実行できなかった場合は <c>null</c> を返します。
            </summary>
            <param name="resolverFactory">オーバーロードの解決とメソッドバインディングを実行する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="args">インデックス設定操作の対象および引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> の配列を指定します。</param>
            <returns>インデックス設定操作の結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。操作が失敗した場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetDocumentation(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す値の型に対するドキュメントを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
            <param name="target">ドキュメントを取得する型の値を格納している <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>型のドキュメントを表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMemberNames(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す値の型のすべてのメンバの名前表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
            <param name="target">すべてのメンバの名前を取得する型の値を格納している <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>型のすべてのメンバの名前を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetCallSignatures(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> を呼び出す際のすべてのシグネチャを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
            <param name="target">呼び出す場合のすべてのシグネチャを取得する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>呼び出しのすべてのシグネチャを表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetIsCallable(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が呼び出し可能かどうかを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
            <param name="target">呼び出し可能かどうかを調べる <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>呼び出し可能かどうかを表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryNullComparisonRule(System.Dynamic.DynamicMetaObject[])">
            <summary>
            Produces a rule for comparing a value to null - supports comparing object references and nullable types.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.ConvertTo(System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す値を指定された型に変換します。</summary>
            <param name="toType">変換先の型を指定します。</param>
            <param name="kind">変換の種類を示す <see cref="T:Microsoft.Scripting.Actions.ConversionResultKind"/> を指定します。</param>
            <param name="arg">変換元の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>変換された値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。例外をスローする式を含むこともあります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.ConvertTo(System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す値を指定された型に変換します。</summary>
            <param name="toType">変換先の型を指定します。</param>
            <param name="kind">変換の種類を示す <see cref="T:Microsoft.Scripting.Actions.ConversionResultKind"/> を指定します。</param>
            <param name="arg">変換元の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">この変換操作に使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>変換された値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。例外をスローする式を含むこともあります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.ConvertTo(System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す値を指定された型に変換します。</summary>
            <param name="toType">変換先の型を指定します。</param>
            <param name="kind">変換の種類を示す <see cref="T:Microsoft.Scripting.Actions.ConversionResultKind"/> を指定します。</param>
            <param name="arg">変換元の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">この変換操作に使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="errorSuggestion">変換が失敗した際に使用される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>変換された値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。例外をスローする式を含むこともあります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryAllConversions(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Type,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>いずれかの変換が利用可能かどうかを調べ、可能であれば変換のターゲットを構築します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryUserDefinedConversion(Microsoft.Scripting.Actions.ConversionResultKind,System.Type,System.Type,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>変換がユーザー定義の変換メソッドによってハンドルされるかどうかを判断します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryOneConversion(Microsoft.Scripting.Actions.ConversionResultKind,System.Type,System.Type,System.Type,System.String,System.Boolean,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>どれかが指定された変換メソッドを定義しているかを調べるために両方の型を調査するヘルパーメソッドです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryImplicitNumericConversion(System.Type,System.Type,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>プリミティブデータ型に暗黙の数値変換が存在するかどうかを調べます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeErrorTarget(System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>変換が起こらなかったときにエラーを生成するヘルパーメソッドです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.WrapForThrowingTry(Microsoft.Scripting.Actions.ConversionResultKind,System.Boolean,System.Linq.Expressions.Expression,System.Type)">
            <summary>明示的変換操作が例外をスローする場合にそれを try/catch で囲みます。例外がスローされた場合は既定値が返されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeSimpleConversionTarget(System.Type,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>
            どの変換も要求されない時に規則を生成するヘルパーメソッドです。
            (式入力の強い型は変換する型もしくは IL レベルで暗黙的な変換をもっている型に一致します。)
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeConvertingToTToNullableOfTTarget(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Type,Microsoft.Scripting.Actions.ConversionResultKind,System.Dynamic.BindingRestrictions,System.Dynamic.DynamicMetaObject)">
            <summary>T を Nullable(T) に変換する規則を生成するヘルパーメソッドです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetTryConvertReturnValue(System.Type)">
            <summary><see cref="F:Microsoft.Scripting.Actions.ConversionResultKind.ImplicitTry"/> または <see cref="F:Microsoft.Scripting.Actions.ConversionResultKind.ExplicitTry"/> のとき変換が失敗した際に返される値を表す <see cref="T:System.Linq.Expressions.Expression"/> を取得します。</summary>
            <param name="type">返される値が表す型を指定します。</param>
            <returns>型がクラスまたはインターフェイスの場合はその型の <c>null</c> を、それ以外の場合は <c>(object)null</c> を表す <see cref="T:System.Linq.Expressions.Expression"/> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetExtensibleValue(System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>変換される式から Extensible(T) の値を取り出します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetUnderlyingType(System.Type)">
            <summary>
            <paramref name="fromType"/> が Extensible(T) または Extensible(T) のサブクラスであれば T を返します。それ以外の場合は fromType を返します。
            これは拡張型をそのもとになる型と同一に扱いたい場合に使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.DeleteMember(System.String,System.Dynamic.DynamicMetaObject)">
            <summary>指定されたインスタンスの指定された名前をもつメンバを削除します。</summary>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="target">削除するメンバを保持しているインスタンスを指定します。</param>
            <returns>メンバの削除を表す <see cref="T:System.Linq.Expressions.Expression"/> を保持している <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.DeleteMember(System.String,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>指定されたインスタンスの指定された名前をもつメンバを削除します。</summary>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="target">削除するメンバを保持しているインスタンスを指定します。</param>
            <param name="resolutionFactory">削除の実行に使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>メンバの削除を表す <see cref="T:System.Linq.Expressions.Expression"/> を保持している <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.DeleteMember(System.String,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject)">
            <summary>指定されたインスタンスの指定された名前をもつメンバを削除します。</summary>
            <param name="name">削除するメンバの名前を指定します。</param>
            <param name="target">削除するメンバを保持しているインスタンスを指定します。</param>
            <param name="resolutionFactory">削除の実行に使用される <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="errorSuggestion">削除が失敗された場合に返される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>メンバの削除を表す <see cref="T:System.Linq.Expressions.Expression"/> を保持している <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeOperatorDeleteMemberBody(Microsoft.Scripting.Actions.DefaultBinder.SetOrDeleteMemberInfo,System.Dynamic.DynamicMetaObject,System.Type,System.String)">
            <summary>メンバーインジェクターがこの型に定義されているか、関連付けられていれば呼び出します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMember(System.String,System.Dynamic.DynamicMetaObject)">
            <summary>
            メンバの取得を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。
            すべてのビルトイン .NET メソッド、演算子メソッド、GetBoundMember および StrongBox インスタンスをサポートします。
            </summary>
            <param name="name">
            取得するメンバの名前を指定します。
            この名前は <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> では処理されず、代わりに名前マングリング、大文字と小文字を区別しない検索などを行う GetMember API に渡されます。
            </param>
            <param name="target">メンバーが取得される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>
            メンバがアクセスされた際に返される値を表す　<see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。
            返される <see cref="T:System.Dynamic.DynamicMetaObject"/> は標準の DLR GetMemberBinder から返される前にボックス化が必要な値型に厳密に型指定されている可能性があります。
            言語はあらゆるボックス化の実行に責任を持つので、カスタムボックス化を実行する機会も存在します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMember(System.String,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>
            メンバの取得を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。
            すべてのビルトイン .NET メソッド、演算子メソッド、GetBoundMember および StrongBox インスタンスをサポートします。
            </summary>
            <param name="name">
            取得するメンバの名前を指定します。
            この名前は <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> では処理されず、代わりに名前マングリング、大文字と小文字を区別しない検索などを行う GetMember API に渡されます。
            </param>
            <param name="target">メンバーが取得される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">
            GetMember の実行に必要なあらゆる呼び出しに対するオーバーロード解決とメソッドバインディングを提供する
            <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。
            </param>
            <returns>
            メンバがアクセスされた際に返される値を表す　<see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。
            返される <see cref="T:System.Dynamic.DynamicMetaObject"/> は標準の DLR GetMemberBinder から返される前にボックス化が必要な値型に厳密に型指定されている可能性があります。
            言語はあらゆるボックス化の実行に責任を持つので、カスタムボックス化を実行する機会も存在します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMember(System.String,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Boolean,System.Dynamic.DynamicMetaObject)">
            <summary>
            メンバの取得を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。
            すべてのビルトイン .NET メソッド、演算子メソッド、GetBoundMember および StrongBox インスタンスをサポートします。
            </summary>
            <param name="name">
            取得するメンバの名前を指定します。
            この名前は <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> では処理されず、代わりに名前マングリング、大文字と小文字を区別しない検索などを行う GetMember API に渡されます。
            </param>
            <param name="target">メンバーが取得される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">
            GetMember の実行に必要なあらゆる呼び出しに対するオーバーロード解決とメソッドバインディングを提供する
            <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。
            </param>
            <param name="isNoThrow">操作が失敗した際に例外をスローせず、単に失敗を表す値を返すかどうかを示す値を指定します。</param>
            <param name="errorSuggestion">取得操作がエラーになった際に使用される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>
            メンバがアクセスされた際に返される値を表す　<see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。
            返される <see cref="T:System.Dynamic.DynamicMetaObject"/> は標準の DLR GetMemberBinder から返される前にボックス化が必要な値型に厳密に型指定されている可能性があります。
            言語はあらゆるボックス化の実行に責任を持つので、カスタムボックス化を実行する機会も存在します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMember(System.String,System.Dynamic.DynamicMetaObject,System.Boolean,System.Dynamic.DynamicMetaObject)">
            <summary>
            メンバの取得を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。
            すべてのビルトイン .NET メソッド、演算子メソッド、GetBoundMember および StrongBox インスタンスをサポートします。
            </summary>
            <param name="name">
            取得するメンバの名前を指定します。
            この名前は <see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> では処理されず、代わりに名前マングリング、大文字と小文字を区別しない検索などを行う GetMember API に渡されます。
            </param>
            <param name="target">メンバーが取得される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="isNoThrow">操作が失敗した際に例外をスローせず、単に失敗を表す値を返すかどうかを示す値を指定します。</param>
            <param name="errorSuggestion">取得操作がエラーになった際に使用される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>
            メンバがアクセスされた際に返される値を表す　<see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。
            返される <see cref="T:System.Dynamic.DynamicMetaObject"/> は標準の DLR GetMemberBinder から返される前にボックス化が必要な値型に厳密に型指定されている可能性があります。
            言語はあらゆるボックス化の実行に責任を持つので、カスタムボックス化を実行する機会も存在します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.Invoke(Microsoft.Scripting.Actions.CallSignature,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する呼び出しを実行する既定のバインディングを提供します。</summary>
            <param name="signature">呼び出しを表すシグネチャを指定します。</param>
            <param name="target">呼び出される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="args"><paramref name="target"/> を呼び出す際の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>呼び出しまたは失敗を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.Invoke(Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する呼び出しを実行する既定のバインディングを提供します。</summary>
            <param name="signature">呼び出しを表すシグネチャを指定します。</param>
            <param name="target">呼び出される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="args"><paramref name="target"/> を呼び出す際の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">オーバーロードの解決とメソッドバインディングを行う <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>呼び出しまたは失敗を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.Invoke(Microsoft.Scripting.Actions.CallSignature,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> に対する呼び出しを実行する既定のバインディングを提供します。</summary>
            <param name="signature">呼び出しを表すシグネチャを指定します。</param>
            <param name="target">呼び出される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="args"><paramref name="target"/> を呼び出す際の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="resolverFactory">オーバーロードの解決とメソッドバインディングを行う <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="errorSuggestion">オブジェクトの呼び出しに失敗した際の結果を指定します。</param>
            <returns>呼び出しまたは失敗を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryGetMethodGroupTargets(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],Microsoft.Scripting.Actions.MethodGroup)">
            <summary>メソッドグループ内のメソッドに束縛します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryGetMemberGroupTargets(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],Microsoft.Scripting.Actions.MemberGroup)">
            <summary>メンバグループ内のメソッドに束縛します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryGetBoundMemberTargets(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],Microsoft.Scripting.Actions.BoundMemberTracker)">
            <summary>トラッカー内のインスタンスを使用して、オブジェクトインスタンスの型に基づいて制約することで、<see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> に束縛します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryGetDelegateTargets(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Delegate)">
            <summary>デリゲート型であれば Invoke メソッドに束縛します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.TryGetOperatorTargets(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Object)">
            <summary>演算子である Call メソッドへの束縛を試みます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CallMethod(Microsoft.Scripting.Actions.DefaultOverloadResolver,System.Collections.Generic.IList{System.Reflection.MethodBase})">
            <summary>
            指定された引数を使用して、オーバーロードされたメソッド セットに対するバインディングを実行します。
            引数は <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> オブジェクトによって指定された通りに消費されます。
            </summary>
            <param name="resolver">オーバーロードの解決とメソッドバインディングに使用される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を指定します。</param>
            <param name="targets">呼び出されるメソッド セットを指定します。</param>
            <returns>呼び出しの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CallMethod(Microsoft.Scripting.Actions.DefaultOverloadResolver,System.Collections.Generic.IList{System.Reflection.MethodBase},System.String)">
            <summary>
            指定された引数を使用して、オーバーロードされたメソッド セットに対するバインディングを実行します。
            引数は <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> オブジェクトによって指定された通りに消費されます。
            </summary>
            <param name="resolver">オーバーロードの解決とメソッドバインディングに使用される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を指定します。</param>
            <param name="targets">呼び出されるメソッド セットを指定します。</param>
            <param name="name">ターゲットからの名前に使用するメソッドの名前または <c>null</c> を指定します。</param>
            <returns>呼び出しの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CallMethod(Microsoft.Scripting.Actions.DefaultOverloadResolver,System.Collections.Generic.IList{System.Reflection.MethodBase},System.Dynamic.BindingRestrictions)">
            <summary>
            指定された引数を使用して、オーバーロードされたメソッド セットに対するバインディングを実行します。
            引数は <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> オブジェクトによって指定された通りに消費されます。
            </summary>
            <param name="resolver">オーバーロードの解決とメソッドバインディングに使用される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を指定します。</param>
            <param name="targets">呼び出されるメソッド セットを指定します。</param>
            <param name="restrictions">生成される <see cref="T:System.Dynamic.DynamicMetaObject"/> に対して適用される追加のバインディング制約を指定します。</param>
            <returns>呼び出しの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CallMethod(Microsoft.Scripting.Actions.DefaultOverloadResolver,System.Collections.Generic.IList{System.Reflection.MethodBase},System.Dynamic.BindingRestrictions,System.String)">
            <summary>
            指定された引数を使用して、オーバーロードされたメソッド セットに対するバインディングを実行します。
            引数は <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> オブジェクトによって指定された通りに消費されます。
            </summary>
            <param name="resolver">オーバーロードの解決とメソッドバインディングに使用される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を指定します。</param>
            <param name="targets">呼び出されるメソッド セットを指定します。</param>
            <param name="restrictions">生成される <see cref="T:System.Dynamic.DynamicMetaObject"/> に対して適用される追加のバインディング制約を指定します。</param>
            <param name="name">ターゲットからの名前に使用するメソッドの名前または <c>null</c> を指定します。</param>
            <returns>呼び出しの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CallMethod(Microsoft.Scripting.Actions.DefaultOverloadResolver,System.Collections.Generic.IList{System.Reflection.MethodBase},System.Dynamic.BindingRestrictions,System.String,Microsoft.Scripting.Actions.Calls.NarrowingLevel,Microsoft.Scripting.Actions.Calls.NarrowingLevel,Microsoft.Scripting.Actions.Calls.BindingTarget@)">
            <summary>
            指定された引数を使用して、オーバーロードされたメソッド セットに対するバインディングを実行します。
            引数は <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> オブジェクトによって指定された通りに消費されます。
            </summary>
            <param name="minLevel">オーバーロードの解決に使用する最小の縮小変換レベルを指定します。</param>
            <param name="maxLevel">オーバーロードの解決に使用する最大の縮小変換レベルを指定します。</param>
            <param name="resolver">オーバーロードの解決とメソッドバインディングに使用される <see cref="T:Microsoft.Scripting.Actions.DefaultOverloadResolver"/> を指定します。</param>
            <param name="targets">呼び出されるメソッド セットを指定します。</param>
            <param name="restrictions">生成される <see cref="T:System.Dynamic.DynamicMetaObject"/> に対して適用される追加のバインディング制約を指定します。</param>
            <param name="target">エラー情報の生成に使用できる結果として得られるバインディング ターゲットを格納する変数を指定します。</param>
            <param name="name">ターゲットからの名前に使用するメソッドの名前または <c>null</c> を指定します。</param>
            <returns>呼び出しの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeSplatTests(Microsoft.Scripting.Runtime.CallTypes,Microsoft.Scripting.Actions.CallSignature,System.Boolean,System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
            <summary>配列引数および辞書引数に対するテストを生成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeParamsArrayTest(Microsoft.Scripting.Runtime.CallTypes,Microsoft.Scripting.Actions.CallSignature,System.Boolean,System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
            <summary>splat テストを構築する正しい引数を取得します。<see cref="M:Microsoft.Scripting.Actions.DefaultBinder.MakeParamsTest(System.Dynamic.DynamicMetaObject,System.Boolean)"/> が実際のテストを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeParamsTest(System.Dynamic.DynamicMetaObject,System.Boolean)">
            <summary>
            散開実引数のある呼び出しに対する制約を構築します。
            引数がまだオブジェクトのコレクションであり同じ数の引数を持っていることを確認します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeParamsDictionaryTest(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject},System.Boolean)">
            <summary>
            キーワード引数のある呼び出しに対する制約を構築します。
            制約は辞書の個別のキーについてそれらが同じ名前を持っていることを確認するテストを含みます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetMember(System.String,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。</summary>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="target">メンバが設定される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="value">対象のメンバに設定される値を指定します。</param>
            <returns>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetMember(System.String,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。</summary>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="target">メンバが設定される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="value">対象のメンバに設定される値を指定します。</param>
            <param name="resolverFactory">SetMember に必要なあらゆる呼び出しに関するオーバーロード解決とメソッドバインディングを提供する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <returns>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetMember(System.String,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。</summary>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="target">メンバが設定される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="value">対象のメンバに設定される値を指定します。</param>
            <param name="errorSuggestion">
            メンバが設定できない場合に結果として使用される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。
            <c>null</c> の場合は、言語によってオーバーライドされた <see cref="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorForAssign(System.Type,System.Dynamic.DynamicMetaObject,System.String)"/> によって提供される言語特有のエラーコードが提供されます。
            </param>
            <returns>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.SetMember(System.String,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/> を構築します。</summary>
            <param name="name">設定するメンバの名前を指定します。</param>
            <param name="target">メンバが設定される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="value">対象のメンバに設定される値を指定します。</param>
            <param name="resolverFactory">SetMember に必要なあらゆる呼び出しに関するオーバーロード解決とメソッドバインディングを提供する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="errorSuggestion">
            メンバが設定できない場合に結果として使用される <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。
            <c>null</c> の場合は、言語によってオーバーライドされた <see cref="M:Microsoft.Scripting.Actions.ActionBinder.MakeMissingMemberErrorForAssign(System.Type,System.Dynamic.DynamicMetaObject,System.String)"/> によって提供される言語特有のエラーコードが提供されます。
            </param>
            <returns>メンバの設定を実行する <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="F:Microsoft.Scripting.Actions.DefaultBinder.Instance">
            <summary><see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> の既定のインスタンスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Actions.DefaultBinder"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.CanConvertFrom(System.Type,System.Type,System.Boolean,Microsoft.Scripting.Actions.Calls.NarrowingLevel)">
            <summary>
            指定された縮小変換レベルで <paramref name="fromType"/> から <paramref name="toType"/> に変換が存在するかどうかを返します。
            対象の変数が <c>null</c> を許容しない場合は <paramref name="toNotNullable"/> は <c>true</c> になります。
            </summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <param name="toNotNullable">変換先の変数が <c>null</c> を許容しないかどうかを示す値を指定します。</param>
            <param name="level">変換を実行する縮小変換レベルを指定します。</param>
            <returns>指定された縮小変換レベルで <paramref name="fromType"/> から <paramref name="toType"/> に変換が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.PreferConvert(System.Type,System.Type)">
            <summary>2 つの仮引数の型の間に変換が存在しない場合は、2 つの仮引数の型の順序を返します。</summary>
            <param name="t1">1 番目の仮引数の型を指定します。</param>
            <param name="t2">2 番目の仮引数の型を指定します。</param>
            <returns>2 つの仮引数の型の間でどちらが適切かどうかを示す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeUndeletableMemberError(System.Type,System.String)">
            <summary>バインダーによるメンバの削除が失敗した際に呼ばれます。</summary>
            <param name="type">メンバの削除を行った型です。</param>
            <param name="name">削除しようとしたメンバの名前です。</param>
            <returns>強制的なメンバの削除またはエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeNonPublicMemberGetError(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.MemberTracker,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            ユーザーが protected または private メンバの値を取得しようとした際に呼ばれます。
            既定の実装ではリフレクションを使用することでフィールドまたはプロパティへのアクセスを許可します。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> です。</param>
            <param name="member">取得が行われるメンバです。</param>
            <param name="type">取得が行われるメンバを保持している型です。</param>
            <param name="instance">取得が行われるメンバを保持しているインスタンスです。</param>
            <returns>メンバの取得またはエラーを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeReadOnlyMemberError(System.Type,System.String)">
            <summary>書き込みを行おうとしたメンバーが読み取り専用であった場合に呼ばれます。</summary>
            <param name="type">書き込みを行おうとしたメンバを保持する型です。</param>
            <param name="name">書き込みを行おうとしたメンバの名前です。</param>
            <returns>エラーまたは強制的な書き込みを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeEventValidation(Microsoft.Scripting.Actions.MemberGroup,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,Microsoft.Scripting.Actions.Calls.OverloadResolverFactory)">
            <summary>指定されたイベントにイベント ハンドラを関連付ける際に呼ばれます。</summary>
            <param name="members">関連付けられるイベントです。</param>
            <param name="eventObject">イベントを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> です。</param>
            <param name="value">関連付けるハンドラを表す値です。</param>
            <param name="resolverFactory">オーバーロード解決の方法を提供する <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> です。</param>
            <returns>エラーまたはイベントの関連付けを表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeError(Microsoft.Scripting.Actions.ErrorInfo,System.Type)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> が表すエラーまたは値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。</summary>
            <param name="error">エラーまたは値を保持している <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を指定します。</param>
            <param name="type">結果として <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す型を指定します。</param>
            <returns>エラーまたは値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.MakeError(Microsoft.Scripting.Actions.ErrorInfo,System.Dynamic.BindingRestrictions,System.Type)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> が表すエラーまたは値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。</summary>
            <param name="error">エラーまたは値を保持している <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を指定します。</param>
            <param name="restrictions">生成される <see cref="T:System.Dynamic.DynamicMetaObject"/> に適用されるバインディング制約を指定します。</param>
            <param name="type">結果として <see cref="T:System.Dynamic.DynamicMetaObject"/> が表す型を指定します。</param>
            <returns>エラーまたは値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMemberType(Microsoft.Scripting.Actions.MemberGroup,System.Linq.Expressions.Expression@)">
            <summary>
            指定された <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に含まれている <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を返します。
            <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に異なる種類の <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が存在した場合はエラーを返します。
            </summary>
            <param name="members">含まれているメンバの種類を判定する <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> を指定します。</param>
            <param name="error">異なる種類の <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が含まれていた場合にエラーを格納する変数を指定します。</param>
            <returns>
            指定された <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に含まれている <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類。
            存在しないか異なる種類の <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が存在する場合は <see cref="F:Microsoft.Scripting.Actions.TrackerTypes.All"/> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DefaultBinder.GetMethod(System.Type,System.String)">
            <summary>指定された型およびその型階層の拡張型から指定された名前のメソッドを検索します。</summary>
            <param name="type">検索を開始する型を指定します。</param>
            <param name="name">検索するメソッドの名前を指定します。</param>
            <returns>見つかったメソッドを表す <see cref="T:System.Reflection.MethodInfo"/>。見つからなかった場合は <c>null</c> を返し、複数見つかった場合は例外をスローします。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DefaultBinder.TargetInfo">
            <summary>
            呼び出しのターゲットに関する情報をカプセル化します。
            これには呼び出しの実行に必要なあらゆる制約のほかに、呼び出しの暗黙のインスタンスや呼び出すメソッドも含まれます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Interceptor">
            <summary>
            インターセプターのプロトタイプです。
            インターセプターは実際の <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> をラップする <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> で、ラップされたバインダーが生成する式ツリー上での任意の操作を実行できます。
            </summary>
            <remarks>
            次のような目的に対して適用できます。
            * 式ツリーのダンプ
            * 追加の書き換え
            * 静的コンパイル
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Interceptor.Intercept(System.Linq.Expressions.Expression)">
            <summary>指定された式ツリーをインターセプトします。</summary>
            <param name="expression">インターセプトする式ツリーを指定します。</param>
            <returns>書き換えられた式ツリー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Interceptor.Intercept(System.Linq.Expressions.LambdaExpression)">
            <summary>指定されたラムダ式をインターセプトします。</summary>
            <param name="lambda">インターセプトするラムダ式を指定します。</param>
            <returns>書き換えられたラムダ式。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.DynamicSiteHelpers">
            <summary>動的サイトに対するヘルパーメソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.DynamicSiteHelpers.IsInvisibleDlrStackFrame(System.Reflection.MethodBase)">
            <summary>メソッドがスタックフレームに表示されるべきではないかどうかを判断します。</summary>
            <param name="mb">判断するメソッドを指定します。</param>
            <returns>指定されたメソッドがスタックフレームに表示されるべきではない場合 <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder">
            <summary>追加の二項演算についてのバインディングを実行できる <see cref="T:System.Dynamic.BinaryOperationBinder"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder.#ctor(System.String)">
            <summary>演算の種類を表す文字列を使用して、<see cref="T:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="operation">演算の種類を表す文字列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder.GetHashCode">
            <summary>このオブジェクトについてのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionBinaryOperationBinder.ExtensionOperation">
            <summary>演算の種類を表す文字列を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder">
            <summary>追加の単項演算についてのバインディングを実行できる <see cref="T:System.Dynamic.UnaryOperationBinder"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder.#ctor(System.String)">
            <summary>演算の種類を表す文字列を使用して、<see cref="T:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="operation">演算の種類を表す文字列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder.GetHashCode">
            <summary>このオブジェクトについてのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionUnaryOperationBinder.ExtensionOperation">
            <summary>演算の種類を表す文字列を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.MemberRequestKind">
            <summary>既定のバインダーがメンバを要求する際の操作を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.None">
            <summary>なし</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Get">
            <summary>メンバの取得</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Set">
            <summary>メンバの設定</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Delete">
            <summary>メンバの削除</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Invoke">
            <summary>呼び出し</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.InvokeMember">
            <summary>メンバ呼び出し</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Convert">
            <summary>変換</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberRequestKind.Operation">
            <summary>演算の実行</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.BlockBuilder">
            <summary>ブロックを作成する <see cref="T:Microsoft.Scripting.Ast.ExpressionCollectionBuilder"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1">
            <summary><see cref="T:System.Linq.Expressions.Expression"/> 型のコレクションを構築する方法を提供します。</summary>
            <typeparam name="TExpression">ビルダーに追加できる要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>このビルダーに指定された式を追加します。</summary>
            <param name="expressions">このビルダーに追加する式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Add(`0)">
            <summary>このビルダーに指定された式を追加します。</summary>
            <param name="expression">このビルダーに追加する式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を取得します。</summary>
            <returns>コレクションを反復処理する列挙子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を取得します。</summary>
            <returns>コレクションを反復処理する列挙子。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Expression0">
            <summary>このビルダーの 1 番目の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Expression1">
            <summary>このビルダーの 2 番目の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Expression2">
            <summary>このビルダーの 3 番目の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Expression3">
            <summary>このビルダーの 4 番目の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Count">
            <summary>このビルダーに追加された要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.ExpressionCollectionBuilder`1.Expressions">
            <summary>
            ビルダーに追加された要素の数が 5 個以上であればすべての要素を含む <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1"/> を取得します。
            それ以外の場合は <c>null</c> を返します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.BlockBuilder.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Ast.BlockBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.BlockBuilder.ToExpression">
            <summary>このオブジェクトを式に変換します。式が追加されていない場合は <c>null</c>、1 個追加されている場合はその式、それ以外の場合はブロックを返します。</summary>
            <returns>このオブジェクトに対する <see cref="T:System.Linq.Expressions.Expression"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.BlockBuilder.op_Implicit(Microsoft.Scripting.Ast.BlockBuilder)~System.Linq.Expressions.Expression">
            <summary>指定された <see cref="T:Microsoft.Scripting.Ast.BlockBuilder"/> を式に変換します。</summary>
            <param name="block">変換する <see cref="T:Microsoft.Scripting.Ast.BlockBuilder"/> を指定します。</param>
            <returns>指定された <see cref="T:Microsoft.Scripting.Ast.BlockBuilder"/> に対する <see cref="T:System.Linq.Expressions.Expression"/> オブジェクト。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Ast.ExpressionCollectionBuilder">
            <summary>メソッド呼び出しの引数を構築する方法を提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.ExpressionCollectionBuilder.ToMethodCall(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>このビルダーに含まれている引数を使用して、指定されたインスタンスでメソッドを呼び出す式を返します。</summary>
            <param name="instance">指定されたメソッドを呼び出すインスタンスを指定します。<c>null</c> を指定すると静的メソッドの呼び出しになります。</param>
            <param name="method">呼び出すメソッドを指定します。</param>
            <returns>このビルダーに含まれている引数を使用してメソッドを呼び出す式。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Ast.FinallyFlowControlExpression">
            <summary>
            ツリー内の制御フローロジックを生成することで、ラップされたノード内のツリーにおける finally ブロックからのジャンプを可能にします。
            このノードの縮退には (ネストされたラムダではなく) 本体の式ツリーの探索が必要になります。
            あらゆる不明なジャンプを外側のスコープへのジャンプと仮定するので、このノードにはブロックを横断するジャンプを含めることができません。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.IInstructionProvider">
            <summary>インタプリタにオブジェクトが表す命令を提供できることを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IInstructionProvider.AddInstructions(Microsoft.Scripting.Interpreter.LightCompiler)">
            <summary>指定されたインタプリタにこのオブジェクトが表す命令を追加します。</summary>
            <param name="compiler">命令を追加するインタプリタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.FinallyFlowControlExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>指定された本体を使用して、<see cref="T:Microsoft.Scripting.Ast.FinallyFlowControlExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="body">finally ブロックからのジャンプを可能にする本体を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.FinallyFlowControlExpression.Reduce">
            <summary>このノードをより単純な式に変形します。</summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.FinallyFlowControlExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。</summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.FinallyFlowControlExpression.CanReduce">
            <summary>ノードをより単純なノードに変形できることを示します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.FinallyFlowControlExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.FinallyFlowControlExpression.NodeType">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> のノード型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.FinallyFlowControlExpression.Body">
            <summary>finally ブロックからのジャンプを有効にする本体を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.Utils">
            <summary>標準の式ツリーに含まれないさまざまなノードを作成するファクトリ メソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.FinallyFlowControl(System.Linq.Expressions.Expression)">
            <summary>指定された式ツリー内における finally ブロックからのジャンプを可能にします。</summary>
            <param name="body">finally ブロックからのジャンプを可能にする式ツリーを指定します。</param>
            <returns>finally ブロックからのジャンプが可能な式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.SkipInterpret(System.Linq.Expressions.Expression)">
            <summary>指定された式をインタプリタによって実行されないとしてマークします。</summary>
            <param name="body">インタプリタが無視する式を指定します。</param>
            <returns>インタプリタで指定されたコードが実行されないことを表す <see cref="T:Microsoft.Scripting.Ast.SkipInterpretExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数および操作の結果型を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">操作の結果型を指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数および操作の結果型を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">操作の結果型を指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数および操作の結果型を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">操作の結果型を指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
            <param name="arg3">動的操作の 4 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>動的操作の実行時バインダーと引数および操作の結果型を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">操作の結果型を指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
            <param name="arg3">動的操作の 4 番目の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>動的操作の実行時バインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arguments">動的操作の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.LightDynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>動的操作の実行時バインダーと引数および操作の結果型を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> を作成します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">操作の結果型を指定します。</param>
            <param name="arguments">動的操作の引数を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IsAssignment(System.Linq.Expressions.ExpressionType)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを書き換えられるかどうかを判断します。</summary>
            <param name="type">判断する <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <returns><see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを書き換えられる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <remarks>
            他のノードにおいても変数、メンバ、配列要素の代入が発生する場合があります:
            MemberInit、NewArrayInit、参照渡し引数のある Call、参照渡し引数のある New、参照渡し引数のある Dynamic.
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IsWriteOnlyAssignment(System.Linq.Expressions.ExpressionType)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを読み取らずに書き換えられるかどうかを判断します。</summary>
            <param name="type">判断する <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <returns><see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを読み取らずに書き換えられる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IsReadWriteAssignment(System.Linq.Expressions.ExpressionType)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを読み取った上で書き換えられるかどうかを判断します。</summary>
            <param name="type">判断する <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <returns><see cref="T:System.Linq.Expressions.ExpressionType"/> のノードがオペランドを読み取った上で書き換えられる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GetLValueAccess(System.Linq.Expressions.ExpressionType)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードのオペランドに対する権限を取得します。</summary>
            <param name="type">アクセス権を取得する <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードのオペランドに対する権限。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IsLValue(System.Linq.Expressions.ExpressionType)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードが左辺値として利用可能かどうかを判断します。</summary>
            <param name="type">判断する <see cref="T:System.Linq.Expressions.ExpressionType"/> を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.ExpressionType"/> のノードが左辺値として利用できれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.VariableDictionary(System.Linq.Expressions.ParameterExpression[])">
            <summary>指定されたローカル変数を格納するディクショナリを作成する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="variables">ディクショナリに格納するローカル変数を指定します。</param>
            <returns>ローカル変数を格納するディクショナリを作成する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.VariableDictionary(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>指定されたローカル変数を格納するディクショナリを作成する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="variables">ディクショナリに格納するローカル変数を指定します。</param>
            <returns>ローカル変数を格納するディクショナリを作成する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.NewArrayHelper(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            要素のリストからの 1 次元配列の初期化を表すノードを作成します。
            このメソッドは初期化リストのそれぞれの式に対して必要であれば <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> または <see cref="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)"/> を使用した変換を行います。
            </summary>
            <param name="type">作成する 1 次元配列の要素の型を指定します。</param>
            <param name="initializers">配列の初期化リストを指定します。</param>
            <returns>新しい配列の初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.SimpleNewHelper(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
            <summary>
            指定した引数を使用して指定されたコンストラクタを呼び出します。
            このメソッドは必要であれば <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> を使用する変換を引数に対して行います。
            </summary>
            <param name="constructor">呼び出すコンストラクタを指定します。</param>
            <param name="arguments">コンストラクタの呼び出しに必要な引数を指定します。</param>
            <returns>コンストラクタの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Void(System.Linq.Expressions.Expression)">
            <summary>指定された式を <see cref="T:System.Void"/> 型に変換します。</summary>
            <param name="expression"><see cref="T:System.Void"/> 型に変換する <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <returns><see cref="T:System.Void"/> 型に変換された <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            指定された式を指定された型に変換します。
            このメソッドは <see cref="T:System.Void"/> 型に関する変換もサポートします。
            </summary>
            <param name="expression">指定された型に変換する式を指定します。</param>
            <param name="type">式の変換先の型を指定します。</param>
            <returns>指定された型に変換された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Box(System.Linq.Expressions.Expression)">
            <summary>
            指定された式をボックス化した式を返します。
            <see cref="T:System.Int32"/> および <see cref="T:System.Boolean"/> 型に対してはキャッシュが適用されます。
            </summary>
            <param name="expression">ボックス化する式を指定します。</param>
            <returns>ボックス化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Generator(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <summary>指定されたラベルと本体を使用して、<see cref="T:System.Collections.Generic.IEnumerable`1"/> 型のジェネレータを作成します。T は <paramref name="label"/> の型と等しくなります。</summary>
            <param name="label">ジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">ジェネレータの本体を指定します。</param>
            <returns>新しく作成されたジェネレータ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Generator(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <summary>指定されたラベルと本体を使用して、<paramref name="type"/> 型のジェネレータを作成します。T は <paramref name="label"/> の型と等しくなります。</summary>
            <param name="label">ジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">ジェネレータの本体を指定します。</param>
            <param name="type">ジェネレータの型を指定します。ジェネレータの型は <see cref="T:System.Collections.IEnumerable"/>、<see cref="T:System.Collections.Generic.IEnumerable`1"/>、<see cref="T:System.Collections.IEnumerator"/>、または <see cref="T:System.Collections.Generic.IEnumerator`1"/> のいずれかである必要があります。</param>
            <returns>新しく作成されたジェネレータ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Generator(System.String,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
            <summary>指定された名前、ラベルと本体を使用して、<paramref name="type"/> 型のジェネレータを作成します。T は <paramref name="label"/> の型と等しくなります。</summary>
            <param name="name">ジェネレータの名前を指定します。</param>
            <param name="label">ジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">ジェネレータの本体を指定します。</param>
            <param name="type">ジェネレータの型を指定します。ジェネレータの型は <see cref="T:System.Collections.IEnumerable"/>、<see cref="T:System.Collections.Generic.IEnumerable`1"/>、<see cref="T:System.Collections.IEnumerator"/>、または <see cref="T:System.Collections.Generic.IEnumerator`1"/> のいずれかである必要があります。</param>
            <returns>新しく作成されたジェネレータ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IsEnumerableType(System.Type)">
            <summary>指定された型が <see cref="T:System.Collections.IEnumerable"/> か <see cref="T:System.Collections.Generic.IEnumerable`1"/> であるかどうかを調べます。</summary>
            <param name="type">調べる型を指定します。</param>
            <returns>型が列挙型であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda``1(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda``1(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="name">内部のジェネレータの名前を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda``1(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="name">内部のジェネレータの名前を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda(System.Type,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="delegateType">返されるラムダ式の型を指定します。</param>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda(System.Type,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="delegateType">返されるラムダ式の型を指定します。</param>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="name">内部のジェネレータの名前を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.GeneratorLambda(System.Type,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
            <summary>
            パラメータのないジェネレータを含むラムダ式を作成します。
            IEnumerator を返す場合とても単純となり、定数時間の構築になります。
            しかしながら、結果が IEnumerable である場合、それぞれの GetEnumerator() への呼び出しがパラメータと同じ値の IEnumerator を返すことを確認するために、ツリー全体の探索を必要とします。
            </summary>
            <param name="delegateType">返されるラムダ式の型を指定します。</param>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">内部のジェネレータの本体を指定します。</param>
            <param name="name">内部のジェネレータの名前を指定します。</param>
            <param name="parameters">ラムダ式のパラメータを指定します。</param>
            <returns>パラメータのないジェネレータを含むラムダ式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.YieldBreak(System.Linq.Expressions.LabelTarget)">
            <summary>指定されたラベルに処理を譲る YieldBreak ステートメントを作成します。</summary>
            <param name="target">処理が譲られるラベルを指定します。</param>
            <returns>YieldBreak ステートメントを表す <see cref="T:Microsoft.Scripting.Ast.YieldExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.YieldReturn(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <summary>指定されたラベルに処理を譲る YieldReturn ステートメントを作成します。</summary>
            <param name="target">処理が譲られるラベルを指定します。</param>
            <param name="value">渡される値を指定します。</param>
            <returns>YieldReturn ステートメントを表す <see cref="T:Microsoft.Scripting.Ast.YieldExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.YieldReturn(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Int32)">
            <summary>指定されたラベルに処理を譲る YieldReturn ステートメントを作成します。</summary>
            <param name="target">処理が譲られるラベルを指定します。</param>
            <param name="value">渡される値を指定します。</param>
            <param name="yieldMarker">デバッグ用のマーカーを指定します。</param>
            <returns>YieldReturn ステートメントを表す <see cref="T:Microsoft.Scripting.Ast.YieldExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.MakeYield(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Int32)">
            <summary>指定されたラベルに処理を譲る Yield ステートメントを作成します。</summary>
            <param name="target">処理が譲られるラベルを指定します。</param>
            <param name="value">渡される値を指定します。</param>
            <param name="yieldMarker">デバッグ用のマーカーを指定します。</param>
            <returns>YieldReturn ステートメントまたは YieldBreak ステートメントを表す <see cref="T:Microsoft.Scripting.Ast.YieldExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            <c>null</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。C# における "??" 演算子と等価です。
            <code>return (temp = left) == null ? right : temp;</code>
            </summary>
            <param name="left">null 結合式の左辺を指定します。</param>
            <param name="right">null 結合式の右辺を指定します。</param>
            <param name="temp">一時変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/> が格納される変数を指定します。</param>
            <returns><c>null</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceTrue(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            <c>true</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。これは短絡評価される論理積を一般化したものです。
            <code>return isTrue(temp = left) ? right : temp;</code>
            </summary>
            <param name="left"><c>true</c> 結合式の左辺を指定します。</param>
            <param name="right"><c>true</c> 結合式の右辺を指定します。</param>
            <param name="isTrue">左辺が真であると判断されるときに <c>true</c> を返す public static メソッドを指定します。</param>
            <param name="temp">一時変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/> が格納される変数を指定します。</param>
            <returns><c>true</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceFalse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            <c>false</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。これは短絡評価される論理和を一般化したものです。
            <code>return isTrue(temp = left) ? temp : right;</code>
            </summary>
            <param name="left"><c>false</c> 結合式の左辺を指定します。</param>
            <param name="right"><c>false</c> 結合式の右辺を指定します。</param>
            <param name="isTrue">左辺が真であると判断されるときに <c>true</c> を返す public static メソッドを指定します。</param>
            <param name="temp">一時変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/> が格納される変数を指定します。</param>
            <returns><c>false</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Coalesce(Microsoft.Scripting.Ast.LambdaBuilder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            <c>null</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。C# における "??" 演算子と等価です。
            <code>return (temp = left) == null ? right : temp;</code>
            </summary>
            <param name="builder">一時変数のスコープを含む <see cref="T:Microsoft.Scripting.Ast.LambdaBuilder"/> を指定します。</param>
            <param name="left">null 結合式の左辺を指定します。</param>
            <param name="right">null 結合式の右辺を指定します。</param>
            <returns><c>null</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceTrue(Microsoft.Scripting.Ast.LambdaBuilder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            <c>true</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。これは短絡評価される論理積を一般化したものです。
            <code>return isTrue(temp = left) ? right : temp;</code>
            </summary>
            <param name="builder">一時変数のスコープを含む <see cref="T:Microsoft.Scripting.Ast.LambdaBuilder"/> を指定します。</param>
            <param name="left"><c>true</c> 結合式の左辺を指定します。</param>
            <param name="right"><c>true</c> 結合式の右辺を指定します。</param>
            <param name="isTrue">左辺が真であると判断されるときに <c>true</c> を返す public static メソッドを指定します。</param>
            <returns><c>true</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.CoalesceFalse(Microsoft.Scripting.Ast.LambdaBuilder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
            <summary>
            <c>false</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/> を作成します。これは短絡評価される論理和を一般化したものです。
            <code>return isTrue(temp = left) ? temp : right;</code>
            </summary>
            <param name="builder">一時変数のスコープを含む <see cref="T:Microsoft.Scripting.Ast.LambdaBuilder"/> を指定します。</param>
            <param name="left"><c>false</c> 結合式の左辺を指定します。</param>
            <param name="right"><c>false</c> 結合式の右辺を指定します。</param>
            <param name="isTrue">左辺が真であると判断されるときに <c>true</c> を返す public static メソッドを指定します。</param>
            <returns><c>false</c> 結合式を表す <see cref="T:System.Linq.Expressions.ConditionalExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Update(System.Linq.Expressions.BinaryExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定された <see cref="T:System.Linq.Expressions.BinaryExpression"/> に似た新しい式を作成しますが、左辺および右辺のみ指定された式を使用します。</summary>
            <param name="expression">式の作成元の <see cref="T:System.Linq.Expressions.BinaryExpression"/> を指定します。</param>
            <param name="left">作成される式の左辺を指定します。</param>
            <param name="right">作成される式の右辺を指定します。</param>
            <returns>指定された子を持つ <see cref="T:System.Linq.Expressions.BinaryExpression"/>。すべての子が同じ場合はこの指定された式が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.AddScopedVariable(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>指定された式、変数、変数初期化子を含む <see cref="T:System.Linq.Expressions.BlockExpression"/> を作成します。<paramref name="body"/> がすでにブロックの場合はまとめられます。</summary>
            <param name="body">変数および変数初期化子を追加する式を指定します。</param>
            <param name="variable">変数を指定します。</param>
            <param name="variableInit">変数初期化子を指定します。</param>
            <returns>変数を初期化する式を含む <see cref="T:System.Linq.Expressions.BlockExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.BlockVoid(System.Linq.Expressions.Expression[])">
            <summary>指定された式を含む <c>void</c> 型のブロックを作成します。</summary>
            <param name="expressions">ブロックに含める式を指定します。</param>
            <returns><c>void</c> 型のブロックを表す <see cref="T:System.Linq.Expressions.BlockExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Block(System.Linq.Expressions.Expression[])">
            <summary>指定された式を含むブロックを作成します。式が空の場合は <c>void</c> 型の式を配置します。</summary>
            <param name="expressions">ブロックに含める式を指定します。</param>
            <returns>ブロックを表す <see cref="T:System.Linq.Expressions.BlockExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.WeakConstant(System.Object)">
            <summary>指定された値を <see cref="T:System.WeakReference"/> でラップし、<see cref="T:System.WeakReference"/> から値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="value"><see cref="T:System.WeakReference"/> でラップする値を指定します。</param>
            <returns><see cref="T:System.WeakReference"/> でラップされた指定された値から値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Constant(System.Object,System.Type)">
            <summary>指定された型の指定された値を持つ <see cref="T:System.Linq.Expressions.ConstantExpression"/> を返します。</summary>
            <param name="value"><see cref="T:System.Linq.Expressions.ConstantExpression"/> に格納する値を指定します。</param>
            <param name="type"><see cref="T:System.Linq.Expressions.ConstantExpression"/> に格納する値の型を指定します。</param>
            <returns>指定された型の指定された値を持つ <see cref="T:System.Linq.Expressions.ConstantExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Constant(System.Object)">
            <summary>指定された値を構築する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="value">構築する <see cref="T:System.Linq.Expressions.Expression"/> を返す値を指定します。</param>
            <returns>指定された値を構築する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Empty">
            <summary><see cref="T:System.Void"/> 型の空の式を返します。</summary>
            <returns><see cref="T:System.Void"/> 型の空の式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Default(System.Type)">
            <summary>指定された型の既定値を返します。型には <see cref="T:System.Void"/> も指定できます。</summary>
            <param name="type">既定値を作成する型を指定します。</param>
            <returns>指定された型の既定値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Lambda(System.Type,System.String)">
            <summary>指定された名前と戻り値の型を使用して、<see cref="T:Microsoft.Scripting.Ast.LambdaBuilder"/> の新しいインスタンスを作成します。</summary>
            <param name="returnType">構築されるラムダ式の戻り値の型を指定します。</param>
            <param name="name">構築されるラムダ式の名前を指定します。</param>
            <returns>新しい <see cref="T:Microsoft.Scripting.Ast.LambdaBuilder"/> のインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.While(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定された条件式、本体、Else 句を使用して While ループを表す <see cref="T:System.Linq.Expressions.Expression"/> 作成します。</summary>
            <param name="test">成立する限り本体が実行される条件を指定します。<c>null</c> を指定すると無限ループになります。</param>
            <param name="body">ループの本体を指定します。</param>
            <param name="else">条件が不成立になったときに 1 回だけ実行される式を指定します。この引数には <c>null</c> を指定できます。</param>
            <returns>While ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.While(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
            <summary>指定された条件式、本体、Else 句を使用して While ループを表す <see cref="T:System.Linq.Expressions.Expression"/> 作成します。</summary>
            <param name="test">成立する限り本体が実行される条件を指定します。<c>null</c> を指定すると無限ループになります。</param>
            <param name="body">ループの本体を指定します。</param>
            <param name="else">条件が不成立になったときに 1 回だけ実行される式を指定します。この引数には <c>null</c> を指定できます。</param>
            <param name="break">ループの本体によって使用される break の移動先を指定します。</param>
            <param name="continue">ループの本体によって使用される continue の移動先を指定します。</param>
            <returns>While ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Infinite(System.Linq.Expressions.Expression)">
            <summary>指定された本体を使用して、無限ループを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="body">ループの本体を指定します。</param>
            <returns>無限ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Infinite(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
            <summary>指定された本体を使用して、無限ループを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="body">ループの本体を指定します。</param>
            <param name="break">ループの本体によって使用される break の移動先を指定します。</param>
            <param name="continue">ループの本体によって使用される continue の移動先を指定します。</param>
            <returns>無限ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定された条件、更新式、本体、else 句を使用して、ループを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="test">成立する限り本体が実行される条件を指定します。<c>null</c> を指定すると無限ループになります。</param>
            <param name="update">ループの最後に実行される更新式を指定します。この引数には <c>null</c> を指定できます。</param>
            <param name="body">ループの本体を指定します。</param>
            <param name="else">条件が不成立になったときに 1 回だけ実行される式を指定します。この引数には <c>null</c> を指定できます。</param>
            <returns>ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
            <summary>指定された条件、更新式、本体、else 句を使用して、ループを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="test">成立する限り本体が実行される条件を指定します。<c>null</c> を指定すると無限ループになります。</param>
            <param name="update">ループの最後に実行される更新式を指定します。この引数には <c>null</c> を指定できます。</param>
            <param name="body">ループの本体を指定します。</param>
            <param name="else">条件が不成立になったときに 1 回だけ実行される式を指定します。この引数には <c>null</c> を指定できます。</param>
            <param name="break">ループの本体によって使用される break の移動先を指定します。</param>
            <param name="continue">ループの本体によって使用される continue の移動先を指定します。</param>
            <returns>ループを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.SimpleCallHelper(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            式ツリーでメソッド呼び出しを表すノードを作成します。
            このメソッドは <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> を使用して引数に対する変換を行います。
            </summary>
            <param name="method">呼び出すメソッドを指定します。</param>
            <param name="arguments">メソッドに渡す引数を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.MethodCallExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.SimpleCallHelper(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            式ツリーでメソッド呼び出しを表すノードを作成します。
            このメソッドは <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> を使用して引数、必要であればインスタンスに対する変換を行います。
            </summary>
            <param name="instance">メソッドを呼び出す際のインスタンスを指定します。静的メソッドの場合は <c>null</c> を指定します。</param>
            <param name="method">呼び出すメソッドを指定します。</param>
            <param name="arguments">メソッドに渡す引数を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.MethodCallExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.ComplexCallHelper(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            式ツリーでメソッド呼び出しを表すノードを作成します。
            このメソッドは <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> を使用して引数に対する変換を行います。
            このバージョンではさらに仮引数の既定値と配列引数をサポートします。
            </summary>
            <param name="method">呼び出すメソッドを指定します。</param>
            <param name="arguments">メソッドに渡す引数を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.MethodCallExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.ComplexCallHelper(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
            <summary>
            式ツリーでメソッド呼び出しを表すノードを作成します。
            このメソッドは <see cref="M:Microsoft.Scripting.Ast.Utils.Convert(System.Linq.Expressions.Expression,System.Type)"/> を使用して引数に対する変換を行います。
            このバージョンではさらに仮引数の既定値と配列引数をサポートします。
            </summary>
            <param name="instance">メソッドを呼び出す際のインスタンスを指定します。静的メソッドの場合は <c>null</c> を指定します。</param>
            <param name="method">呼び出すメソッドを指定します。</param>
            <param name="arguments">メソッドに渡す引数を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.MethodCallExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Try(System.Linq.Expressions.Expression[])">
            <summary>指定された本体を使用して、新しい <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> を作成します。</summary>
            <param name="body">Try ステートメントの本体を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.DebugMarker(System.String)">
            <summary>式ツリーの実行時に指定されたメッセージをトレース リスナーに書き込む <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="marker">式ツリーの実行時にトレース リスナーに書き込まれるメッセージを指定します。</param>
            <returns>メッセージをトレース リスナーに書き込む <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.DebugMark(System.Linq.Expressions.Expression,System.String)">
            <summary>式ツリーの実行時に指定されたメッセージをトレース リスナーに書き込み、指定された <see cref="T:System.Linq.Expressions.Expression"/> を返す <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="expression">この <see cref="T:System.Linq.Expressions.Expression"/> 全体の値となる <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="marker">式ツリーの実行時にトレース リスナーに書き込まれるメッセージを指定します。</param>
            <returns>メッセージをトレース リスナーに書き込み、指定された <see cref="T:System.Linq.Expressions.Expression"/> を返す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.AddDebugInfo(System.Linq.Expressions.Expression,System.Linq.Expressions.SymbolDocumentInfo,Microsoft.Scripting.SourceLocation,Microsoft.Scripting.SourceLocation)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> に対してデバッグ情報を追加します。</summary>
            <param name="expression">デバッグ情報を追加する <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="document">追加するデバッグ情報を指定します。</param>
            <param name="start">デバッグ情報に追加する範囲の開始位置を指定します。</param>
            <param name="end">デバッグ情報に追加する範囲の終了位置を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.Expression"/> にデバッグ情報が追加された <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.AddDebugInfo(System.Linq.Expressions.Expression,System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>指定された <see cref="T:System.Linq.Expressions.Expression"/> に対してデバッグ情報を追加します。</summary>
            <param name="expression">デバッグ情報を追加する <see cref="T:System.Linq.Expressions.Expression"/> を指定します。</param>
            <param name="document">追加するデバッグ情報を指定します。</param>
            <param name="startLine">デバッグ情報に追加する範囲の開始位置の行番号を指定します。</param>
            <param name="startColumn">デバッグ情報に追加する範囲の開始位置の列番号を指定します。</param>
            <param name="endLine">デバッグ情報に追加する範囲の終了位置の行番号を指定します。</param>
            <param name="endColumn">デバッグ情報に追加する範囲の終了位置の列番号を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.Expression"/> にデバッグ情報が追加された <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.If">
            <summary>新しい空の <see cref="T:Microsoft.Scripting.Ast.IfStatementBuilder"/> を返します。</summary>
            <returns>新しい空の <see cref="T:Microsoft.Scripting.Ast.IfStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.If(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>指定された条件および本体を追加された新しい <see cref="T:Microsoft.Scripting.Ast.IfStatementBuilder"/> を返します。</summary>
            <param name="test">追加する条件を指定します。</param>
            <param name="body">条件が真の場合に実行される式を指定します。</param>
            <returns>指定された条件および本体を追加された新しい <see cref="T:Microsoft.Scripting.Ast.IfStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.If(System.Collections.Generic.IEnumerable{Microsoft.Scripting.Ast.IfStatementTest},System.Linq.Expressions.Expression)">
            <summary>指定された一連の <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> および Else 句から If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="tests">条件および実行される式を表す一連の <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> を指定します。</param>
            <param name="else">どの条件にも一致しなかった場合に実行される式を指定します。</param>
            <returns>If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>指定された条件式と本体を使用して、If-Then を表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="test">本体を実行する条件を指定します。</param>
            <param name="body">条件が真の場合に実行される式を指定します。</param>
            <returns>If-Then を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定された条件式と本体、Else 句を使用して、If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="test">本体を実行する条件を指定します。</param>
            <param name="body">条件が真の場合に実行される式を指定します。</param>
            <param name="else">条件が偽の場合に実行される式を指定します。</param>
            <returns>If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.Unless(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定された条件が成立しない場合に式が実行される <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="test">判断する条件を指定します。</param>
            <param name="body">条件が偽の場合に実行される式を指定します。</param>
            <returns>条件が成立しない場合に式が実行される <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.Utils.IfCondition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>条件および式を使用して、新しい <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> を作成します。</summary>
            <param name="test">成立または不成立を判断する条件を指定します。</param>
            <param name="body">条件が真の場合に実行される式を指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Ast.FlowControlRewriter">
            <summary>
            このリライターの目的は単純です: 式ツリーは finally/fault を抜けるジャンプ (break, continue, return, goto) を許可しません。
            そのため現在のコードの代わりにフラグを格納して、finally/faultの最後にジャンプするコードに置き換えます。
            try-finally の最後では、その後正しいラベルにジャンプする分岐を発行します。
            
            これをより複雑にするいくつかの事実があります:
            
              1. もし finally が外側へのジャンプを含んでいれば、try/catch 内のジャンプも置き換える必要があります。
                 これは次のような場合をサポートします:
                     # returns 234
                     def foo():
                         try: return 123
                         finally: return 234 
                 
                 ジャンプした後 finally に進みますが、finally はもう一度ジャンプするとしています。
                 しかし、いったん IL finally が存在すれば、finally のジャンプを無視して元のジャンプに従うことを維持するため、"return 123" を置き換える必要があります。
                 この物語の教訓: finally 内のあらゆるジャンプを書き換えるならば、try/catch 内のジャンプも同様にする必要がある。
                 
             2. よりよりコードを生成するためには、たった 1 つの状態変数を持つ必要があり、そのため、複数の finally の外にジャンプしなければならない場合は、ジャンプを保持します。
                それはこのような場合です:
                  foo:
                  try { ... } finally {
                      try { ... } finally {
                        ...
                        if (...) {
                            // 以前は goto foo;
                            $flow = 1; goto endInnerFinally; 
                        }
                        ...
                        endInnerFinally:
                      }
                      switch ($flow) {
                          case 1: goto endOuterFinally;
                      }
                      ...
                      endOuterFinally:
                  }
                  switch ($flow) {
                    case 1: $flow = 0; goto foo;
                  }
                  ...
            
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.SourceFileInformation">
            <summary>特にファイル名や一意言語識別子などソースファイルに対するデバッグ情報の出力時に必要になる情報を格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SourceFileInformation.#ctor(System.String)">
            <summary>ファイル名を使用して、<see cref="T:Microsoft.Scripting.SourceFileInformation"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="fileName">ソースファイルのファイル名を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceFileInformation.#ctor(System.String,System.Guid)">
            <summary>ファイル名および言語識別子を使用して、<see cref="T:Microsoft.Scripting.SourceFileInformation"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="fileName">ソースファイルのファイル名を指定します。</param>
            <param name="language">ソースファイルが書かれた言語を識別するグローバル一意識別子を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SourceFileInformation.#ctor(System.String,System.Guid,System.Guid)">
            <summary>ファイル名、言語識別子およびベンダー識別子を使用して、<see cref="T:Microsoft.Scripting.SourceFileInformation"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="fileName">ソースファイルのファイル名を指定します。</param>
            <param name="language">ソースファイルが書かれた言語を識別するグローバル一意識別子を指定します。</param>
            <param name="vendor">ソースファイルが書かれた言語のベンダーを識別するグローバル一意識別子を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.SourceFileInformation.FileName">
            <summary>ソースファイルのファイル名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceFileInformation.LanguageGuid">
            <summary>ソースファイルが書かれた言語を識別するグローバル一意識別子を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.SourceFileInformation.VendorGuid">
            <summary>ソースファイルが書かれた言語のベンダーを識別するグローバル一意識別子を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.SkipInterpretExpression">
            <summary>インタプリタで指定されたコードが実行されないようにマークします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SkipInterpretExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>指定された本体を使用して、<see cref="T:Microsoft.Scripting.Ast.SkipInterpretExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="body">インタプリタが無視する式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SkipInterpretExpression.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:Microsoft.Scripting.Ast.SkipInterpretExpression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SkipInterpretExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。
            ノードを単純化できない場合、このメソッドは例外をスローします。
            </summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SkipInterpretExpression.Body">
            <summary>インタプリタが無視する式を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SkipInterpretExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SkipInterpretExpression.NodeType">
            <summary>
            この式のノード型を返します。
            拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SkipInterpretExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:Microsoft.Scripting.Ast.SkipInterpretExpression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightDynamicExpression">
            <summary>インタプリタによって認識される動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression.#ctor(System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたバインダーを使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression.AddInstructions(Microsoft.Scripting.Interpreter.LightCompiler)">
            <summary>指定されたインタプリタにこのオブジェクトが表す命令を追加します。</summary>
            <param name="compiler">命令を追加するインタプリタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:Microsoft.Scripting.Ast.LightDynamicExpression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:Microsoft.Scripting.Ast.LightDynamicExpression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression.Binder">
            <summary>動的サイトの実行時の動作を決定する <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression.NodeType">
            <summary>この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightDynamicExpression1">
            <summary>インタプリタによって認識される 1 個の引数をとる動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression1.#ctor(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
            <summary>指定されたバインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression1.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:System.Linq.Expressions.Expression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression1.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression1.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression1.Argument0">
            <summary>動的操作の 1 番目の引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightDynamicExpression2">
            <summary>インタプリタによって認識される 2 個の引数をとる動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression2.#ctor(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定されたバインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression2"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression2.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:System.Linq.Expressions.Expression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression2.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression2.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression2.Argument0">
            <summary>動的操作の 1 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression2.Argument1">
            <summary>動的操作の 2 番目の引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightDynamicExpression3">
            <summary>インタプリタによって認識される 3 個の引数をとる動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression3.#ctor(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定されたバインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression3"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression3.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:System.Linq.Expressions.Expression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression3.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression3.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression3.Argument0">
            <summary>動的操作の 1 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression3.Argument1">
            <summary>動的操作の 2 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression3.Argument2">
            <summary>動的操作の 3 番目の引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightDynamicExpression4">
            <summary>インタプリタによって認識される 4 個の引数をとる動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression4.#ctor(System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定されたバインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightDynamicExpression4"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="arg0">動的操作の 1 番目の引数を指定します。</param>
            <param name="arg1">動的操作の 2 番目の引数を指定します。</param>
            <param name="arg2">動的操作の 3 番目の引数を指定します。</param>
            <param name="arg3">動的操作の 4 番目の引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression4.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:System.Linq.Expressions.Expression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightDynamicExpression4.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression4.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression4.Argument0">
            <summary>動的操作の 1 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression4.Argument1">
            <summary>動的操作の 2 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression4.Argument2">
            <summary>動的操作の 3 番目の引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightDynamicExpression4.Argument3">
            <summary>動的操作の 4 番目の引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN">
            <summary>インタプリタによって認識される任意個の引数をとる結果型が指定された動的操作を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.#ctor(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>指定されたバインダーと引数を使用して、<see cref="T:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">動的操作の実行時バインダーを指定します。</param>
            <param name="returnType">動的操作の結果型を指定します。</param>
            <param name="args">動的操作の引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:System.Linq.Expressions.Expression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.GetArgument(System.Int32)">
            <summary>指定されたインデックスに存在する動的操作の引数を取得します。</summary>
            <param name="index">動的操作の引数を取得する 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスに存在する動的操作の引数。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.ArgumentCount">
            <summary>このノードが表す動的操作の引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LightTypedDynamicExpressionN.Arguments">
            <summary>動的操作の引数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.ExpressionAccess">
            <summary>ノードのオペランドに対するアクセス権を指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Ast.ExpressionAccess.None">
            <summary>ノードはオペランドに対して読み取りも書き込みもできません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Ast.ExpressionAccess.Read">
            <summary>ノードはオペランドの読み取りのみを行うことができます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Ast.ExpressionAccess.Write">
            <summary>ノードはオペランドの書き込みのみを行うことができます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Ast.ExpressionAccess.ReadWrite">
            <summary>ノードはオペランドに対して読み取りと書き込みの両方を行うことができます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ArgBuilder">
            <summary>
            メソッドバインダーによって使用される引数を提供します。
            メソッドに定義されているそれぞれの物理仮引数に対して 1 つの <see cref="T:Microsoft.Scripting.ComInterop.ArgBuilder"/> が存在します。
            メソッドに渡される論理実引数を表す <see cref="T:Microsoft.Scripting.Actions.Calls.ParameterWrapper"/> とは対照的です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ArgBuilder.Marshal(System.Linq.Expressions.Expression)">
            <summary>引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ArgBuilder.MarshalToRef(System.Linq.Expressions.Expression)">
            <summary>
            引数に渡される値を提供する <see cref="T:System.Linq.Expressions.Expression"/> を返します。
            このメソッドは結果が参照渡しに利用されると想定される場合に呼ばれます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ArgBuilder.UnmarshalFromRef(System.Linq.Expressions.Expression)">
            <summary>
            メソッド呼び出しの後で指定された値を更新する <see cref="T:System.Linq.Expressions.Expression"/> を返します。
            更新が必要ない場合は <c>null</c> を返す可能性があります。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.SimpleArgBuilder">
            <summary>
            ユーザーにより引数の値として生成された値を生成します。
            このクラスはさらに元の引数に関する情報を追跡し、配列引数や辞書引数のある関数に対する拡張メソッドの作成に使用できます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.BoundDispEvent.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
            <summary>AddAssign および SubtractAssign 二項演算を実行する実装を提供します。</summary>
            <param name="binder">呼び出しサイトにより提供されたバインダーを指定します。</param>
            <param name="handler">操作のハンドラーを指定します。</param>
            <param name="result">操作の結果を格納する変数を指定します。</param>
            <returns>操作が完了した場合は <c>true</c>。呼び出しサイトが動作を決定すべき場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.BoundDispEvent.AddHandler(System.Object)">
            <summary>イベントにハンドラを追加します。</summary>
            <param name="handler">追加されるハンドラを指定します。</param>
            <returns>ハンドラが追加された元のイベント。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.BoundDispEvent.RemoveHandler(System.Object)">
            <summary>イベントからハンドラを削除します。</summary>
            <param name="handler">削除されるハンドラを指定します。</param>
            <returns>ハンドラが削除された元のイベント。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComBinder">
            <summary>動的に COM オブジェクトにバインドするためのヘルパー メソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.IsComObject(System.Object)">
            <summary>指定されたオブジェクトが COM オブジェクトかどうかを判断します。</summary>
            <param name="value">調べるオブジェクトを指定します。</param>
            <returns>オブジェクトが COM オブジェクトの場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.CanComBind(System.Object)">
            <summary>指定されたオブジェクトに対する COM バインディングが可能かどうかを判断します。</summary>
            <param name="value">調べるオブジェクトを指定します。</param>
            <returns>オブジェクトに COM バインディング可能な場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindGetMember(System.Dynamic.GetMemberBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject@,System.Boolean)">
            <summary>動的メンバ取得操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.GetMemberBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <param name="delayInvocation">メンバ評価の遅延を許すかどうかを示す値を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindGetMember(System.Dynamic.GetMemberBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject@)">
            <summary>動的メンバ取得操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.GetMemberBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject@)">
            <summary>動的メンバ設定操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.SetMemberBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="value">メンバ設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject@)">
            <summary>動的呼び出し操作のバインディングの実行を試みます。</summary>    
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.InvokeBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="args">呼び出し操作の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> インスタンスの配列を指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject@)">
            <summary>動的メンバ呼び出し操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.InvokeMemberBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="args">メンバ呼び出し操作の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> インスタンスの配列を指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject@)">
            <summary>動的インデックス取得操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.GetIndexBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="args">インデックス取得操作の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> インスタンスの配列を指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryBindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject@)">
            <summary>動的インデックス設定操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.SetIndexBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="args">インデックス設定操作の引数を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> インスタンスの配列を指定します。</param>
            <param name="value">インデックス設定操作の値を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.TryConvert(System.Dynamic.ConvertBinder,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject@)">
            <summary>動的変換操作のバインディングの実行を試みます。</summary>
            <param name="binder">動的操作の詳細を表す <see cref="T:System.Dynamic.ConvertBinder"/> のインスタンスを指定します。</param>
            <param name="instance">動的操作のターゲットを指定します。</param>
            <param name="result">バインディングの結果を表す新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> が格納される変数を指定します。</param>
            <returns>操作が正常にバインドされた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.GetDynamicMemberNames(System.Object)">
            <summary>
            指定されたオブジェクトに関連付けられたメンバ名を取得します。
            このメソッドは <see cref="M:Microsoft.Scripting.ComInterop.ComBinder.IsComObject(System.Object)"/> が <c>true</c> を返すオブジェクトに対してのみ動作します。
            </summary>
            <param name="value">メンバ名を要求するオブジェクトを指定します。</param>
            <returns>メンバ名のコレクション。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.GetDynamicDataMemberNames(System.Object)">
            <summary>
            指定されたオブジェクトに関連付けられたデータ形式のメンバ名を取得します。
            このメソッドは <see cref="M:Microsoft.Scripting.ComInterop.ComBinder.IsComObject(System.Object)"/> が <c>true</c> を返すオブジェクトに対してのみ動作します。
            </summary>
            <param name="value">メンバ名を要求するオブジェクトを指定します。</param>
            <returns>メンバ名のコレクション。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinder.GetDynamicDataMembers(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            オブジェクトに対するデータ形式のメンバと関連付けられたオブジェクトを返します。
            このメソッドは <see cref="M:Microsoft.Scripting.ComInterop.ComBinder.IsComObject(System.Object)"/> が <c>true</c> を返すオブジェクトに対してのみ動作します。
            </summary>
            <param name="value">データメンバを要求するオブジェクトを指定します。</param>
            <param name="names">値を取得するデータメンバの名前を指定します。</param>
            <returns>データメンバの名前と値のペアのコレクション。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComBinder.ComGetMemberBinder">
            <summary>COM メンバ取得操作の特別なセマンティクスを示すバインダーです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComBinderHelpers.ProcessArgumentsForCom(System.Dynamic.DynamicMetaObject[]@)">
            <summary>このヘルパーは ByVal StrongBox 引数を元の引数の Value フィールドを表す ByRef 式に変換することで COM バインディングの引数を準備します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComEventSink">
            <summary>
            特定の RCW に対するイベント シンクを実装します。
            TlbImp'd のアセンブリのイベント実装と異なり、このクラスは各 RCW に対して 1 つしかイベント シンクを作成しません。
            (理論上 RCW には複数の <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> が存在できます。しかしこれらはすべて実装しているインターフェイスが異なります。)
            </summary>
            <remarks>
            それぞれの <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> は <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink.ComEventSinkMethod"/> オブジェクトのリストを保持します。
            この <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink.ComEventSinkMethod"/> はソース インターフェイス上の単一のメソッドを表し、呼び出しを転送するマルチキャスト デリゲートを保持します。
            通告: 同じ <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink.ComEventSinkMethod"/> が複数のイベント ハンドラを呼び出せるように、マルチキャスト デリゲートをチェインします。
            <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> はコネクションポイントから Unadvise するために、<see cref="T:System.IDisposable"/> を実装しています。
            通常、RCW がファイナライズされると、対応する <see cref="M:System.IDisposable.Dispose"/> が <see cref="T:Microsoft.Scripting.ComInterop.ComEventSinksContainer"/> のファイナライザによってトリガーされます。
            通告: <see cref="T:Microsoft.Scripting.ComInterop.ComEventSinksContainer"/> の生存期間は RCW の生存期間に束縛されます。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComEventSink.ComEventSinkMethod">
            <summary>メソッドの ("[DISPID=N]" の形で文字列にフォーマットされた) DISPIDと呼び出すデリゲートのリストを格納します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComEventSinkProxy">
            <summary>
            <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> のインスタンスで sourceIid に対する QueryInterface のハンドルに責任を負います。
            
            背景: COM イベント シンクがコネクション ポイントに Advise する場合、dispinterface が渡されることが仮定されます。
            現在、COM クライアントが正しいポインタを渡すと信頼しているホストもありますが、そうでないものもあります。
            例えば、Excel のコネクションポイントの実装は渡されたポインタに対して QueryInterface を呼び出しませんが、Word は呼び出します。
            
            <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> は強く言えば、実装を要求されているインターフェイスを実装しません。<see cref="T:System.Reflection.IReflect"/> を使用して「改竄」しているだけです。
            そのため、IConnectionPoint.Advise に渡されたポインタに対する Word の QueryInterface は失敗します。
            これを防ぐために、他のクラスのように「着飾る」ことができる <see cref="T:System.Runtime.Remoting.Proxies.RealProxy"/> の利点を利用して、実際はサポートしないインターフェイスに対する QueryInterface を成功させます。
            (イベント シンクへの呼び出しの場合、共通のプラクティスは IDispatch.Invoke を使用することなので「私はそのインターフェイスを実装します」と言えれば十分。)
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComEventSinksContainer">
            <summary>
            ファイナライザを備えた <see cref="T:Microsoft.Scripting.ComInterop.ComEventSink"/> のコレクションを表します。
            このリストは通常 RCW オブジェクトにカスタムデータを付加し、RCW がファイナライズされればいつでもファイナライズされます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComFallbackMetaObject">
            <summary>
            すべての処理をバインダに委譲する <see cref="T:System.Dynamic.DynamicMetaObject"/> を表します。
            バインダは実際のオブジェクト (通常 RCW) 上で動作するので、ComObject の FallBack を実行する前に、ラップ解除する必要があります。
            ComBinder でサポートする以外のあらゆる操作に対してこれらを実装する必要はありません。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComUnwrappedMetaObject">
            <summary>この型は単一の型として存在しているため、ComBinder はフォールバックを試みる際に、再度のバインドを行いません。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.IDispatchMethodIndices">
            <summary>IDispatch 仮想関数テーブルのレイアウトを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComInvokeAction">
            <summary>COM オブジェクトを呼び出すバインダーを表します。フォールバックした場合、単純にエラーを生成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.SplatInvokeBinder">
            <summary>
            他のネストされた動的サイトに引数を展開します。
            動的サイトは <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> の本当の呼び出しを行います。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComInvokeBinder.MakeIDispatchInvokeTarget">
            <summary>最適化された呼び出しのターゲットに対するすタブを生成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComMethodDesc">
            <summary>タイプライブラリに定義されているメソッド記述を表します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.Name">
            <summary>メソッドの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.DispId">
            <summary>メソッドの DispID を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.IsPropertyGet">
            <summary>メソッドが通常のプロパティ アクセスの構文を使用して呼び出されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.IsDataMember">
            <summary>メソッドがデータメンバであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.IsPropertyPut">
            <summary>メソッドが通常のプロパティ割り当ての構文を使用して呼び出されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.IsPropertyPutRef">
            <summary>メソッドがプロパティ参照割り当ての構文を使用して呼び出されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComMethodDesc.ParamCount">
            <summary>メソッドの引数の個数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComObject">
            <summary>
            COM インスタンスのランタイム呼び出し可能ラッパーに対するヘルパー クラスです。
            すべての汎用 RCW インスタンスに対してこの型のインスタンスを 1 つ作成します。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.ComInterop.ComObject._rcw">
            <summary>ランタイム呼び出し可能ラッパーを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComObject.ObjectToComObject(System.Object)">
            <summary>RCW に対応する <see cref="T:Microsoft.Scripting.ComInterop.ComObject"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComObject.RcwFromComObject(System.Linq.Expressions.Expression)">
            <summary>指定された <see cref="T:Microsoft.Scripting.ComInterop.ComObject"/> をラップ解除する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComObject.RcwToComObject(System.Linq.Expressions.Expression)">
            <summary>指定された RCW に対応する <see cref="T:Microsoft.Scripting.ComInterop.ComObject"/> を取得または作成する <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComParamDesc">
            <summary>タイプライブラリに定義されているメソッドの引数および戻り値に対する記述を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComParamDesc.#ctor(System.Runtime.InteropServices.ComTypes.ELEMDESC@,System.String)">
            <summary>COM メソッドの引数に対する記述を作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComParamDesc.#ctor(System.Runtime.InteropServices.ComTypes.ELEMDESC@)">
            <summary>COM メソッドの戻り値に対する記述を作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComParamDesc.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.IsOut">
            <summary>この引数を使用して呼び出し元に情報を返すことができるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.IsOptional">
            <summary>この引数が省略可能かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.ByReference">
            <summary>この引数が参照渡しかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.IsArray">
            <summary>この引数が配列かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.ParameterType">
            <summary>この引数の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComParamDesc.DefaultValue">
            <summary>この引数の既定値を取得します。既定値が存在しない場合は <see cref="F:System.DBNull.Value"/> が返されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComRuntimeHelpers.GetITypeInfoFromIDispatch(Microsoft.Scripting.ComInterop.IDispatch,System.Boolean)">
            <summary>IDispatch.GetTypeInfo を使用して、TypeInfo を検索します。</summary>
            <param name="dispatch"></param>
            <param name="throwIfMissingExpectedTypeInfo">TypeInfo が存在しない場合に例外をスローするかどうかを示す値を指定します。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComRuntimeHelpers.CheckIfMissingTypeInfoIsExpected(System.Int32,System.Boolean)">
            <summary>
            このメソッドは TypeInfo がオブジェクトで利用できない場合に呼ばれます。
            これは TypeInfo が存在しないことを受け入れられるかどうかを判断します。
            これは同じエラーがいつでも、すべてのマシンで、どのような状況でも発生することが保証される場合も含めることができます。
            そのような場合、TypeInfo なしで操作する必要が生じます。
            しかし、一時的な方法で TypeInfo の呼び出しが失敗する場合、本当に予想通りに問題を表すために例外をスローしたいと考えるかもしれません。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.UnsafeMethods">
            <summary>
            このクラスは C# で表現できない、またはアンセーフ コードの書き込みを要求するメソッドを格納します。
            これらのメソッドの正しくない使用は GC ホールや他の問題を引き起こす恐れがあるため、呼び出し元は極めて慎重に使用する必要があります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.UnsafeMethods.AssertByrefPointsToStack(System.IntPtr)">
            <summary>
            "value" がいくつかの呼び出し元のフレームでローカル変数であることを確認します。
            そのため、byref から IntPtr への変換は安全な操作です。
            代わりに、許可された "value" をピンされたオブジェクトにすることを許可します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComType">
            <summary>COM で表現できる型の種類を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.ComInterop.ComType.Class">
            <summary>クラス</summary>
        </member>
        <member name="F:Microsoft.Scripting.ComInterop.ComType.Enum">
            <summary>列挙型</summary>
        </member>
        <member name="F:Microsoft.Scripting.ComInterop.ComType.Interface">
            <summary>インターフェイス</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeClassDesc">
            <summary>タイプライブラリに定義されている COM コクラス記述を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeDesc">
            <summary>タイプライブラリに定義されている COM の型記述を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeLibMemberDesc">
            <summary>タイプライブラリに定義されている COM のメンバを表します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibMemberDesc.Kind">
            <summary>このメンバの種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeDesc.TypeName">
            <summary>この型の名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeDesc.TypeLib">
            <summary>この型が格納されているタイプライブラリを表す <see cref="T:Microsoft.Scripting.ComInterop.ComTypeLibDesc"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeClassDesc.CreateInstance">
            <summary>この COM コクラスのインスタンスを作成します。</summary>
            <returns>作成されたインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeClassDesc.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>このオブジェクトに対して実行される操作をバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">ランタイム値の式ツリー表現。</param>
            <returns>このオブジェクトをバインドする <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeEnumDesc">
            <summary>タイプライブラリに定義されている COM 列挙型記述を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeEnumDesc.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeEnumDesc.GetValue(System.String)">
            <summary>指定された名前に対する列挙型の値を取得します。</summary>
            <param name="name">値を取得する名前を指定します。</param>
            <returns>名前に関連付けられた値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeLibDesc">
            <summary>
            タイプライブラリのキャッシュされた情報を表します。
            要求された情報のみが保存されます。
            コクラスはイベント フックアップに使用されます。
            列挙体はスクリプトからシンボル名でアクセスするために格納されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeLibDesc.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeLibDesc.CreateFromGuid(System.Guid)">
            <summary>指定された GUID に対応する登録されている最新のタイプライブラリとそれに含まれているコクラスおよび列挙体を読み取り、コクラスのインスタンス化と列挙体の実際の値を取得できるようにする <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> を作成します。</summary>
            <param name="typeLibGuid">タイプライブラリを識別する GUID (グローバル一意識別子) を指定します。</param>
            <returns>タイプライブラリに関する情報が格納された <see cref="T:Microsoft.Scripting.ComInterop.ComTypeLibInfo"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeLibDesc.CreateFromObject(System.Object)">
            <summary>OLE オートメーション互換の RCW から ITypeLib オブジェクトとそれに含まれているコクラスおよび列挙体を読み取り、コクラスのインスタンス化と列挙体の実際の値を取得できるようにする <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> を作成します。</summary>
            <param name="rcw">タイプライブラリを取得する OLE オートメーション互換の RCW を指定します。</param>
            <returns>タイプライブラリに関する情報が格納された <see cref="T:Microsoft.Scripting.ComInterop.ComTypeLibInfo"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.ComTypeLibDesc.GetTypeLibObjectDesc(System.String)">
            <summary>指定された名前を持つ型の記述をタイプライブラリから検索します。</summary>
            <param name="member">検索する名前を指定します。</param>
            <returns>見つかった型の記述。型が見つからなかった場合は <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibDesc.Documentation">
            <summary>このオブジェクトのドキュメントを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibDesc.Guid">
            <summary>このタイプライブラリのグローバル一意ライブラリ識別子を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibDesc.VersionMajor">
            <summary>このタイプライブラリのメジャーバージョン番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibDesc.VersionMinor">
            <summary>このタイプライブラリのマイナーバージョン番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibDesc.Name">
            <summary>このタイプライブラリの名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ComTypeLibInfo">
            <summary>COM のタイプライブラリに関する情報を公開します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibInfo.Name">
            <summary>タイプライブラリの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibInfo.Guid">
            <summary>タイプライブラリのグローバル一意ライブラリ識別子を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibInfo.VersionMajor">
            <summary>タイプライブラリのメジャーバージョン番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibInfo.VersionMinor">
            <summary>タイプライブラリのマイナーバージョン番号を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ComInterop.ComTypeLibInfo.TypeLibDesc">
            <summary>タイプライブラリを表す <see cref="T:Microsoft.Scripting.ComInterop.ComTypeLibDesc"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.DispCallable">
            <summary>IDispatch オブジェクトの束縛された dispmember を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Strings">
            <summary>
               Strongly-typed and parameterized string factory.
            </summary>
            <summary>
               Strongly-typed and parameterized string factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedVarEnum(System.Object)">
            <summary>
            A string like  "Unexpected VarEnum {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispBadParamCount(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispMemberNotFound(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispNoNamedArgs(System.Object)">
            <summary>
            A string like  "Error while invoking {0}. Named arguments are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispOverflow(System.Object)">
            <summary>
            A string like  "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispTypeMismatch(System.Object,System.Object)">
            <summary>
            A string like  "Could not convert argument {0} for call to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.DispParamNotOptional(System.Object)">
            <summary>
            A string like  "Error while invoking {0}. A required parameter was omitted."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.GetIDsOfNamesInvalid(System.Object)">
            <summary>
            A string like  "IDispatch::GetIDsOfNames behaved unexpectedly for {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CouldNotGetDispId(System.Object,System.Object)">
            <summary>
            A string like  "Could not get dispatch ID for {0} (error: {1})."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.AmbiguousConversion(System.Object,System.Object)">
            <summary>
            A string like  "There are valid conversions from {0} to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.VariantGetAccessorNYI(System.Object)">
            <summary>
            A string like  "Variant.GetAccessor cannot handle {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation_ContainsGenericParameters(System.Object,System.Object)">
            <summary>
            A string like  "Cannot access member {1} declared on type {0} because the type contains generic parameters."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MissingType(System.Object)">
            <summary>
            A string like  "Type '{0}' is missing or cannot be loaded."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAccessFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be read through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.StaticAssignmentFromInstanceError(System.Object,System.Object)">
            <summary>
            A string like  "static property "{0}" of "{1}" can only be assigned to through a type, not an instance"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            A string like  "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCast(System.Object,System.Object)">
            <summary>
            A string like  "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnknownMemberType(System.Object)">
            <summary>
            A string like  "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NonGenericWithGenericGroup(System.Object)">
            <summary>
            A string like  "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidOperation(System.Object)">
            <summary>
            A string like  "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            A string like  "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnhandledConvert(System.Object)">
            <summary>
            A string like  "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoCallableMethods(System.Object,System.Object)">
            <summary>
            A string like  "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExtensionMustBePublic(System.Object)">
            <summary>
            A string like  "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            A string like  "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.FieldReadonly(System.Object)">
            <summary>
            A string like  "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.PropertyReadonly(System.Object)">
            <summary>
            A string like  "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.ExpectedBoundEvent(System.Object)">
            <summary>
            A string like  "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.UnexpectedType(System.Object,System.Object)">
            <summary>
            A string like  "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.MemberWriteOnly(System.Object)">
            <summary>
            A string like  "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidStreamType(System.Object)">
            <summary>
            A string like  "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddCasing(System.Object)">
            <summary>
            A string like  "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CantAddIdentifier(System.Object)">
            <summary>
            A string like  "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.InvalidCtorImplementation(System.Object,System.Object)">
            <summary>
            A string like  "Type '{0}' doesn't provide a suitable public constructor or its implementation is faulty: {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            A string like  "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoImplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NoExplicitCast(System.Object,System.Object)">
            <summary>
            A string like  "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.NameNotDefined(System.Object)">
            <summary>
            A string like  "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.IllegalNew_GenericParams(System.Object)">
            <summary>
            A string like  "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Strings.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            A string like  "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ComObjectExpected">
            <summary>
            A string like  "COM object is expected."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotCall">
            <summary>
            A string like  "Cannot perform call."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.COMObjectDoesNotSupportEvents">
            <summary>
            A string like  "COM object does not support events."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.COMObjectDoesNotSupportSourceInterface">
            <summary>
            A string like  "COM object does not support specified source interface."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.SetComObjectDataFailed">
            <summary>
            A string like  "Marshal.SetComObjectData failed."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodShouldNotBeCalled">
            <summary>
            A string like  "This method exists only to keep the compiler happy."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotRetrieveTypeInformation">
            <summary>
            A string like  "ResolveComReference.CannotRetrieveTypeInformation."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnsupportedEnumType">
            <summary>
            A string like  "Attempting to wrap an unsupported enum type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnsupportedHandlerType">
            <summary>
            A string like  "Attempting to pass an event handler of an unsupported type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodPreconditionViolated">
            <summary>
            A string like  "Method precondition violated"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidArgumentValue">
            <summary>
            A string like  "Invalid argument value"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyStringRequired">
            <summary>
            A string like  "Non-empty string required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NonEmptyCollectionRequired">
            <summary>
            A string like  "Non-empty collection required"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustBeExceptionInstance">
            <summary>
            A string like  "must by an Exception instance"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfTestMustBeBool">
            <summary>
            A string like  "Type of test must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeOfExpressionMustBeBool">
            <summary>
            A string like  "Type of the expression must be bool"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EmptyStringIsInvalidPath">
            <summary>
            A string like  "Empty string is not a valid path."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidDelegate">
            <summary>
            A string like  "Invalid delegate type (Invoke method not found)."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ExpectedStaticProperty">
            <summary>
            A string like  "expected only static property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.PropertyDoesNotExist">
            <summary>
            A string like  "Property doesn't exist on the provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FieldDoesNotExist">
            <summary>
            A string like  "Field doesn't exist on provided type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveConstructorForTheSignature">
            <summary>
            A string like  "Type doesn't have constructor with a given signature"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForName">
            <summary>
            A string like  "Type doesn't have a method with a given name."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.TypeDoesNotHaveMethodForNameSignature">
            <summary>
            A string like  "Type doesn't have a method with a given name and signature."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CountCannotBeNegative">
            <summary>
            A string like  "Count must be non-negative."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.ArrayTypeMustBeArray">
            <summary>
            A string like  "arrayType must be an array type"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustHaveCodeOrTarget">
            <summary>
            A string like  "Either code or target must be specified."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FirstArgumentMustBeCallSite">
            <summary>
            A string like  "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoInstanceForCall">
            <summary>
            A string like  "no instance for call."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTest">
            <summary>
            A string like  "Missing Test."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MissingTarget">
            <summary>
            A string like  "Missing Target."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FinallyAlreadyDefined">
            <summary>
            A string like  "Finally already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotHaveFaultAndFinally">
            <summary>
            A string like  "Can not have fault and finally."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.FaultAlreadyDefined">
            <summary>
            A string like  "Fault already defined."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GlobalsMustBeUnique">
            <summary>
            A string like  "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.GenNonSerializableBinder">
            <summary>
            A string like  "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidPath">
            <summary>
            A string like  "pecified path is invalid."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.DictionaryNotHashable">
            <summary>
            A string like  "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.LanguageRegistered">
            <summary>
            A string like  "language already registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MethodOrOperatorNotImplemented">
            <summary>
            A string like  "The method or operation is not implemented."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoException">
            <summary>
            A string like  "No exception."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.AlreadyInitialized">
            <summary>
            A string like  "Already initialized."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.MustReturnScopeExtension">
            <summary>
            A string like  "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidParamNumForService">
            <summary>
            A string like  "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CannotChangeNonCachingValue">
            <summary>
            A string like  "Cannot change non-caching value."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoCodeToCompile">
            <summary>
            A string like  "No code to compile."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.QueueEmpty">
            <summary>
            A string like  "Queue empty."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationNotStarted">
            <summary>
            A string like  "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.EnumerationFinished">
            <summary>
            A string like  "Enumeration already finished."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidOutputDir">
            <summary>
            A string like  "Invalid output directory."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.InvalidAsmNameOrExtension">
            <summary>
            A string like  "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.NoDefaultValue">
            <summary>
            A string like  "No default value for a given type."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.UnknownLanguageProviderType">
            <summary>
            A string like  "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantReadProperty">
            <summary>
            A string like  "can't read from property"
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Strings.CantWriteProperty">
            <summary>
            A string like  "can't write to property"
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Error">
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
            <summary>
               Strongly-typed and parameterized exception factory.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.COMObjectDoesNotSupportEvents">
            <summary>
            ArgumentException with message like "COM object does not support events."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.COMObjectDoesNotSupportSourceInterface">
            <summary>
            ArgumentException with message like "COM object does not support specified source interface."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.SetComObjectDataFailed">
            <summary>
            InvalidOperationException with message like "Marshal.SetComObjectData failed."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MethodShouldNotBeCalled">
            <summary>
            InvalidOperationException with message like "This method exists only to keep the compiler happy."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedVarEnum(System.Object)">
            <summary>
            InvalidOperationException with message like "Unexpected VarEnum {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispBadParamCount(System.Object)">
            <summary>
            System.Reflection.TargetParameterCountException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispMemberNotFound(System.Object)">
            <summary>
            MissingMemberException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispNoNamedArgs(System.Object)">
            <summary>
            ArgumentException with message like "Error while invoking {0}. Named arguments are not supported."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispOverflow(System.Object)">
            <summary>
            OverflowException with message like "Error while invoking {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispTypeMismatch(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Could not convert argument {0} for call to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DispParamNotOptional(System.Object)">
            <summary>
            ArgumentException with message like "Error while invoking {0}. A required parameter was omitted."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotRetrieveTypeInformation">
            <summary>
            InvalidOperationException with message like "ResolveComReference.CannotRetrieveTypeInformation."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GetIDsOfNamesInvalid(System.Object)">
            <summary>
            ArgumentException with message like "IDispatch::GetIDsOfNames behaved unexpectedly for {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnsupportedEnumType">
            <summary>
            InvalidOperationException with message like "Attempting to wrap an unsupported enum type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnsupportedHandlerType">
            <summary>
            InvalidOperationException with message like "Attempting to pass an event handler of an unsupported type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CouldNotGetDispId(System.Object,System.Object)">
            <summary>
            MissingMemberException with message like "Could not get dispatch ID for {0} (error: {1})."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.AmbiguousConversion(System.Object,System.Object)">
            <summary>
            System.Reflection.AmbiguousMatchException with message like "There are valid conversions from {0} to {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.VariantGetAccessorNYI(System.Object)">
            <summary>
            NotImplementedException with message like "Variant.GetAccessor cannot handle {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustHaveCodeOrTarget">
            <summary>
            ArgumentException with message like "Either code or target must be specified."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.TypeParameterIsNotDelegate(System.Object)">
            <summary>
            InvalidOperationException with message like "Type parameter is {0}. Expected a delegate."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidCast(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "Cannot cast from type '{0}' to type '{1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownMemberType(System.Object)">
            <summary>
            InvalidOperationException with message like "unknown member type: '{0}'. "
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FirstArgumentMustBeCallSite">
            <summary>
            InvalidOperationException with message like "RuleBuilder can only be used with delegates whose first argument is CallSite."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoInstanceForCall">
            <summary>
            InvalidOperationException with message like "no instance for call."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTest">
            <summary>
            InvalidOperationException with message like "Missing Test."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MissingTarget">
            <summary>
            InvalidOperationException with message like "Missing Target."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NonGenericWithGenericGroup(System.Object)">
            <summary>
            TypeLoadException with message like "The operation requires a non-generic type for {0}, but this represents generic types only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOperation(System.Object)">
            <summary>
            ArgumentException with message like "Invalid operation: '{0}'"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FinallyAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Finally already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotHaveFaultAndFinally">
            <summary>
            InvalidOperationException with message like "Can not have fault and finally."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FaultAlreadyDefined">
            <summary>
            InvalidOperationException with message like "Fault already defined."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantCreateDefaultTypeFor(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create default value for type {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnhandledConvert(System.Object)">
            <summary>
            ArgumentException with message like "Unhandled convert: {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCallableMethods(System.Object,System.Object)">
            <summary>
            InvalidOperationException with message like "{0}.{1} has no publiclly visible method."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GlobalsMustBeUnique">
            <summary>
            ArgumentException with message like "Global/top-level local variable names must be unique."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.GenNonSerializableBinder">
            <summary>
            ArgumentException with message like "Generating code from non-serializable CallSiteBinder."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidPath">
            <summary>
            ArgumentException with message like "pecified path is invalid."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.DictionaryNotHashable">
            <summary>
            ArgumentTypeException with message like "Dictionaries are not hashable."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.LanguageRegistered">
            <summary>
            InvalidOperationException with message like "language already registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MethodOrOperatorNotImplemented">
            <summary>
            NotImplementedException with message like "The method or operation is not implemented."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoException">
            <summary>
            InvalidOperationException with message like "No exception."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExtensionMustBePublic(System.Object)">
            <summary>
            ArgumentException with message like "Extension type {0} must be public."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.AlreadyInitialized">
            <summary>
            InvalidOperationException with message like "Already initialized."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MustReturnScopeExtension">
            <summary>
            InvalidImplementationException with message like "CreateScopeExtension must return a scope extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidParamNumForService">
            <summary>
            ArgumentException with message like "Invalid number of parameters for the service."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidArgumentType(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Invalid type of argument {0}; expecting {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CannotChangeNonCachingValue">
            <summary>
            ArgumentException with message like "Cannot change non-caching value."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.FieldReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Field {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.PropertyReadonly(System.Object)">
            <summary>
            MissingMemberException with message like "Property {0} is read-only"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedEvent(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Expected event from {0}.{1}, got event from {2}.{3}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.ExpectedBoundEvent(System.Object)">
            <summary>
            ArgumentTypeException with message like "expected bound event, got {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnexpectedType(System.Object,System.Object)">
            <summary>
            ArgumentTypeException with message like "Expected type {0}, got {1}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.MemberWriteOnly(System.Object)">
            <summary>
            MemberAccessException with message like "can only write to member {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoCodeToCompile">
            <summary>
            InvalidOperationException with message like "No code to compile."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidStreamType(System.Object)">
            <summary>
            ArgumentException with message like "Invalid stream type: {0}."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.QueueEmpty">
            <summary>
            InvalidOperationException with message like "Queue empty."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationNotStarted">
            <summary>
            InvalidOperationException with message like "Enumeration has not started. Call MoveNext."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.EnumerationFinished">
            <summary>
            InvalidOperationException with message like "Enumeration already finished."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddCasing(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add another casing for identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantAddIdentifier(System.Object)">
            <summary>
            InvalidOperationException with message like "can't add new identifier {0}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidOutputDir">
            <summary>
            ArgumentException with message like "Invalid output directory."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.InvalidAsmNameOrExtension">
            <summary>
            ArgumentException with message like "Invalid assembly name or file extension."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CanotEmitConstant(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "Cannot emit constant {0} ({1})"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoImplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No implicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoExplicitCast(System.Object,System.Object)">
            <summary>
            ArgumentException with message like "No explicit cast from {0} to {1}"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NameNotDefined(System.Object)">
            <summary>
            MissingMemberException with message like "name '{0}' not defined"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.NoDefaultValue">
            <summary>
            ArgumentException with message like "No default value for a given type."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.UnknownLanguageProviderType">
            <summary>
            ArgumentException with message like "Specified language provider type is not registered."
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantReadProperty">
            <summary>
            InvalidOperationException with message like "can't read from property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.CantWriteProperty">
            <summary>
            InvalidOperationException with message like "can't write to property"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.IllegalNew_GenericParams(System.Object)">
            <summary>
            ArgumentException with message like "Cannot create instance of {0} because it contains generic parameters"
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Error.VerificationException(System.Object,System.Object,System.Object)">
            <summary>
            System.Security.VerificationException with message like "Non-verifiable assembly generated: {0}:\nAssembly preserved as {1}\nError text:\n{2}\n"
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.ExcepInfo">
            <summary>ComTypes.EXCEPINFO に似ていますが、独自のマーシャリングを行っています。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.IDispatchComObject">
            <summary>IDispatch を実装するオブジェクトを表します。</summary>
            <remarks>
            現在以下のような問題があります:
            1. IDispatchComObject ではなく ComObjectWithTypeInfo を選んだ場合、
               多くの場合 IDispatch の実装が登録されているタイプライブラリに依存しているため、IDispatchComObject をあまり使用できません。
               ComObjectWithTypeInfo ではなく IDispatchComObject を選んだ場合、ユーザーは理想的ではない体験を得ることになります。
            2. IDispatch は 0 個の引数をもつ (さらに 1 つ以上の既定の引数をもつ?) メソッドとプロパティを識別できません。
               そのため、obj.foo() は foo というメソッドを呼び出しているとも、プロパティ foo から返された関数ポインタを呼び出しているともとれるので、あいまいです。
               IDispatch に関連付けられた ITypeInfo を見て、メソッドまたはプロパティのどちらを呼び出すべきかを調べようとしています。
               ITypeInfo はメソッドが何の引数を予期するのか、メソッドまたはプロパティか、オブジェクトの既定のプロパティはどれか、コレクションの列挙子の作成方法などを知っています。
            3. IronPython はシグネチャを処理し、ref 引数を戻り値に変換しています。
               しかし、DispMethod のシグネチャは前もって利用できないので、この変換は不可能です。
               影響があるかもしれない他のシグネチャ変換があるかもしれません。
               VB6 は ref 引数と IDispatch をどのように扱っていたのでしょうか?
               
            さらに IDispatch オブジェクトに対するイベントもサポートしています。
            背景:
            COM オブジェクトはコネクション ポイントとして知られるメカニズムを通してイベントをサポートしています。
            コネクション ポイントは作成されたオブジェクトを実際の COM オブジェクトから分離します。(これはイベント シンクとイベント ソースの循環参照を防ぐためです。)
            クライアントが COM オブジェクトによって生成されたイベントを購読したい場合、(ソース インターフェイスとしても知られる) コールバック インターフェイスを実装し、それをコネクション ポイントに渡します (Advise)。
            
            実装の詳細:
            IDisaptchComObject.TryGetMember 要求が受信された場合、まず要求されたメンバがプロパティ、メソッドのどちらかを確認します。
            この確認が失敗した場合、イベントが要求されたかどうかの判断を試みます。
            これを行うために、以下の手順を実行します:
            1. COM オブジェクトが IConnectionPointContainer を実装しているかを調べます
            2. COM オブジェクトのコクラス記述の取得を試みます
               a. オブジェクトに IProvideClassInfo インターフェイスを要求します。見つかった場合は 3 に進みます。
               b. オブジェクトの IDispatch からプライマリ インターフェイス記述を取得します
               c. オブジェクトのタイプライブラリで宣言されているコクラスをスキャンします
               d. 特にこのプライマリ インターフェイスを実装しているコクラスを見つけます
            3. コクラスをスキャンしてすべてのソースインターフェイスを求めます
            4. ソースインターフェイスで任意のメソッドが要求された名前に一致するかどうかを判断します
            
            いったん TryGetMember がイベントを要求すると判断すれば、BoundDispEvent クラスのインスタンスを返します。
            このクラスは InPlaceAdd と InPlaceSubtract 演算子が定義されています。
            InPlaceAdd 演算子を呼び出すと次のようになります:
            1. ComEventSinksContainer クラスのインスタンスが作成されます (RCW がすでにインスタンスを保持していない場合)
               このインスタンスはイベント シンクの生存期間を RCW 自身の生存期間に関連付けようと試みて、RCW からハングされます。
               これはいったん RCW が収集されれば、イベント シンクも収集されることを意味します。(これはイベント シンクの生存期間が PIA によって制御されるのと同じ方法です。)
               通告: ComEventSinksContainer はすべてのイベント シンクを Unadvise するファイナライザを含んでいます。
               通告: ComEventSinksContainer は ComEventSink オブジェクトのリストです。
            2. 要求されたソース インターフェイスに対して ComEventSink が作成されていない場合、ComEventSink を作成し Advise します。
               それぞれの ComEventSink は COM オブジェクトがサポートする単一のソース インターフェイスを実装しています。
            3. ComEventSink はメソッドの DISPID からイベントが発生した際に呼び出されるマルチキャスト デリゲートへのマッピングを含んでいます。
            4. ComEventSink は COM 利用者に対するカスタム IDispatch として公開される IReflect インターフェイスを実装しています。
               これによって、IDispatch.Invoke への呼び出しを横取りして、カスタムロジックを適用することができるようになります。
               特に、呼び出された DISPID に対応するマルチキャスト デリゲートを見つけて呼び出すということなど。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.NullArgBuilder">
            <summary>常に null を生成する <see cref="T:Microsoft.Scripting.ComInterop.ArgBuilder"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.VarEnumSelector">
            <summary>マネージユーザー型が COM 呼び出しの引数として渡される場合の、マーシャリングされる VarEnum 型を判断する方法を提供します。</summary>
            <remarks>
            (プリミティブ型や COM オブジェクトに対立するものとしての) マネージユーザー型が COM 呼び出しの引数として渡される場合、マーシャリングされる VarEnum 型を判断する必要があります。
            下記の選択肢があります:
            1. 例外を発生させる
               独自バージョンのプリミティブ型を持つ言語は言語の型を使用して COM メソッドを呼ぶことができません。(例えば、IronRuby の string は <see cref="T:System.String"/> ではありません)
               明示的なキャストが必要になります。
            2. VT_DISPATCH としてマーシャリングする
               その場合、COM コードは遅延バインディング方式ですべての API にアクセスすることができますが、古い COM コンポーネントはプリミティブ型を予期している場合、正常に機能しません。
            3. どのプリミティブ型がもっとも近いのかを判断する
               これにより COM コンポーネントは .NET メソッドと同じくらい簡単に利用できるようになります。
            4. タイプライブラリを利用して、予期されている型が何かを判断する
               しかし、タイプライブラリは利用可能でない場合もあります。
            <see cref="T:Microsoft.Scripting.ComInterop.VarEnumSelector"/> は 3 番目の選択肢を実装します。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.VarEnumSelector.GetManagedMarshalType(System.Runtime.InteropServices.VarEnum)">
            <summary>Variant として表すことができるようにオブジェクトが変換される必要があるマネージ型を取得します。</summary>
            <remarks>
            一般に、<see cref="T:System.Type"/> と <see cref="T:System.Runtime.InteropServices.VarEnum"/> の間には多対多の写像が存在します。
            しかしこのメソッドは現在の実装に必要な単純な写像を返します。
            多対多関係に関する理由は次のようなものです:
            1. <see cref="T:System.Int32"/> は VT_ERROR と同様に VT_I4 にもマッピングされ、<see cref="T:System.Decimal"/> は VT_DECIMAL と VT_CY にマッピングされます。
               しかし、これはラッパー型を混ぜると変化します。
            2. COM 型を表す型が存在しない場合もあります。__ComObject はプライベートであり、<see cref="T:System.Object"/> では汎用的すぎます。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.VarEnumSelector.CreateComPrimitiveTypeFamilies">
            <summary>それぞれのファミリに含まれているような COM 型のファミリを作成します。ファミリ内で手前の型に対しては完全に無損失な変換が存在します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.VarEnumSelector.TryGetPrimitiveComTypeViaConversion(System.Type,System.Runtime.InteropServices.VarEnum@)">
            <summary>引数に対する最適な変換が存在する一意なプリミティブ型が存在するかどうかを判断します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.VarEnumSelector.GetVariantBuilder(System.Type)">
            <summary>COM への呼び出しとして引数をマーシャリングするべき COM Variant 型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.Variant">
            <summary>
            遅延バインディングに対する基本的な COM の型を表します。他のあらゆる COM データ型を格納できます。
            この構造体は COM 呼び出しに渡すことも、COM 呼び出しから返されることもできるように、アンマネージデータレイアウトに正確に一致するようになっています。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.Variant.IsPrimitiveType(System.Runtime.InteropServices.VarEnum)">
            <summary>
            プリミティブ型は基本 COM 型です。
            プリミティブ型には int のような値型だけでなく BStr のような参照型も含まれます。
            プリミティブ型には配列やユーザー定義の COM 型 (IUnknown/IDispatch) などの複合型は含まれません。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.Variant.ToObject">
            <summary>Variant が表しているマネージオブジェクトを取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.ComInterop.Variant.Clear">
            <summary>この Variant に関連付けられたあらゆるアンマネージメモリを開放します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.ComInterop.VariantBuilder">
            <summary>IDispatch.Invoke への呼び出しに対する Variant への引数のパッケージングをハンドルします。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.FieldBuilderExpression">
            <summary>型の作成が完了していないときに <see cref="T:System.Reflection.Emit.FieldBuilder"/> を抽象構文木 (AST) に埋め込むことができる単純な式を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.FieldBuilderExpression.#ctor(System.Reflection.Emit.FieldBuilder)">
            <summary>埋め込む <see cref="T:System.Reflection.Emit.FieldBuilder"/> を使用して、<see cref="T:Microsoft.Scripting.Generation.FieldBuilderExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="builder">抽象構文木 (AST) に埋め込む <see cref="T:System.Reflection.Emit.FieldBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.FieldBuilderExpression.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:Microsoft.Scripting.Generation.FieldBuilderExpression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.FieldBuilderExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。</summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Generation.FieldBuilderExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:Microsoft.Scripting.Generation.FieldBuilderExpression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.FieldBuilderExpression.NodeType">
            <summary>この式のノード型を返します。 拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.FieldBuilderExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher">
            <summary>
            単一の対話コマンドをディスパッチするために使用されます。
            このインターフェイスはコマンドが実行されるスレッド、コマンドに許可される実行時間などを制御するために使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher.Execute(Microsoft.Scripting.Hosting.CompiledCode,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたコードを指定されたスコープで実行されるようにディスパッチして、結果を返します。</summary>
            <param name="compiledCode">実行するコードを指定します。</param>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <returns>コードが実行された結果を返します。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager">
             <summary>リモートランタイムが強制終了されたことの検出および新しいリモートランタイムの起動をサポートします。</summary>
             <remarks>
             スレッディングモデル:
             
             <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager"/> はコンソールを作成し実行する分離スレッドを作成します。
             これには少なくとも 3 つのスレッドが関係しています:
             
             1. メイン アプリケーション スレッド: <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager"/> をインスタンス化し、その API にアクセスします。
                このスレッドはユーザー入力に応答可能である必要があり、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager"/> の API を長期間実行したり、ブロックしたりすることはできません。
                リモートランタイムプロセスは非同期的に終了できるので、現在の <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> は (自動再起動が有効であれば) いつでも変更できます。
                アプリケーションは通常どの <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> のインスタンスが現在使用されているかを気にする必要はありません。
                このスレッドのフローチャートは次のようになります:
                    <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager"/> を作成
                    <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.Start"/>
                    ループ:
                        ユーザー入力に応答 | ユーザー入力を実行中のコンソールに送信 | <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.BreakExecution"/> | <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.RestartConsole"/> | <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.GetMemberNames(System.String)"/>
                    <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.Terminate"/>
                TODO: 現在、<see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.BreakExecution"/> と <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.GetMemberNames(System.String)"/> はメインスレッドから同期的に呼び出されます。
                それらはリモートランタイムにあるコードを実行しますが、任意の時間がかかる可能性があります。
                メインアプリケーションスレッドが無期限にブロックされることがないようにこの動作を変更する必要があります。
            
             2. コンソール スレッド: <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> を作成したり、(実行に時間を要するか、無期限にブロックする可能性のある) コードを実行したりするための専用のスレッドです。
                    <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.Start"/> の実行を待機
                    ループ:
                        <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> の作成
                        次のシグナルの待機:
                             コードの実行 | <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.RestartConsole"/> | <see cref="E:System.Diagnostics.Process.Exited"/>
            
             3. 完了ポートの非同期コールバック
                    <see cref="E:System.Diagnostics.Process.Exited"/> | <see cref="E:System.Diagnostics.Process.OutputDataReceived"/> | <see cref="E:System.Diagnostics.Process.ErrorDataReceived"/>
             
             4. ファイナライザ スレッド
                (Dispose を呼び出す可能性のある) Finalize メソッドがあるオブジェクトがあります。
                それほど多くはない型では Finalize メソッドをもつ必要があるものもあります。
             </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.#ctor(System.Boolean)">
            <summary>REPL ループの生存モードを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="exitOnNormalExit"><see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> のインスタンスが正常に終了した場合は REPL ループも終了するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.CreateRemoteConsoleHost">
            <summary>新しい <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> を作成します。このメソッドはコンソール スレッドで実行されます。</summary>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.Start">
            <summary>コンソール REPL ループを開始します。このメソッドを呼び出すにはアクティベーションが完了している必要があります。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.BreakExecution">
            <summary>コンソール REPL ループの実行を中断します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.RestartConsole">
            <summary>コンソール REPL ループの終了を要求して、REPL ループを再起動します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.Terminate">
            <summary>コンソール REPL ループの終了を要求します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.AccessLock">
            <summary><see cref="P:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.CurrentConsoleHost"/> にコンソール スレッド以外からアクセスされた場合に <c>null</c> か破棄されていない状態であることを保証するロックを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.ConsoleThread">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> を作成したり、実行に時間のかかる可能性のあるコードを実行したりする専用のスレッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.ConsoleRestartManager.CurrentConsoleHost">
            <summary>現在の <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher">
            <summary>
            <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> が長時間実行されている操作を中止できるようにします。
            <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> 自体はどのスレッドプールのスレッドがリモート呼び出しを処理しているのかを知らないため、これにはリモートランタイムサーバーからの協調動作を必要とします。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.OutputCompleteMarker">
            <summary>リモート コンソールが現在のコマンドからのすべての出力が到着したことを確認できるような出力の終わりを示すマーカーを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.#ctor(Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定されたスコープを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="scope">このディスパッチャに関連付けるスコープを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.Execute(Microsoft.Scripting.Hosting.CompiledCode,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>指定された長時間実行される可能性のあるコードを指定されたスコープで実行し、結果を返します。</summary>
            <param name="compiledCode">実行するコードを指定します。</param>
            <param name="scope">コードを実行するスコープを指定します。</param>
            <returns>コード実行の結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.AbortCommand">
            <summary>現在実行中の <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.Execute(Microsoft.Scripting.Hosting.CompiledCode,Microsoft.Scripting.Hosting.ScriptScope)"/> への呼び出しを <see cref="M:System.Threading.Thread.Abort(System.Object)"/> により中止します。</summary>
            <returns>実際に <see cref="M:System.Threading.Thread.Abort(System.Object)"/> が呼ばれた場合は <c>true</c>。実行中の <see cref="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.Execute(Microsoft.Scripting.Hosting.CompiledCode,Microsoft.Scripting.Hosting.ScriptScope)"/> への呼び出しが存在しない場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.InitializeLifetimeService">
            <summary>対象のインスタンスの有効期間ポリシーを制御する、有効期間サービス オブジェクトを取得します。</summary>
            <returns>
            対象のインスタンスの有効期間ポリシーを制御するときに使用する、<see cref="T:System.Runtime.Remoting.Lifetime.ILease"/> 型のオブジェクト。
            存在する場合は、このインスタンスの現在の有効期間サービス オブジェクトです。それ以外の場合は、<see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime"/>
            プロパティの値に初期化された新しい有効期間サービス オブジェクトです。
            </returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher.ScriptScope">
            <summary>このディスパッチャに関連付けられたスコープを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine">
            <summary>リモートシナリオにカスタマイズされたコマンドライン ホスティング サービスを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.CommandLine">
            <summary>コマンドライン ホスティング サービスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.CommandLine"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Initialize">
            <summary>このサービスの初期化処理を行います。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.CreateScope">
            <summary>このコマンドライン ホスティング サービスが使用する新しい <see cref="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Scope"/> を作成します。</summary>
            <returns>作成された新しい <see cref="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Scope"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.CreateCommandDispatcher">
            <summary>このコマンドライン ホスティング サービスが使用する新しい <see cref="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher"/> を作成します。</summary>
            <returns>作成された新しい <see cref="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Terminate(System.Int32)">
            <summary>終了コードを指定して、このサービスを終了します。</summary>
            <param name="exitCode">終了に関する終了コードを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Run(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.Shell.IConsole,Microsoft.Scripting.Hosting.Shell.ConsoleOptions)">
            <summary>コマンドラインを実行します。</summary>
            <param name="engine">サービスを実行する言語を表す <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を指定します。</param>
            <param name="console">サービスの入出力を行うコンソールを指定します。</param>
            <param name="options">サービスのコンソールに対するオプションを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Run">
            <summary>コマンドラインを実行します。言語はこのメソッドをオーバーライドすることで、単一のコマンドあるいはファイルの実行、対話ループの開始以外の動作を提供できます。</summary>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.Shutdown">
            <summary>このコマンドラインの終了時に呼ばれます。既定の実装では基になる動的言語ランタイムをシャットダウンします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunFile(System.String)">
            <summary>指定されたファイル名のファイルを実行して、終了コードを返します。</summary>
            <param name="fileName">ファイル名を指定します。</param>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunCommand(System.String)">
            <summary>指定されたコマンドを実行して、終了コードを返します。</summary>
            <param name="command">コマンドを表す文字列を指定します。</param>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunFile(Microsoft.Scripting.Hosting.ScriptSource)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を実行して、終了コードを返します。</summary>
            <param name="source">実行するソースコードを表す <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を指定します。</param>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.PrintLogo">
            <summary>ロゴをコンソールに表示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunInteractive">
            <summary>対話ループを開始します。ループの開始前にあらゆる必要な初期化を実行し、ループを開始します。対話ループが完了したら、終了コードを返します。</summary>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunInteractiveLoop">
            <summary>
            対話ループを実行します。
            終了コードが到着するまで繰り返し対話動作を解析、実行します。
            ハンドルされないあらゆる例外はコンソールを通してユーザーに表示されます。
            </summary>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.IsFatalException(System.Exception)">
            <summary>指定された例外が致命的であるかどうかを判断します。</summary>
            <param name="ex">調べる例外を指定します。</param>
            <returns>例外が致命的であった場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.UnhandledException(System.Exception)">
            <summary>ハンドルされない例外発生した場合に呼ばれます。</summary>
            <param name="ex">ハンドルされなかった例外。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.TryInteractiveAction">
            <summary>
            単一の対話動作の実行およびあらゆる言語固有の例外のハンドルを試みます。
            派生クラスはこのメソッドをオーバーライドして、個別の例外ハンドリングを追加できます。
            </summary>
            <returns>成功して実行を継続できる場合は <c>null</c>。それ以外の場合は終了コードを指定します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.RunOneInteraction">
            <summary>
            単一の対話コマンドまたはステートメントセットを解析および実行します。
            読み取られたコードが対話コマンドかステートメントであるかは改行によって判断します。
            コードが改行を含んでいる場合、それは (おそらく SendToConsole から来た) ステートメントセットです。
            コードが改行を含まない場合、それはプロンプトでユーザーが入力した対話コマンドです。
            </summary>
            <returns>成功して実行を継続できる場合は <c>null</c>。それ以外の場合は適切な終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.ExecuteCommand(System.String)">
            <summary>対話ループで指定されたコマンドを実行します。</summary>
            <param name="command">実行するコマンドを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.ExecuteCommand(Microsoft.Scripting.Hosting.ScriptSource)">
            <summary>対話ループで指定された <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/> を実行します。</summary>
            <param name="source">実行する <see cref="T:Microsoft.Scripting.Hosting.ScriptSource"/></param>
            <returns>実行の結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.TreatAsBlankLine(System.String,System.Int32)">
            <summary>指定された入力を空行として扱うかどうかを判断します。自動インデントされたテキストについてのみこれを実行します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.ReadStatement(System.Boolean@)">
            <summary>ステートメントを読み取ります。ステートメントは (クラス宣言のような) 潜在的に複数行のステートメントセットになる可能性があるものです。</summary>
            <param name="continueInteraction">コンソールセッションを継続させるかどうかを示す値。</param>
            <returns>評価された式。空の入力については <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.GetCommandProperties(System.String)">
            <summary>指定されたソースコードについての解析結果を取得します。</summary>
            <param name="code">解析するコードを指定します。</param>
            <returns>解析結果を表す <see cref="T:Microsoft.Scripting.ScriptCodeParseResult"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.GetNextAutoIndentSize(System.String)">
            <summary>次行の自動インデントサイズを取得します。</summary>
            <param name="text">現在のコードを指定します。</param>
            <returns>次行の自動インデントサイズ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.ReadLine(System.Int32)">
            <summary>指定された自動インデントサイズを使用して行を読み取ります。</summary>
            <param name="autoIndentSize">行に適用される自動インデントサイズを指定します。</param>
            <returns>読み取られた行。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.GetMemberNames(System.String)">
            <summary>指定されたコードに関するメンバ名の一覧を取得します。</summary>
            <param name="code">メンバを取得する対象のコードを指定します。</param>
            <returns>取得されたメンバの名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.CommandLine.GetGlobals(System.String)">
            <summary>指定された名前のグローバル変数名の一覧を取得します。</summary>
            <param name="name">検索する名前を指定します。</param>
            <returns>指定された名前のグローバル変数名。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Console">
            <summary>このサービスの入出力を行っているコンソールを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Options">
            <summary>このサービスのコンソールに対するオプションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Engine">
            <summary>このサービスを現在実行中の言語を表す <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.ScriptScope">
            <summary>
            このサービスによってコマンドを実行するスコープを取得 (または設定) します。
            このプロパティの設定は派生クラスのみ可能です。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.ExitCode">
            <summary>このコマンドの終了コードを取得 (または設定) します。
            このプロパティの設定は派生クラスのみ可能です。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Scope">
            <summary><see cref="P:Microsoft.Scripting.Hosting.Shell.CommandLine.ScriptScope"/> に対する同じアプリケーションドメイン内でのみ動作するリモート可能ではない <see cref="T:Microsoft.Scripting.Runtime.Scope"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Language">
            <summary><see cref="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Engine"/> に対する同じアプリケーションドメイン内でのみ動作するリモート可能ではない <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> オブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Prompt">
            <summary>このコマンドラインによるプロンプトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.PromptContinuation">
            <summary>このコマンドラインによる複数行入力の 2 行目以降のプロンプトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.Logo">
            <summary>通常対話ループの開始時に表示されるロゴを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.CommandLine.ErrorSink">
            <summary>エラーを処理する <see cref="T:Microsoft.Scripting.ErrorSink"/> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine.#ctor(Microsoft.Scripting.Hosting.ScriptScope,Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher,System.Threading.AutoResetEvent)">
            <summary>指定されたスコープ、ディスパッチャ、イベントを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="scope">コマンドラインに関連付けられたスコープを指定します。</param>
            <param name="remoteCommandDispatcher">コマンドを実際にディスパッチする <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteCommandDispatcher"/> を指定します。</param>
            <param name="remoteOutputReceived">出力を受信した際にシグナル状態になる <see cref="T:System.Threading.AutoResetEvent"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine.CreateCommandDispatcher">
            <summary>単一のコマンドをディスパッチする新しい <see cref="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher"/> を作成します。</summary>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine.UnhandledException(System.Exception)">
            <summary>対話ループ中でハンドルされない例外が発生した際に実行されます。</summary>
            <param name="ex">ハンドルされなかった例外。</param>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleCommandLine.RemoteConsoleCommandDispatcher">
            <summary>リモートランタイムからの出力を確実に同期させる <see cref="T:Microsoft.Scripting.Hosting.Shell.ICommandDispatcher"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost">
            <summary><see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> が (リモートランタイムサーバーと呼ばれる) 分離プロセスでホストされている <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> を表します。</summary>
            <remarks>
            このクラスはリモートランタイムサーバーを生成し、相互通信に使用する IPC チャンネル名を決定します。
            リモートランタイムサーバーは <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> および <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を作成、初期化して、ウェルノウン URI の指定された IPC チャンネル上で公開します。
            注釈: <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> は <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> のようなクラスがリモート可能でないため、<see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> の初期化に簡単に参加できません。
            <see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost"/> は次にリモーティングチャンネル上の <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> で対話ループを開始し、コマンドを実行します。
            また、リモートランタイムサーバーの標準出力を監視することで、ローカルでのユーザーへの表示も行います。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost">
            <summary>対話コンソールを実装するための基本的な機能を提供します。このクラスは具体的な実装のために継承される必要があります。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ParseHostOptions(System.String[])">
            <summary>指定された引数を <see cref="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ConsoleHostOptionsParser"/> を使用して解析します。</summary>
            <param name="args">解析する引数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CreateRuntimeSetup">
            <summary>使用する <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> のセットアップに必要な <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を作成します。</summary>
            <returns>作成および初期化された <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CreateLanguageSetup">
            <summary>言語を表す <see cref="T:Microsoft.Scripting.Hosting.LanguageSetup"/> を作成および初期化します。</summary>
            <returns>作成および初期化された <see cref="T:Microsoft.Scripting.Hosting.LanguageSetup"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CreateCommandLine">
            <summary>このホストでコマンドラインをサポートする <see cref="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CommandLine"/> を作成します。</summary>
            <returns>作成された <see cref="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CommandLine"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CreateOptionsParser">
            <summary>引数を解析してコンソールのオプションを設定する <see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsParser"/> を作成します。</summary>
            <returns>作成された <see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsParser"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CreateConsole(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.Shell.CommandLine,Microsoft.Scripting.Hosting.Shell.ConsoleOptions)">
            <summary>言語、コマンドライン、オプションを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.IConsole"/> インターフェイスを実装するオブジェクトを作成します。</summary>
            <param name="engine">コンソールで使用する言語を表す <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を指定します。</param>
            <param name="commandLine">コンソールに関連付けるコマンドラインを指定します。</param>
            <param name="options">コンソールのオプションを表す <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions"/> を指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Hosting.Shell.IConsole"/> インターフェイスを実行するオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Terminate(System.Int32)">
            <summary>(他のスレッドから) コンソールの REPL ループを終了するように要求します。</summary>
            <param name="exitCode">終了をトリガーするイベントに対応する終了コードを指定します。これは <see cref="M:CommandLine.Run(ScriptEngine, IConsole, ConsoleOptions)"/> から返されます。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Run(System.String[])">
            <summary>プログラムのエントリポイントから呼ばれ、指定された引数でのコンソールの実行を開始します。</summary>
            <param name="args">開始時にプログラムに与えられた引数を指定します。</param>
            <returns>終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.PrintHelp">
            <summary>ヘルプをコンソールに表示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.GetHelp">
            <summary>ヘルプを人間が読める形式で取得します。</summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.PrintLanguageHelp(System.Text.StringBuilder)">
            <summary>言語に関するヘルプを指定された <see cref="T:System.Text.StringBuilder"/> に追加します。</summary>
            <param name="output">ヘルプを表す文字列を追加する <see cref="T:System.Text.StringBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ExecuteInternal">
            <summary>解析されたオプションに基づいて、使用法やバージョンを表示したり、コマンドラインやファイルを実行したりします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.PrintVersion">
            <summary>この言語のバージョンをコンソールに表示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.UnhandledException(Microsoft.Scripting.Hosting.ScriptEngine,System.Exception)">
            <summary>ハンドルされない例外が発生した場合に呼ばれます。</summary>
            <param name="engine">例外が発生したい際に動作していたエンジンを指定します。</param>
            <param name="ex">発生した例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHost.PrintException(System.IO.TextWriter,System.Exception)">
            <summary>指定された <see cref="T:System.IO.TextWriter"/> に指定された例外を表す文字列を書き出します。</summary>
            <param name="output">例外を表す文字列を書き出す <see cref="T:System.IO.TextWriter"/> を指定します。</param>
            <param name="ex">書き出す例外を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Options">
            <summary>開始時に与えられたコンソール ホストに対するオプションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.RuntimeSetup">
            <summary>開始時に作成された <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> のセットアップ情報を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Engine">
            <summary>コンソールのコマンドを実行する言語を表す <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> を取得 (または設定) します。設定は派生クラスのみ可能です。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Runtime">
            <summary>セットアップされたランタイムを表す <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> を取得 (または設定) します。設定は派生クラスのみ可能です。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ExitCode">
            <summary>コンソールの終了コードを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ConsoleHostOptionsParser">
            <summary>開始時に引数を解析する <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ConsoleIO">
            <summary>コマンドラインなどで使用される入出力コンソールを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.CommandLine">
            <summary>このホストが現在保持しているコマンドラインを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.ExeName">
            <summary>ヘルプなどで表示されるコンソールホストのエントリーポイントを含んでいる実行ファイルの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.PlatformAdaptationLayer">
            <summary>このホストによって使用される <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHost.Provider">
            <summary>このホストによって使用される言語プロバイダの型を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.OnRemoteRuntimeExited(System.Object,System.EventArgs)">
            <summary>リモートランタイムサーバーが終了した際に呼ばれます。</summary>
            <param name="sender">終了したリモートランタイムサーバーを表す <see cref="T:System.Diagnostics.Process"/> オブジェクト。</param>
            <param name="e">リモートランタイムサーバーの終了に関連付けられているイベントオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.OnOutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>リモートランタイムサーバーから出力データが到着した際に呼ばれます。</summary>
            <param name="sender">データの送信元のリモートランタイムサーバーを表す <see cref="T:System.Diagnostics.Process"/> オブジェクト。</param>
            <param name="e">リモートランタイムサーバーから到着したデータを格納しているイベントオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.Terminate(System.Int32)">
            <summary>リモートコンソールの REPL ループに終了を要求します。</summary>
            <param name="exitCode">コンソールの終了コードを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.CreateCommandLine">
            <summary>新しい <see cref="T:Microsoft.Scripting.Hosting.Shell.CommandLine"/> オブジェクトを作成します。</summary>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.Hosting.Shell.CommandLine"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.UnhandledException(Microsoft.Scripting.Hosting.ScriptEngine,System.Exception)">
            <summary>コマンドの実行中にハンドルされない例外が発生した際に呼ばれます。</summary>
            <param name="engine">コマンドを実行しているエンジン。</param>
            <param name="ex">ハンドルされなかった例外。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.CustomizeRemoteRuntimeStartInfo(System.Diagnostics.ProcessStartInfo)">
            <summary>
            コンソールが環境変数や作業ディレクトリなどを変更できる機会を与えます。
            このメソッドで少なくとも <see cref="P:System.Diagnostics.ProcessStartInfo.FileName"/> は初期化される必要があります。
            </summary>
            <param name="processInfo">リモートランタイムサーバープロセスの起動情報を表す <see cref="T:System.Diagnostics.ProcessStartInfo"/>。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.AbortCommand">
            <summary>現在に実行されているコマンドを中止します。</summary>
            <returns>実際にコマンドが中止された場合は <c>true</c>。コマンドが実行されていなかったか、すでに完了した場合は場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.Run(System.String[])">
            <summary>指定された引数を使用して、リモートコンソールの実行を開始します。</summary>
            <param name="args">プログラムの引数を指定します。</param>
            <returns>リモートコンソールの終了コード。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.Dispose(System.Boolean)">
            <summary>このリモートコンソールホストを破棄します。</summary>
            <param name="disposing">すべてのリソースを破棄する場合は <c>true</c>。アンマネージリソースのみを破棄する場合は <c>false</c>。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.Dispose">
            <summary>このリモートコンソールホストを破棄します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.ScriptScope">
            <summary>このコンソール ホストに関連付けられたスコープを表す <see cref="P:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.ScriptScope"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.RemoteRuntimeProcess">
            <summary>このリモートコンソールのリモートランタイムサーバーを表す <see cref="T:System.Diagnostics.Process"/> を取得します。</summary>
        </member>
        <member name="E:Microsoft.Scripting.Hosting.Shell.Remote.RemoteConsoleHost.RemoteRuntimeExited">
            <summary>リモートランタイムサーバーがそれ自体によって終了した場合に発生します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException">
            <summary>リモートランタイムが起動中に予期せず終了した場合にスローされる例外を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException.#ctor(System.String)">
            <summary>指定されたメッセージを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の詳細を表すメッセージを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException.#ctor(System.String,System.Exception)">
            <summary>指定されたメッセージと内部例外を使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の詳細を表すメッセージを指定します。</param>
            <param name="innerException">この例外の原因となった例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeStartupException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名が <c>null</c> であるか、または <see cref="P:System.Exception.HResult"/> が 0 です。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeServer">
            <summary>リモートランタイムサーバーが初期化された <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> や <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntime"/> をリモーティングチャンネルを通して公開する際に使用されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.Remote.RemoteRuntimeServer.StartServer(System.String,Microsoft.Scripting.Hosting.ScriptScope)">
            <summary>ホストが使用できるようにオブジェクトを公開して、(入力ストリームがオープンされるまで) 無期限にブロックします。</summary>
            <param name="remoteRuntimeChannelName">リモートコンソールが <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> との相互通信に使用すると予測される IPC チャンネルを指定します。</param>
            <param name="scope">スクリプトコマンド処理の開始準備ができている初期化済みの <see cref="T:Microsoft.Scripting.Hosting.ScriptScope"/> を指定します。</param>
            <remarks>
            注釈: 1 つのオブジェクトのみを公開するようにして、他のオブジェクトはそれからアクセスできるようにしてください。
            リモーティングは両方のプロキシに対するサーバーオブジェクトが同じサーバーにあるかどうかを知る方法がないため、
            複数のオブジェクトの発行はクライアントが "remoteProxy1(remoteProxy2)" のような呼び出しをする場合に、問題を発生させる恐れがあります。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.RuntimeLabel">
            <summary>実行時に実際に使用される遷移先ラベルを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.RuntimeLabel.Index">
            <summary>遷移先の命令を示すインデックスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.RuntimeLabel.StackDepth">
            <summary>遷移先のスタックの深さを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.RuntimeLabel.ContinuationStackDepth">
            <summary>遷移先の継続スタックの深さを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.RuntimeLabel.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>指定された遷移先の情報を使用して、<see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="index">遷移先の命令を示すインデックスを指定します。</param>
            <param name="continuationStackDepth">遷移先の継続スタックの深さを指定します。</param>
            <param name="stackDepth">遷移先のスタックの深さを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.RuntimeLabel.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.BranchLabel">
            <summary>分岐先のラベルを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.BranchLabel.UnknownIndex">
            <summary>インデックスが不明な状態を示す値を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.BranchLabel.UnknownDepth">
            <summary>遷移先のスタックの深さが不明な状態を示す値を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.BranchLabel._forwardBranchFixups">
            <summary>このラベルを命令リストに追加した後に更新する必要があるこのラベルを対象とする分岐命令のインデックスのリスト</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchLabel.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.BranchLabel"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchLabel.ToRuntimeLabel">
            <summary>このラベルを <see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/> に変換します。</summary>
            <returns>このラベルに対する <see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchLabel.Mark(Microsoft.Scripting.Interpreter.InstructionList)">
            <summary>このラベルの対象を次に追加される命令の先頭に設定します。</summary>
            <param name="instructions">ラベルを設定する命令リストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchLabel.AddBranch(Microsoft.Scripting.Interpreter.InstructionList,System.Int32)">
            <summary>このラベルに分岐するオフセット分岐命令のオフセットを更新できるようにします。</summary>
            <param name="instructions">更新するオフセット分岐命令を含む命令リストを指定します。</param>
            <param name="branchIndex">このラベルに分岐するオフセット分岐命令を示す命令リスト内のインデックスを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchLabel.LabelIndex">
            <summary>このラベルのラベルリスト内でのインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchLabel.HasRuntimeLabel">
            <summary>このラベルに <see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/> が関連付けられているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchLabel.TargetIndex">
            <summary>このラベルが対象とする命令を示すインデックスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.AddInstruction">
            <summary><see cref="T:System.OverflowException"/> を発生させない数値型同士の加算命令を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.Instruction">
            <summary>インタプリタの命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Instruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Instruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Instruction.ToDebugString(System.Int32,System.Object,System.Func{System.Int32,System.Int32},System.Collections.Generic.IList{System.Object})">
            <summary>このオブジェクトのデバッグ用文字列表現を取得します。</summary>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
            <param name="cookie">デバッグ用 Cookie を指定します。</param>
            <param name="labelIndexer">ラベルを表すインデックスからラベルの遷移先インデックスを取得するデリゲートを指定します。</param>
            <param name="objects">デバッグ用 Cookie のリストを指定します。</param>
            <returns>デバッグ用文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Instruction.GetDebugCookie(Microsoft.Scripting.Interpreter.LightCompiler)">
            <summary>このオブジェクトの指定されたコンパイラに対するデバッグ用 Cookie を取得します。</summary>
            <param name="compiler">デバッグ用 Cookie を取得するコンパイラを指定します。</param>
            <returns>デバッグ用 Cookie。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.ConsumedContinuations">
            <summary>この命令で消費される継続の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.ProducedContinuations">
            <summary>この命令で生成される継続の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.StackBalance">
            <summary>この命令の前後でのスタックの要素数の増減を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.ContinuationsBalance">
            <summary>この命令の前後での継続の増減を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Instruction.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AddInstruction.Create(System.Type)">
            <summary>指定された数値型に対する適切な加算命令を作成します。</summary>
            <param name="type">加算対象の数値の型を指定します。</param>
            <returns>数値型に対する適切な加算命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AddInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AddInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AddInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.AddOvfInstruction">
            <summary><see cref="T:System.OverflowException"/> を発生させる数値型同士の加算命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AddOvfInstruction.Create(System.Type)">
            <summary>指定された数値型に対する適切な加算命令を作成します。</summary>
            <param name="type">加算対象の数値の型を指定します。</param>
            <returns>数値型に対する適切な加算命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AddOvfInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AddOvfInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AddOvfInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1">
            <summary>スタック内に存在する要素を使用して配列を新しく作成する命令を表します。</summary>
            <typeparam name="TElement">配列要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1.#ctor(System.Int32)">
            <summary>初期化に使用する要素数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="elementCount">初期化に使用され新しく作成される配列のサイズになる要素数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayInitInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NewArrayInstruction`1">
            <summary>スタックから要素数をポップすることでそのサイズの配列を作成する命令を表します。</summary>
            <typeparam name="TElement">配列要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.NewArrayInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction">
            <summary>スタックから各次元の要素数をポップすることで多次元配列を作成する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction.#ctor(System.Type,System.Int32)">
            <summary>配列要素の型および次元を指定して、<see cref="T:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="elementType">新しく作成される配列の要素型を指定します。</param>
            <param name="rank">新しく作成される配列の次元を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewArrayBoundsInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1">
            <summary>配列の要素を取得する命令を表します。</summary>
            <typeparam name="TElement">配列要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GetArrayItemInstruction`1.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1">
            <summary>配列の要素を設定する命令を表します。</summary>
            <typeparam name="TElement">配列要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.SetArrayItemInstruction`1.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.CallInstruction">
            <summary>メソッドを呼び出す命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Create(System.Reflection.MethodInfo)">
            <summary>指定されたメソッドを呼び出す適切な <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> クラスの派生クラスを作成します。</summary>
            <param name="info">呼び出すメソッドを指定します。</param>
            <returns>指定されたメソッドを呼び出す <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> クラスの派生クラス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Create(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>指定されたメソッドを呼び出す適切な <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> クラスの派生クラスを作成します。</summary>
            <param name="info">呼び出すメソッドを指定します。</param>
            <param name="parameters">メソッドの仮引数を表す <see cref="T:System.Reflection.ParameterInfo"/> の配列を指定します。</param>
            <returns>指定されたメソッドを呼び出す <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> クラスの派生クラス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.TryGetParameterOrReturnType(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[],System.Int32)">
            <summary>次の型またはこれ以上型が利用できない場合を表す <c>null</c> を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.SlowCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>適切な <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> 派生クラスのインスタンスを作成するためにリフレクションを使用します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.InvokeInstance(System.Object,System.Object[])">
            <summary>この命令が表すメソッドを指定されたインスタンスと引数を使用して呼び出します。</summary>
            <param name="instance">メソッドを呼び出すインスタンスを指定します。</param>
            <param name="args">メソッドを呼び出す引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object[])">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="args">メソッドを呼び出す引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke">
            <summary>この命令が表すメソッドを呼び出します。</summary>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <param name="arg4">メソッドを呼び出す 5 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <param name="arg4">メソッドを呼び出す 5 番目の引数を指定します。</param>
            <param name="arg5">メソッドを呼び出す 6 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <param name="arg4">メソッドを呼び出す 5 番目の引数を指定します。</param>
            <param name="arg5">メソッドを呼び出す 6 番目の引数を指定します。</param>
            <param name="arg6">メソッドを呼び出す 7 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <param name="arg4">メソッドを呼び出す 5 番目の引数を指定します。</param>
            <param name="arg5">メソッドを呼び出す 6 番目の引数を指定します。</param>
            <param name="arg6">メソッドを呼び出す 7 番目の引数を指定します。</param>
            <param name="arg7">メソッドを呼び出す 8 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.Invoke(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>この命令が表すメソッドを指定された引数を使用して呼び出します。</summary>
            <param name="arg0">メソッドを呼び出す 1 番目の引数を指定します。</param>
            <param name="arg1">メソッドを呼び出す 2 番目の引数を指定します。</param>
            <param name="arg2">メソッドを呼び出す 3 番目の引数を指定します。</param>
            <param name="arg3">メソッドを呼び出す 4 番目の引数を指定します。</param>
            <param name="arg4">メソッドを呼び出す 5 番目の引数を指定します。</param>
            <param name="arg5">メソッドを呼び出す 6 番目の引数を指定します。</param>
            <param name="arg6">メソッドを呼び出す 7 番目の引数を指定します。</param>
            <param name="arg7">メソッドを呼び出す 8 番目の引数を指定します。</param>
            <param name="arg8">メソッドを呼び出す 9 番目の引数を指定します。</param>
            <returns>メソッドの結果。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.FastCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>
            メソッド シグネチャ全体が既知のプリミティブ型であれば、高速に作成されます。
            シグネチャに非プリミティブ型があればすべての型で動作する <see cref="M:Microsoft.Scripting.Interpreter.CallInstruction.SlowCreate(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])"/> にフォールバックされます。
            
            この作成過程が高速であるのは、型の作成にリフレクション (MakeGenericType および Activator.CreateInstance) の使用を避けているからです。
            作成はシグネチャに沿ってそれぞれの型を取り出す一連のジェネリックメソッドの呼び出すを通して行われます。
            型をすべて使用したときに、構築された型をもつ適切な <see cref="T:Microsoft.Scripting.Interpreter.CallInstruction"/> が作成されます。
            
            1 つの軽減策は非プリミティブ型の戻り値の型に対して、緩いデリゲートのために object にフォールバックしていることです。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``1(System.Func{``0})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``2(System.Func{``0,``1})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``3(System.Func{``0,``1,``2})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``4(System.Func{``0,``1,``2,``3})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <typeparam name="T7">メソッドの 8 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheFunc``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9})">
            <summary>指定された戻り値のあるメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="TRet">メソッドの戻り値の型を指定します。</typeparam>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <typeparam name="T7">メソッドの 8 番目の引数の型を指定します。</typeparam>
            <typeparam name="T8">メソッドの 9 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction(System.Action)">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``1(System.Action{``0})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``2(System.Action{``0,``1})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``3(System.Action{``0,``1,``2})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``4(System.Action{``0,``1,``2,``3})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <typeparam name="T7">メソッドの 8 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CallInstruction.CacheAction``9(System.Action{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>指定された戻り値のないメソッドをキャッシュして、メソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を返します。</summary>
            <typeparam name="T0">メソッドの 1 番目の引数の型を指定します。</typeparam>
            <typeparam name="T1">メソッドの 2 番目の引数の型を指定します。</typeparam>
            <typeparam name="T2">メソッドの 3 番目の引数の型を指定します。</typeparam>
            <typeparam name="T3">メソッドの 4 番目の引数の型を指定します。</typeparam>
            <typeparam name="T4">メソッドの 5 番目の引数の型を指定します。</typeparam>
            <typeparam name="T5">メソッドの 6 番目の引数の型を指定します。</typeparam>
            <typeparam name="T6">メソッドの 7 番目の引数の型を指定します。</typeparam>
            <typeparam name="T7">メソッドの 8 番目の引数の型を指定します。</typeparam>
            <typeparam name="T8">メソッドの 9 番目の引数の型を指定します。</typeparam>
            <param name="method">キャッシュするメソッドを指定します。</param>
            <returns>キャッシュされたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.Info">
            <summary>呼び出すメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.ArgumentCount">
            <summary>インスタンスメソッドでは "this" も含むメソッドの引数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CallInstruction.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.OffsetInstruction">
            <summary>この命令からのオフセットにジャンプする命令の基底クラスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.OffsetInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.OffsetInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.OffsetInstruction.Fixup(System.Int32,System.Int32,System.Int32)">
            <summary>この命令のジャンプ先のオフセットが指定された値に書き換えられた <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/> を返します。</summary>
            <param name="offset">オフセットを書き換える値を指定します。</param>
            <param name="targetContinuationDepth">ジャンプ先の継続の深さを指定します。</param>
            <param name="targetStackDepth">ジャンプ先のスタックの深さを指定します。</param>
            <returns>オフセットが置き換えられた新しい <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.OffsetInstruction.ToDebugString(System.Int32,System.Object,System.Func{System.Int32,System.Int32},System.Collections.Generic.IList{System.Object})">
            <summary>このオブジェクトのデバッグ用文字列表現を取得します。</summary>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
            <param name="cookie">デバッグ用 Cookie を指定します。</param>
            <param name="labelIndexer">ラベルを表すインデックスからラベルの遷移先インデックスを取得するデリゲートを指定します。</param>
            <param name="objects">デバッグ用 Cookie のリストを指定します。</param>
            <returns>デバッグ用文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.OffsetInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.OffsetInstruction.Offset">
            <summary>この命令に相対的なジャンプ先のオフセットを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.OffsetInstruction.Cache">
            <summary>オフセットに対する命令のキャッシュを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.BranchFalseInstruction">
            <summary>スタックトップの値が <c>false</c> であればジャンプする分岐命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchFalseInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.BranchFalseInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchFalseInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchFalseInstruction.Cache">
            <summary>オフセットに対する命令のキャッシュを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchFalseInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.BranchTrueInstruction">
            <summary>スタックトップの値が <c>true</c> であればジャンプする分岐命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchTrueInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.BranchTrueInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchTrueInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchTrueInstruction.Cache">
            <summary>オフセットに対する命令のキャッシュを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchTrueInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction">
            <summary>スタックトップの値が <c>null</c> でなければジャンプするがスタックは消費しない分岐命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction.Cache">
            <summary>オフセットに対する命令のキャッシュを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.BranchInstruction">
            <summary>常に指定されたオフセットにジャンプする分岐命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchInstruction.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchInstruction.#ctor(System.Boolean,System.Boolean)">
            <summary>指定されたオプションを使用して、<see cref="T:Microsoft.Scripting.Interpreter.CoalescingBranchInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="hasResult">この分岐が結果をもつかどうかを示す値を指定します。</param>
            <param name="hasValue">この分岐に値が存在するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.BranchInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchInstruction.Cache">
            <summary>オフセットに対する命令のキャッシュを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.BranchInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.IndexedBranchInstruction">
            <summary>指定されたインデックスのラベルへのジャンプを表す分岐命令の基底クラスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IndexedBranchInstruction.#ctor(System.Int32)">
            <summary>ジャンプ先のラベルのインデックスを指定して、<see cref="T:Microsoft.Scripting.Interpreter.IndexedBranchInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="labelIndex">ジャンプ先のラベルのインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IndexedBranchInstruction.GetLabel(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームに対するこの命令のジャンプ先の <see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/> を取得します。</summary>
            <param name="frame">ラベルを取得するフレームを指定します。</param>
            <returns>この命令がジャンプするラベルを表す <see cref="T:Microsoft.Scripting.Interpreter.RuntimeLabel"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IndexedBranchInstruction.ToDebugString(System.Int32,System.Object,System.Func{System.Int32,System.Int32},System.Collections.Generic.IList{System.Object})">
            <summary>このオブジェクトのデバッグ用文字列表現を取得します。</summary>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
            <param name="cookie">デバッグ用 Cookie を指定します。</param>
            <param name="labelIndexer">ラベルを表すインデックスからラベルの遷移先インデックスを取得するデリゲートを指定します。</param>
            <param name="objects">デバッグ用 Cookie のリストを指定します。</param>
            <returns>デバッグ用文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IndexedBranchInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.IndexedBranchInstruction.LabelIndex">
            <summary>ジャンプ先のラベルのインデックスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.GotoInstruction">
            <summary>
            あらゆる式からジャンプできる goto 式を実装する命令を表します。
            これは goto 式とジャンプ先ラベルの間にあるノードが、プッシュされてまだ消費されていない評価スタックから値 (引数) をポップします。
            この命令は値を転送し、(値は最初の引数として使用されるので) 最初の引数のすぐ後にジャンプする限り、引数を評価するノードにジャンプできます。
            また、ブロックが子ノードを評価するように評価スタック上の値を集積しない場合、<see cref="T:System.Linq.Expressions.BlockExpression"/> の任意の子ノードにジャンプできます。
            </summary>
            <remarks>
            goto はジャンプ先ラベルまでに存在するあらゆる finally ブロックを実行する必要があります。
            <code>
            { 
                f(1, 2, try { g(3, 4, try { goto L } finally { ... }, 6) } finally { ... }, 7, 8)
                L: ... 
            }
            </code>
            この goto 式は 4 個の要素 (1, 2, 3, 4) を評価スタックに残したまま、ラベル L にジャンプします。
            ジャンプは両方の finally ブロックを実行する必要があります。1 番目はスタックレベル 4、2 番目はスタックレベル 2 にあります。
            そのため、命令はまず最初の finaly ブロックにジャンプして 2 個の要素をスタックからポップし、
            2 番目の finally ブロックを実行して別の 2 個の要素をスタックからポップしてから、命令ポインタをラベル L に設定します。
            
            goto はまた catch ハンドラからのジャンプで現在のスレッドが "中止を要求された状態" のときおよびその場合に限り <see cref="T:System.Threading.ThreadAbortException"/> を再スローする必要があります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GotoInstruction.Create(System.Int32,System.Boolean,System.Boolean)">
            <summary>指定されたラベルへジャンプする <see cref="T:Microsoft.Scripting.Interpreter.GotoInstruction"/> を作成します。</summary>
            <param name="labelIndex">ジャンプ先のラベルのインデックスを指定します。</param>
            <param name="hasResult">この分岐が結果をもつかどうかを示す値を指定します。</param>
            <param name="hasValue">この分岐が値を転送するかどうかを示す値を指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Interpreter.GotoInstruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GotoInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GotoInstruction.ConsumedContinuations">
            <summary>この命令で消費される継続の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GotoInstruction.ProducedContinuations">
            <summary>この命令で生成される継続の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GotoInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GotoInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction">
            <summary>try-finally ブロックの開始を示す命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction.Create(System.Int32)">
            <summary>指定された finally ラベルのインデックスを使用して、<see cref="T:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction"/> を作成します。</summary>
            <param name="labelIndex">finally ブロックを示すラベルのインデックスを指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EnterTryFinallyInstruction.ProducedContinuations">
            <summary>この命令で生成される継続の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EnterFinallyInstruction">
            <summary>finally ブロックの開始を示す命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.EnterFinallyInstruction.Instance">
            <summary>この命令の唯一のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterFinallyInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EnterFinallyInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EnterFinallyInstruction.ConsumedContinuations">
            <summary>この命令で消費される継続の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveFinallyInstruction">
            <summary>finally ブロックの終了を示す命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LeaveFinallyInstruction.Instance">
            <summary>この命令の唯一のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LeaveFinallyInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LeaveFinallyInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction">
            <summary>例外ハンドラの開始を示す命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction.Void">
            <summary>try ブロック本体が値をもたない場合のこの命令のインスタンスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction.NonVoid">
            <summary>try ブロック本体が値をもつ場合のこの命令のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EnterExceptionHandlerInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction">
            <summary>例外ハンドラの終了を示す命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction.Create(System.Int32,System.Boolean)">
            <summary>指定された try ブロックの終了ラベルを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction"/> を作成します。</summary>
            <param name="labelIndex">例外ハンドラを抜けた後に移動する try ブロックの終了位置を示すラベルのインデックスを指定します。</param>
            <param name="hasValue">例外ハンドラ本体が値をもつかどうかを示す値を指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LeaveExceptionHandlerInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LeaveFaultInstruction">
            <summary>fault 例外ハンドラの終了を示す命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LeaveFaultInstruction.NonVoid">
            <summary>try ブロック本体が値をもつ場合のこの命令のインスタンスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LeaveFaultInstruction.Void">
            <summary>try ブロック本体が値をもたない場合のこの命令のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LeaveFaultInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LeaveFaultInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LeaveFaultInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.ThrowInstruction">
            <summary>例外をスローする命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.ThrowInstruction.Throw">
            <summary>値をもち単純なスローを表す命令のインスタンスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.ThrowInstruction.VoidThrow">
            <summary>値をもたない単純なスローを表す命令のインスタンスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.ThrowInstruction.Rethrow">
            <summary>値をもち再スローを表す命令のインスタンスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.ThrowInstruction.VoidRethrow">
            <summary>値をもたない再スローを表す命令のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ThrowInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ThrowInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ThrowInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.SwitchInstruction">
            <summary>switch 分岐命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.SwitchInstruction.#ctor(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>値と移動先オフセットのマッピングを使用して、<see cref="T:Microsoft.Scripting.Interpreter.SwitchInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="cases">値から移動先オフセットへのマッピングを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.SwitchInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.SwitchInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.SwitchInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EnterLoopInstruction">
            <summary>ループの開始を示す命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterLoopInstruction.#ctor(System.Linq.Expressions.LoopExpression,Microsoft.Scripting.Interpreter.LocalVariables,System.Int32,System.Int32)">
            <summary>ループを表すノード、ローカル変数、コンパイル閾値、命令インデックスを使用して、<see cref="T:Microsoft.Scripting.Interpreter.EnterLoopInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="loop">開始されるループを表すノードを指定します。</param>
            <param name="locals">ローカル変数のセットを指定します。</param>
            <param name="compilationThreshold">インタプリタとして実行される最大実行回数を指定します。</param>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterLoopInstruction.FinishLoop(System.Int32)">
            <summary>ループ終了時点の命令インデックスを指定してループの範囲を通知します。</summary>
            <param name="loopEnd">ループ終了時点の命令インデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EnterLoopInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.CompiledLoopInstruction">
            <summary>コンパイルされたループ命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CompiledLoopInstruction.#ctor(System.Func{System.Object[],System.Runtime.CompilerServices.StrongBox{System.Object}[],Microsoft.Scripting.Interpreter.InterpretedFrame,System.Int32})">
            <summary>指定されたループを表すデリゲートを使用して、<see cref="T:Microsoft.Scripting.Interpreter.CompiledLoopInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="compiledLoop">実際にループを実行するデリゲートを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CompiledLoopInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DivInstruction">
            <summary>数値型同士の除算命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DivInstruction.Create(System.Type)">
            <summary>指定された数値型に対する適切な除算命令を作成します。</summary>
            <param name="type">除算対象の数値の型を指定します。</param>
            <returns>数値型に対する適切な除算命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DivInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DivInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DivInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DynamicSplatInstruction">
            <summary>多数の引数を使用する動的呼び出しを実装します。引数は <see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/> でラップされます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicSplatInstruction.#ctor(System.Int32,System.Runtime.CompilerServices.CallSite{System.Func{System.Runtime.CompilerServices.CallSite,Microsoft.Scripting.Runtime.ArgumentArray,System.Object}})">
            <summary>指定された引数の数と動的呼び出しサイトを使用して、<see cref="T:Microsoft.Scripting.Interpreter.DynamicSplatInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="argumentCount">動的呼び出しの引数の数を指定します。</param>
            <param name="site">動的呼び出しに使用される呼び出しサイトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicSplatInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicSplatInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DynamicSplatInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DynamicSplatInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.EqualInstruction">
            <summary>プリミティブ型の等値比較および参照型の参照比較を行う命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EqualInstruction.Create(System.Type)">
            <summary>指定されたプリミティブ型または参照型に対する適切な等値および参照比較命令を作成します。</summary>
            <param name="type">比較対象のプリミティブ型または参照型を指定します。</param>
            <returns>プリミティブ型または参照型に対する適切な等値および参照比較命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.EqualInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EqualInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.EqualInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction">
            <summary>静的フィールドの値をスタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction.#ctor(System.Reflection.FieldInfo)">
            <summary>値を読み込む静的フィールドを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="field">値を読み込む静的フィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadStaticFieldInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadFieldInstruction">
            <summary>インスタンスフィールドの値をスタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadFieldInstruction.#ctor(System.Reflection.FieldInfo)">
            <summary>値を読み込むインスタンスフィールドを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadFieldInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="field">値を読み込むインスタンスフィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadFieldInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadFieldInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadFieldInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.StoreFieldInstruction">
            <summary>インスタンスフィールドの値を設定する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreFieldInstruction.#ctor(System.Reflection.FieldInfo)">
            <summary>値を設定するインスタンスフィールドを使用して、<see cref="T:Microsoft.Scripting.Interpreter.StoreFieldInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="field">値を設定するインスタンスフィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreFieldInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreFieldInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreFieldInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction">
            <summary>静的フィールドの値を設定する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction.#ctor(System.Reflection.FieldInfo)">
            <summary>値を設定する静的フィールドを使用して、<see cref="T:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="field">値を設定する静的フィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreStaticFieldInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.GreaterThanInstruction">
            <summary>数値型同士の大なり比較命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GreaterThanInstruction.Create(System.Type)">
            <summary>指定された数値型に対する適切な大なり比較命令を作成します。</summary>
            <param name="type">比較対象の数値の型を指定します。</param>
            <returns>数値型に対する適切な大なり比較命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.GreaterThanInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GreaterThanInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.GreaterThanInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InstructionFactory">
            <summary>型に対応する命令の作成を支援します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.GetFactory(System.Type)">
            <summary>指定された型に基づく命令を作成できる <see cref="T:Microsoft.Scripting.Interpreter.InstructionFactory"/> を返します。</summary>
            <param name="type">命令に使用する型を指定します。</param>
            <returns>型に基づく命令を作成できる <see cref="T:Microsoft.Scripting.Interpreter.InstructionFactory"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.GetArrayItem">
            <summary>配列の要素を取得する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.SetArrayItem">
            <summary>配列の要素を設定する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.TypeIs">
            <summary>オブジェクトが指定された型に変換可能であるかどうかを判断する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.TypeAs">
            <summary>オブジェクトの指定された型への変換を試み、失敗した場合は <c>null</c> を返す命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.DefaultValue">
            <summary>型の既定値を取得する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.NewArray">
            <summary>指定された長さをもつ配列を作成する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory.NewArrayInit(System.Int32)">
            <summary>指定された数の要素によって新しく作成された配列を初期化する命令を作成します。</summary>
            <param name="elementCount">配列の初期化に使用する要素の数を指定します。</param>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InstructionFactory`1">
            <summary>型に対応する命令の作成を支援します。<see cref="T:Microsoft.Scripting.Interpreter.InstructionFactory"/> クラスの既定の実装を提供します。</summary>
            <typeparam name="T">命令に使用される型を指定します。</typeparam>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InstructionFactory`1.Factory">
            <summary>このクラスのインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.GetArrayItem">
            <summary>配列の要素を取得する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.SetArrayItem">
            <summary>配列の要素を設定する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.TypeIs">
            <summary>オブジェクトが指定された型に変換可能であるかどうかを判断する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.TypeAs">
            <summary>オブジェクトの指定された型への変換を試み、失敗した場合は <c>null</c> を返す命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.DefaultValue">
            <summary>型の既定値を取得する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.NewArray">
            <summary>指定された長さをもつ配列を作成する命令を作成します。</summary>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionFactory`1.NewArrayInit(System.Int32)">
            <summary>指定された数の要素によって新しく作成された配列を初期化する命令を作成します。</summary>
            <param name="elementCount">配列の初期化に使用する要素の数を指定します。</param>
            <returns>作成された命令を表す <see cref="T:Microsoft.Scripting.Interpreter.Instruction"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LessThanInstruction">
            <summary>数値型同士の小なり比較命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LessThanInstruction.Create(System.Type)">
            <summary>指定された数値型に対する適切な小なり比較命令を作成します。</summary>
            <param name="type">比較対象の数値の型を指定します。</param>
            <returns>数値型に対する適切な小なり比較命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LessThanInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LessThanInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LessThanInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.IBoxableInstruction">
            <summary>値を参照に置き換えることができる命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.IBoxableInstruction.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalAccessInstruction">
            <summary>ローカル変数にアクセスする命令の基本クラスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalAccessInstruction.#ctor(System.Int32)">
            <summary>アクセスするローカル変数を指定して、<see cref="T:Microsoft.Scripting.Interpreter.LocalAccessInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">アクセスするローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalAccessInstruction.ToDebugString(System.Int32,System.Object,System.Func{System.Int32,System.Int32},System.Collections.Generic.IList{System.Object})">
            <summary>このオブジェクトのデバッグ用文字列表現を取得します。</summary>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
            <param name="cookie">デバッグ用 Cookie を指定します。</param>
            <param name="labelIndexer">ラベルを表すインデックスからラベルの遷移先インデックスを取得するデリゲートを指定します。</param>
            <param name="objects">デバッグ用 Cookie のリストを指定します。</param>
            <returns>デバッグ用文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalAccessInstruction.Index">
            <summary>アクセスするローカル変数を示すインデックスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadLocalInstruction">
            <summary>指定されたローカル変数を評価スタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalInstruction.#ctor(System.Int32)">
            <summary>読み込むローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadLocalInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">読み込むローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalInstruction.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadLocalInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction">
            <summary>指定されたローカル変数が参照する値を評価スタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction.#ctor(System.Int32)">
            <summary>参照する値を読み込むローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">参照する値を読み込むローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadLocalBoxedInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction">
            <summary>指定されたローカル変数の値をクロージャから評価スタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction.#ctor(System.Int32)">
            <summary>読み込むローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">クロージャから値を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadLocalFromClosureInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction">
            <summary>指定されたローカル変数の参照をクロージャから評価スタックに読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction.#ctor(System.Int32)">
            <summary>読み込むローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">クロージャから参照を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadLocalFromClosureBoxedInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.AssignLocalInstruction">
            <summary>指定されたローカル変数に値を消費せずに割り当てる命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalInstruction.#ctor(System.Int32)">
            <summary>値を割り当てるローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.AssignLocalInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">値を割り当てるローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalInstruction.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.StoreLocalInstruction">
            <summary>指定されたローカル変数に値を格納する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreLocalInstruction.#ctor(System.Int32)">
            <summary>値を格納するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.StoreLocalInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">値を格納するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreLocalInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreLocalInstruction.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreLocalInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction">
            <summary>指定されたローカル変数が参照する値にスタックから値を消費せずに割り当てる命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction.#ctor(System.Int32)">
            <summary>参照する値を割り当てるローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">参照する値を割り当てるローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalBoxedInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction">
            <summary>指定されたローカル変数が参照する値にスタックから値を格納する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction.#ctor(System.Int32)">
            <summary>参照する値を格納するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">参照する値を格納するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.StoreLocalBoxedInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction">
            <summary>指定されたローカル変数にクロージャを使用して値を消費せずに割り当てる命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction.#ctor(System.Int32)">
            <summary>値を割り当てるローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">クロージャを使用して値を割り当てるローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.AssignLocalToClosureInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction">
            <summary>ローカル変数を初期化する命令の基本クラスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.#ctor(System.Int32)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference">
            <summary>ローカル変数を既定の参照 (<c>null</c>) で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference.#ctor(System.Int32)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Reference.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue">
            <summary>ローカル変数を指定された不変値で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue.#ctor(System.Int32,System.Object)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
            <param name="defaultValue">ローカル変数を初期化する不変値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableValue.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableBox">
            <summary>ローカル変数を指定された不変値への参照で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableBox.#ctor(System.Int32,System.Object)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableBox"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
            <param name="defaultValue">ローカル変数が初期化される参照が示す不変値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableBox.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ImmutableBox.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ParameterBox">
            <summary>ローカル変数を元の値への参照で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ParameterBox.#ctor(System.Int32)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ParameterBox"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ParameterBox.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.ParameterBox.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter">
            <summary>ローカル変数を元の値で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter.#ctor(System.Int32)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.Parameter.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue">
            <summary>ローカル変数を変更可能な値で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue.#ctor(System.Int32,System.Type)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
            <param name="type">初期化時にインスタンス化される型を指定します。この型には既定のコンストラクタが存在する必要があります。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue.BoxIfIndexMatches(System.Int32)">
            <summary>指定されたインデックスが命令が対象とするインデックスと一致した場合に値を参照に置き換えた命令を取得します。</summary>
            <param name="index">命令が対象とするインデックスであるかどうかを調べるインデックスを指定します。</param>
            <returns>インデックスが命令が対象とするインデックスと一致した場合は値を参照に置き換えた命令。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableValue.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableBox">
            <summary>ローカル変数を変更可能な値への参照で初期化する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableBox.#ctor(System.Int32,System.Type)">
            <summary>初期化するローカル変数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableBox"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">初期化するローカル変数を示すインデックスを指定します。</param>
            <param name="type">初期化時にインスタンス化される型を指定します。この型には既定のコンストラクタが存在する必要があります。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableBox.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InitializeLocalInstruction.MutableBox.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction">
            <summary>評価スタックから参照を取得してランタイム変数を取得する命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction.#ctor(System.Int32)">
            <summary>取得するランタイム変数の数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="count">取得するランタイム変数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.RuntimeVariablesInstruction.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InstructionArray">
            <summary>インタプリタの命令の配列を格納します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InstructionList">
            <summary>インタプリタの命令のリストを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.Emit(Microsoft.Scripting.Interpreter.Instruction)">
            <summary>指定された命令をこのリストに追加します。</summary>
            <param name="instruction">追加する命令を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.SetDebugCookie(System.Object)">
            <summary>指定されたデバッグ用 Cookie を最近追加された命令にアタッチします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.GetInstruction(System.Int32)">
            <summary>この命令リストの指定されたインデックスにある命令を取得します。</summary>
            <param name="index">取得する命令を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスにある命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.ToArray">
            <summary>この命令リスト全体を <see cref="T:Microsoft.Scripting.Interpreter.InstructionArray"/> として取得します。</summary>
            <returns>命令リスト全体を表す <see cref="T:Microsoft.Scripting.Interpreter.InstructionArray"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoad(System.Object)">
            <summary>指定されたオブジェクトをスタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="value">読み込むオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoad(System.Boolean)">
            <summary>指定されたブール値をスタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="value">読み込むブール値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoad(System.Object,System.Type)">
            <summary>指定されたオブジェクトを指定された型として読み込む命令をこの命令リストに追加します。</summary>
            <param name="value">読み込むオブジェクトを指定します。</param>
            <param name="type">読み込むオブジェクトの型を指定します。<c>null</c> を指定することができます。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitDup">
            <summary>評価スタックのスタックトップの値を複製する命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitPop">
            <summary>評価スタックのスタックトップの値を捨てる命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.SwitchToBoxed(System.Int32,System.Int32)">
            <summary>指定された命令インデックスにある命令が操作するローカルのインデックスが指定された値であれば、その命令を <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> を使用するものに置き換えます。</summary>
            <param name="index"><see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> を使用するものに置き換える命令が操作するローカルのインデックスを指定します。</param>
            <param name="instructionIndex">置き換える命令のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoadLocal(System.Int32)">
            <summary>指定されたインデックスのローカル変数の値を評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="index">評価スタックに値を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoadLocalBoxed(System.Int32)">
            <summary>指定されたインデックスの <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> で参照されたローカル変数の値を評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="index">評価スタックに参照された値を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.LoadLocalBoxed(System.Int32)">
            <summary>指定されたインデックスの <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> で参照されたローカル変数の値を評価スタックに読み込む命令を取得します。</summary>
            <param name="index">評価スタックに参照された値を読み込むローカル変数のインデックスを指定します。</param>
            <returns>参照されたローカル変数の値を評価スタックに読み込む命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoadLocalFromClosure(System.Int32)">
            <summary>指定されたインデックスのローカル変数の値をクロージャから評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="index">評価スタックに値を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoadLocalFromClosureBoxed(System.Int32)">
            <summary>指定されたインデックスのローカル変数の参照をクロージャから評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="index">評価スタックに参照を読み込むローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitAssignLocal(System.Int32)">
            <summary>指定されたインデックスのローカル変数に値を消費せずに割り当てる命令をこの命令リストに追加します。</summary>
            <param name="index">値が割り当てられるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitStoreLocal(System.Int32)">
            <summary>指定されたインデックスのローカル変数に値を格納する命令をこの命令リストに追加します。</summary>
            <param name="index">値が格納されるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitAssignLocalBoxed(System.Int32)">
            <summary>指定されたインデックスのローカル変数の参照先に値を消費せずに割り当てる命令をこの命令リストに追加します。</summary>
            <param name="index">値が参照先に割り当てられるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.AssignLocalBoxed(System.Int32)">
            <summary>指定されたインデックスのローカル変数の参照先に値を消費せずに割り当てる命令を取得します。</summary>
            <param name="index">値が参照先に割り当てられるローカル変数のインデックスを指定します。</param>
            <returns>ローカル変数の参照先に値を消費せずに割り当てる命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitStoreLocalBoxed(System.Int32)">
            <summary>指定されたインデックスのローカル変数の参照先に値を格納する命令をこの命令リストに追加します。</summary>
            <param name="index">値が参照先に格納されるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.StoreLocalBoxed(System.Int32)">
            <summary>指定されたインデックスのローカル変数の参照先に値を格納する命令を取得します。</summary>
            <param name="index">値が参照先に格納されるローカル変数のインデックスを指定します。</param>
            <returns>ローカル変数の参照先に値を格納する命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitAssignLocalToClosure(System.Int32)">
            <summary>指定されたインデックスのローカル変数にクロージャを使用して値を消費せずに割り当てる命令をこの命令リストに追加します。</summary>
            <param name="index">値が割り当てられるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitStoreLocalToClosure(System.Int32)">
            <summary>指定されたインデックスのローカル変数にクロージャを使用して値を格納する命令をこの命令リストに追加します。</summary>
            <param name="index">値が格納されるローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitInitializeLocal(System.Int32,System.Type)">
            <summary>指定されたインデックスのローカル変数を初期化する命令をこの命令リストに追加します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
            <param name="type">初期化するローカル変数の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitInitializeParameter(System.Int32)">
            <summary>指定されたインデックスのローカル変数を初期化する命令をこの命令リストに追加します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.Parameter(System.Int32)">
            <summary>指定されたインデックスのローカル変数を初期化する命令を取得します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
            <returns>引数を初期化する命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.ParameterBox(System.Int32)">
            <summary>指定されたインデックスのローカル変数を参照として初期化する命令を取得します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
            <returns>ローカル変数を参照として初期化する命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.InitReference(System.Int32)">
            <summary>指定されたインデックスのローカル変数を既定の参照で初期化する命令を取得します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
            <returns>ローカル変数を既定の参照で初期化する命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.InitImmutableRefBox(System.Int32)">
            <summary>指定されたローカル変数を <c>null</c> を参照する <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> で初期化する命令を取得します。</summary>
            <param name="index">初期化するローカル変数のインデックスを指定します。</param>
            <returns>ローカル変数を <c>null</c> を参照する <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> で初期化する命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNewRuntimeVariables(System.Int32)">
            <summary>指定された数のランタイム変数を作成する命令をこの命令リストに追加します。</summary>
            <param name="count">作成および取得するランタイム変数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitGetArrayItem(System.Type)">
            <summary>指定された型の配列の要素を取得する命令をこの命令リストに追加します。</summary>
            <param name="arrayType">取得する配列の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitSetArrayItem(System.Type)">
            <summary>指定された型の配列の要素を設定する命令をこの命令リストに追加します。</summary>
            <param name="arrayType">設定する配列の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNewArray(System.Type)">
            <summary>指定された要素型の配列を作成する命令をこの命令リストに追加します。</summary>
            <param name="elementType">作成する配列の要素の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNewArrayBounds(System.Type,System.Int32)">
            <summary>指定された要素型で指定された次元をもつ配列を作成する命令をこの命令リストに追加します。</summary>
            <param name="elementType">作成する配列の要素の型を指定します。</param>
            <param name="rank">作成する配列の次元を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNewArrayInit(System.Type,System.Int32)">
            <summary>指定された要素型の配列を指定された数の要素で初期化する命令をこの命令リストに追加します。</summary>
            <param name="elementType">作成する配列の要素の型を指定します。</param>
            <param name="elementCount">作成する配列を初期化する要素の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitAdd(System.Type,System.Boolean)">
            <summary>指定された型の加算命令をこの命令リストに追加します。</summary>
            <param name="type">加算対象のオペランドの型を指定します。</param>
            <param name="checked">加算時にオーバーフローをチェックするかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitSub(System.Type,System.Boolean)">
            <summary>指定された型の減算命令をこの命令リストに追加します。</summary>
            <param name="type">減算対象のオペランドの型を指定します。</param>
            <param name="checked">減算時にオーバーフローをチェックするかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitMul(System.Type,System.Boolean)">
            <summary>指定された型の乗算命令をこの命令リストに追加します。</summary>
            <param name="type">乗算対象のオペランドの型を指定します。</param>
            <param name="checked">乗算時にオーバーフローをチェックするかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitDiv(System.Type)">
            <summary>指定された型の除算命令をこの命令リストに追加します。</summary>
            <param name="type">除算対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitEqual(System.Type)">
            <summary>指定された型の等値比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNotEqual(System.Type)">
            <summary>指定された型の不等値比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLessThan(System.Type)">
            <summary>指定された型の小なり比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLessThanOrEqual(System.Type)">
            <summary>指定された型の以下比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitGreaterThan(System.Type)">
            <summary>指定された型の大なり比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitGreaterThanOrEqual(System.Type)">
            <summary>指定された型の以上比較命令をこの命令リストに追加します。</summary>
            <param name="type">比較対象のオペランドの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNumericConvertChecked(System.TypeCode,System.TypeCode)">
            <summary>オーバーフローをチェックする数値型の型変換命令をこの命令リストに追加します。</summary>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNumericConvertUnchecked(System.TypeCode,System.TypeCode)">
            <summary>オーバーフローをチェックしない数値型の型変換命令をこの命令リストに追加します。</summary>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNot">
            <summary>論理否定命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitDefaultValue(System.Type)">
            <summary>指定された型の既定値を評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="type">既定値を取得する型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitNew(System.Reflection.ConstructorInfo)">
            <summary>指定されたコンストラクタを使用してインスタンスを作成する命令をこの命令リストに追加します。</summary>
            <param name="constructorInfo">インスタンスの作成に使用されるコンストラクタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitCreateDelegate(Microsoft.Scripting.Interpreter.LightDelegateCreator)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を使用してデリゲートを作成する命令をこの命令リストに追加します。</summary>
            <param name="creator">デリゲートの作成を管理する <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitTypeEquals">
            <summary>オブジェクトの型が提供された型と等しいかどうかを判断する命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitTypeIs(System.Type)">
            <summary>オブジェクトが指定された型に変換できるかどうかを判断する命令をこの命令リストに追加します。</summary>
            <param name="type">判断する型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitTypeAs(System.Type)">
            <summary>オブジェクトの指定された型への変換を試み、失敗した場合は <c>null</c> を返す命令をこの命令リストに追加します。</summary>
            <param name="type">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLoadField(System.Reflection.FieldInfo)">
            <summary>指定されたフィールドの値を評価スタックに読み込む命令をこの命令リストに追加します。</summary>
            <param name="field">値が読み込まれるフィールドを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitStoreField(System.Reflection.FieldInfo)">
            <summary>指定されたフィールドに評価スタックから値を格納する命令をこの命令リストに追加します。</summary>
            <param name="field">値が格納されるフィールドを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitCall(System.Reflection.MethodInfo)">
            <summary>指定されたメソッドを呼び出す命令をこの命令リストに追加します。</summary>
            <param name="method">呼び出すメソッドを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitCall(System.Reflection.MethodInfo,System.Reflection.ParameterInfo[])">
            <summary>指定されたメソッドを呼び出す命令をこの命令リストに追加します。仮引数の配列を明示的に指定できます。</summary>
            <param name="method">呼び出すメソッドを指定します。</param>
            <param name="parameters">メソッドの仮引数を表す <see cref="T:System.Reflection.ParameterInfo"/> の配列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたデリゲート型および <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を使用して動的呼び出しを行う命令をこの命令リストに追加します。</summary>
            <param name="type">動的呼び出しサイトのデリゲート型を指定します。</param>
            <param name="binder">動的操作のバインディングを行う <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.CreateDynamicInstruction(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
            <summary>指定されたデリゲート型および <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を使用して動的呼び出しを行う命令を作成します。</summary>
            <param name="delegateType">動的呼び出しサイトのデリゲート型を指定します。</param>
            <param name="binder">動的操作のバインディングを行う <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を指定します。</param>
            <returns>作成された動的呼び出しを行う命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.MakeLabel">
            <summary>新しいラベルを作成します。</summary>
            <returns>作成されたラベル。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.FixupBranch(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>指定された位置にあるオフセット分岐命令のオフセットを決定します。</summary>
            <param name="branchIndex">オフセット分岐命令の位置を指定します。</param>
            <param name="offset">オフセット分岐命令の分岐先オフセットを指定します。</param>
            <param name="targetContinuationDepth">ジャンプ先の継続の深さを指定します。</param>
            <param name="targetStackDepth">ジャンプ先のスタックの深さを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.MarkRuntimeLabel">
            <summary>ランタイムラベルを現在の位置に設定して、ラベルインデックスを返します。</summary>
            <returns>マークされたランタイムラベルを表すインデックス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.MarkLabel(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>指定されたラベルを現在の位置に設定します。</summary>
            <param name="label">位置を設定するラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitGoto(Microsoft.Scripting.Interpreter.BranchLabel,System.Boolean,System.Boolean)">
            <summary>指定されたラベルにジャンプする goto 命令をこの命令リストに追加します。</summary>
            <param name="label">ジャンプ先のラベルを指定します。</param>
            <param name="hasResult">この分岐が結果をもつかどうかを示す値を指定します。</param>
            <param name="hasValue">この分岐が値を転送するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitBranch(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>指定されたラベルにジャンプする無条件分岐命令をこの命令リストに追加します。</summary>
            <param name="label">ジャンプ先のラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitBranch(Microsoft.Scripting.Interpreter.BranchLabel,System.Boolean,System.Boolean)">
            <summary>指定されたラベルにジャンプする無条件分岐命令をこの命令リストに追加します。</summary>
            <param name="label">ジャンプ先のラベルを指定します。</param>
            <param name="hasResult">この分岐が結果をもつかどうかを示す値を指定します。</param>
            <param name="hasValue">この分岐が値を転送するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitCoalescingBranch(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>スタックトップの値が null でなければ指定されたラベルにジャンプするがスタックは消費しない分岐命令をこの命令リストに追加します。</summary>
            <param name="leftNotNull">スタックトップの値が null でなければジャンプするラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitBranchTrue(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>スタックトップの値が <c>true</c> であれば指定されたラベルにジャンプする分岐命令をこの命令リストに追加します。</summary>
            <param name="elseLabel">スタックトップの値が <c>true</c> である場合にジャンプするラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitBranchFalse(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>スタックトップの値が <c>false</c> であれば指定されたラベルにジャンプする分岐命令をこの命令リストに追加します。</summary>
            <param name="elseLabel">スタックトップの値が <c>false</c> である場合にジャンプするラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitThrow">
            <summary>値をもつ単純なスロー命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitThrowVoid">
            <summary>値をもたない単純なスロー命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitRethrow">
            <summary>値をもつ再スロー命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitRethrowVoid">
            <summary>値をもたない再スロー命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitEnterTryFinally(Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>finally ブロックの開始位置を示すラベルを指定して try-finally ブロックの開始を示す命令をこの命令リストに追加します。</summary>
            <param name="finallyStartLabel">finally ブロックの開始位置を示すラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitEnterFinally">
            <summary>finally ブロックの開始を示す命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLeaveFinally">
            <summary>finally ブロックの終了を示す命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLeaveFault(System.Boolean)">
            <summary>try ブロック本体が値をもつかどうかを示す値を指定して、fault 例外ハンドラの終了を示す命令をこの命令リストに追加します。</summary>
            <param name="hasValue">try ブロック本体が値をもつかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitEnterExceptionHandlerNonVoid">
            <summary>try ブロック本体が値をもつ場合に例外ハンドラの開始を示す命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitEnterExceptionHandlerVoid">
            <summary>try ブロック本体が値をもたない場合に例外ハンドラの開始を示す命令をこの命令リストに追加します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitLeaveExceptionHandler(System.Boolean,Microsoft.Scripting.Interpreter.BranchLabel)">
            <summary>例外ハンドラの終了を示す命令をこの命令リストに追加します。</summary>
            <param name="hasValue">例外ハンドラ本体が値をもつかどうかを示す値を指定します。</param>
            <param name="tryExpressionEndLabel">try 式の終了を示すラベルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InstructionList.EmitSwitch(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>値と移動先オフセットのマッピングを指定して switch 命令をこの命令リストに追加します。</summary>
            <param name="cases">値から移動先オフセットへのマッピングを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InstructionList.Count">
            <summary>このリストに格納されている命令の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InstructionList.CurrentStackDepth">
            <summary>現在のスタックの深さを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InstructionList.CurrentContinuationsDepth">
            <summary>現在の継続の深さを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InstructionList.MaxStackDepth">
            <summary>この命令リストの命令を実行するのに必要なスタックの深さを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NotEqualInstruction">
            <summary>プリミティブ型の不等値比較および参照型の参照比較を行う命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NotEqualInstruction.Create(System.Type)">
            <summary>指定されたプリミティブ型または参照型に対する適切な不等値および参照比較命令を作成します。</summary>
            <param name="type">比較対象のプリミティブ型または参照型を指定します。</param>
            <returns>プリミティブ型または参照型に対する適切な不等値および参照比較命令。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NotEqualInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NotEqualInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NotEqualInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction">
            <summary>数値型同士の型変換を行う命令の基本クラスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.#ctor(System.TypeCode,System.TypeCode)">
            <summary>変換元および変換先の型を使用して、<see cref="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NumericConvertInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NumericConvertInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Unchecked">
            <summary>数値型同士のオーバーフローをチェックしない型変換命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Unchecked.#ctor(System.TypeCode,System.TypeCode)">
            <summary>変換元および変換先の型を使用して、<see cref="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Unchecked"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Unchecked.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Unchecked.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Checked">
            <summary>数値型同士のオーバーフローをチェックする型変換命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Checked.#ctor(System.TypeCode,System.TypeCode)">
            <summary>変換元および変換先の型を使用して、<see cref="T:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Checked"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Checked.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NumericConvertInstruction.Checked.InstructionName">
            <summary>この命令の名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadObjectInstruction">
            <summary>評価スタックに指定されたオブジェクトを読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadObjectInstruction.#ctor(System.Object)">
            <summary>読み込むオブジェクトを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadObjectInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">評価スタックに読み込むオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadObjectInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadObjectInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadObjectInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction">
            <summary>評価スタックにキャッシュされたオブジェクトを読み込む命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction.#ctor(System.UInt32)">
            <summary>読み込むオブジェクトのキャッシュインデックスを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">評価スタックに読み込むオブジェクトのキャッシュインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction.ToDebugString(System.Int32,System.Object,System.Func{System.Int32,System.Int32},System.Collections.Generic.IList{System.Object})">
            <summary>このオブジェクトのデバッグ用文字列表現を取得します。</summary>
            <param name="instructionIndex">この命令の命令インデックスを指定します。</param>
            <param name="cookie">デバッグ用 Cookie を指定します。</param>
            <param name="labelIndexer">ラベルを表すインデックスからラベルの遷移先インデックスを取得するデリゲートを指定します。</param>
            <param name="objects">デバッグ用 Cookie のリストを指定します。</param>
            <returns>デバッグ用文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LoadCachedObjectInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.PopInstruction">
            <summary>評価スタックのスタックトップの値を捨てる命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.PopInstruction.Instance">
            <summary>この命令の唯一のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.PopInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.PopInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DupInstruction">
            <summary>評価スタックのスタックトップの値を複製する命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.DupInstruction.Instance">
            <summary>この命令の唯一のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DupInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DupInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.CreateDelegateInstruction">
            <summary>指定された <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を使用するデリゲートの作成を行う命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CreateDelegateInstruction.#ctor(Microsoft.Scripting.Interpreter.LightDelegateCreator)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を使用して、<see cref="T:Microsoft.Scripting.Interpreter.CreateDelegateInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="delegateCreator">デリゲートの作成を管理する <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.CreateDelegateInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CreateDelegateInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.CreateDelegateInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NewInstruction">
            <summary>指定されたコンストラクタを実行することによるインスタンスの作成を行う命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewInstruction.#ctor(System.Reflection.ConstructorInfo)">
            <summary>指定されたコンストラクタを使用して、<see cref="T:Microsoft.Scripting.Interpreter.NewInstruction"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="constructor">作成されたインスタンスの初期化に使用されるコンストラクタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NewInstruction.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NewInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1">
            <summary>型の既定値を評価スタックに読み込む命令を表します。</summary>
            <typeparam name="T">既定値を取得する型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DefaultValueInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.TypeIsInstruction`1">
            <summary>オブジェクトが指定された型に変換可能かどうかを判断する命令を表します。</summary>
            <typeparam name="T">オブジェクトが変換される型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeIsInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.TypeIsInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeIsInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeIsInstruction`1.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeIsInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeIsInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.TypeAsInstruction`1">
            <summary>オブジェクトの指定された型への変換を試み、失敗した場合は <c>null</c> を返す命令を表します。</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeAsInstruction`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.TypeAsInstruction`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeAsInstruction`1.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeAsInstruction`1.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeAsInstruction`1.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeAsInstruction`1.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.TypeEqualsInstruction">
            <summary>オブジェクトの型が指定された型と等しいかどうかを判断する命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.TypeEqualsInstruction.Instance">
            <summary>この命令の唯一のインスタンスを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.TypeEqualsInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeEqualsInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.TypeEqualsInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.ILightCallSiteBinder">
            <summary>インタプリタによって認識される動的呼び出しサイトのバインダーを表します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ILightCallSiteBinder.AcceptsArgumentArray">
            <summary>このバインダーが <see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/> を受け入れることができるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightDelegateCreator">
            <summary>インタプリタによって解釈されるデリゲートの作成を管理します。これらのデリゲートは頻繁に実行される場合にのみコンパイルされます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.#ctor(Microsoft.Scripting.Interpreter.Interpreter,System.Linq.Expressions.LambdaExpression)">
            <summary>デリゲートを解釈するインタプリタと対象のラムダ式を指定して、<see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="interpreter">作成されるデリゲートを解釈するインタプリタを指定します。</param>
            <param name="lambda">作成されるデリゲートの対象となるラムダ式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.CreateDelegate">
            <summary>このラムダ式を対象とするデリゲートを作成します。</summary>
            <returns>作成されたデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.CreateDelegate(System.Runtime.CompilerServices.StrongBox{System.Object}[])">
            <summary>このラムダ式を対象とするデリゲートをクロージャ変数を指定して作成します。</summary>
            <param name="closure">対象となるデリゲートの実行環境を示すクロージャ変数を指定します。</param>
            <returns>作成されたデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.CreateCompiledDelegate(System.Runtime.CompilerServices.StrongBox{System.Object}[])">
            <summary>このラムダ式を対象とするコンパイル済みのデリゲートをクロージャ変数を指定して取得します。</summary>
            <param name="closure">対象となるデリゲートの実行環境を示すクロージャ変数を指定します。</param>
            <returns>コンパイル済みのデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightDelegateCreator.Compile(System.Object)">
            <summary>軽量ラムダ式に対するコンパイル済みのデリゲートを作成して、これ以降の呼び出しでインタプリタを実行する代わりにコンパイルされたコードを実行するように保存します。</summary>
            <param name="state"><see cref="M:ThreadPool.QueueUserWorkItem(WaitCallback)"/> にこのメソッドを渡すためのダミー引数です。</param>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightDelegateCreator.Interpreter">
            <summary>作成されるデリゲートを解釈するインタプリタを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightDelegateCreator.HasCompiled">
            <summary>デリゲートが JIT コードにコンパイルされたかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightDelegateCreator.SameDelegateType">
            <summary>コンパイルされたデリゲートがラムダ式と同じ型を持っているかどうかを示す値を取得します。<c>false</c> の場合、型は解釈のために変更されています。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambda">
            <summary>インタプリタがコンパイル不要で実行可能なデリゲートを作成できる軽量ラムダ式を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambda.#ctor(Microsoft.Scripting.Interpreter.LightDelegateCreator,System.Runtime.CompilerServices.StrongBox{System.Object}[],System.Int32)">
            <summary>デリゲート作成を管理する <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/>、クロージャ変数、コンパイルまでの実行回数を指定して、<see cref="T:Microsoft.Scripting.Interpreter.LightLambda"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="delegateCreator">デリゲート作成を管理する <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を指定します。</param>
            <param name="closure">対象となるデリゲートの実行環境を示すクロージャ変数を指定します。</param>
            <param name="compilationThreshold">インタプリタでコードが何回実行されればコンパイルされるかを示す閾値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambda.MakeDelegate(System.Type)">
            <summary>インタプリタを使用してコードを実行する指定された型のデリゲートを作成します。</summary>
            <param name="delegateType">デリゲートの型を指定します。</param>
            <returns>インタプリタによってコードが実行されるデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambda.Run(System.Object[])">
            <summary>引数を指定してこのラムダ式を実行し、結果が存在する場合は結果を返します。</summary>
            <param name="arguments">ラムダ式に与える引数を指定します。</param>
            <returns>ラムダ式に結果が存在する場合は結果。</returns>
        </member>
        <member name="E:Microsoft.Scripting.Interpreter.LightLambda.Compile">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.LightLambda"/> がコンパイルされた場合に発生します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.Interpreter">
            <summary>
            IL へのコンパイルと JIT での呼び出しの必要なく式ツリーを実行できる単純な forth 形式のスタックマシンを表します。
            これは非常に高速なコンパイル時間と悪い実行時パフォーマンスとのトレードオフです。
            少ない回数しか実行されないコードに対しては、これは良いバランスとなります。
            
            インタプリタのメインループは <see cref="M:Microsoft.Scripting.Interpreter.Interpreter.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)"/> メソッドに存在します。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.Interpreter.RethrowOnReturn">
            <summary>制御が戻った時に例外を再スローする命令インデックスを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.Interpreter.NoValue">
            <summary>値が存在しないことを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Interpreter.#ctor(System.Linq.Expressions.LambdaExpression,Microsoft.Scripting.Interpreter.LocalVariables,System.Collections.Generic.Dictionary{System.Linq.Expressions.LabelTarget,Microsoft.Scripting.Interpreter.BranchLabel},Microsoft.Scripting.Interpreter.InstructionArray,Microsoft.Scripting.Interpreter.ExceptionHandler[],Microsoft.Scripting.Interpreter.DebugInfo[],System.Int32)">
            <summary>指定された引数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.Interpreter"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="lambda">インタプリタによって実行されるラムダ式を表す <see cref="T:System.Linq.Expressions.LambdaExpression"/> を指定します。</param>
            <param name="locals">ローカル変数を表す <see cref="T:Microsoft.Scripting.Interpreter.LocalVariables"/> を指定します。</param>
            <param name="labelMapping"><see cref="T:System.Linq.Expressions.LabelTarget"/> から <see cref="T:Microsoft.Scripting.Interpreter.BranchLabel"/> へのマッピングを指定します。</param>
            <param name="instructions">実際に実行する命令を表す <see cref="T:Microsoft.Scripting.Interpreter.InstructionArray"/> を指定します。</param>
            <param name="handlers">例外ハンドラを表す <see cref="T:Microsoft.Scripting.Interpreter.ExceptionHandler"/> を指定します。</param>
            <param name="debugInfos">デバッグ情報を指定します。</param>
            <param name="compilationThreshold">インタプリタによって実行できる最大回数を指定します。この数値以上実行された場合ラムダ式はコンパイルされます。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Interpreter.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたスタックフレームで命令を実行します。</summary>
            <param name="frame">命令を実行するスタックフレームを指定します。</param>
            <remarks>
            インタプリタのスタックフレームはこのメソッドのそれぞれの CLR フレームがチェインのインタプリタのスタックフレームに対応するように Parent の参照によって連結されます。
            そのためインタプリタのフレームをこのメソッドのフレームに揃えることで、CLR スタックトレースをインタプリタのスタックトレースに結合することが可能になります。
            <see cref="M:Microsoft.Scripting.Interpreter.Interpreter.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)"/> メソッドのそれぞれの後続するフレームグループは単一のインタプリタのフレームに対応しています。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Interpreter.AbortThreadIfRequested(Microsoft.Scripting.Interpreter.InterpretedFrame,System.Int32)">
            <summary>要求されておりかつハンドラが <see cref="T:System.Threading.ThreadAbortException"/> を捕捉できない場合、スレッドを中止します。</summary>
            <param name="frame">現在命令を実行しているスタックフレームを指定します。</param>
            <param name="targetLabelIndex">このメソッドを呼び出した命令が遷移しようとしているラベルのインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.Interpreter.GotoHandler(Microsoft.Scripting.Interpreter.InterpretedFrame,System.Object,Microsoft.Scripting.Interpreter.ExceptionHandler@)">
            <summary>例外がハンドラで捕捉可能である場合ハンドラにジャンプします。それ以外の場合は "return and rethrow" ラベルにジャンプします。</summary>
            <param name="frame">現在命令を実行しているスタックフレームを指定します。</param>
            <param name="exception">捕捉可能なハンドラへ移動する例外を指定します。</param>
            <param name="handler">例外を捕捉可能なハンドラが返されます。</param>
            <returns>例外ハンドラまたは "return and rethrow" ラベルへのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.ClosureSize">
            <summary>クロージャのために使用される変数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.LocalCount">
            <summary>ローカル変数の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.CompileSynchronously">
            <summary>コンパイルを同期的に実行するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.Instructions">
            <summary>インタプリタが実行する命令を格納する <see cref="T:Microsoft.Scripting.Interpreter.InstructionArray"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.ClosureVariables">
            <summary>クロージャのために使用される変数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.Interpreter.LabelMapping">
            <summary><see cref="T:System.Linq.Expressions.LabelTarget"/> から <see cref="T:Microsoft.Scripting.Interpreter.BranchLabel"/> に対するマッピングを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DynamicInstructionN">
            <summary>任意のデリゲート型に対する動的呼び出しを行う命令を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.GetDynamicInstructionType(System.Type)">
            <summary>指定されたジェネリック デリゲート型の動的呼び出しサイトを使用する動的呼び出しを行う命令の型を取得します。</summary>
            <param name="delegateType">動的呼び出しを行う呼び出しサイトのデリゲート型を指定します。</param>
            <returns>動的呼び出しを行う命令の型。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.CreateUntypedInstruction(System.Runtime.CompilerServices.CallSiteBinder,System.Int32)">
            <summary>指定された <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を使用して、object 型の引数および戻り値を受け入れる動的呼び出し命令を返します。</summary>
            <param name="binder">動的呼び出しに使用される <see cref="T:System.Runtime.CompilerServices.CallSiteBinder"/> を指定します。</param>
            <param name="argCount">動的呼び出しの引数の数を指定します。</param>
            <returns>object 型の引数および戻り値を受け入れる動的呼び出し命令のインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.#ctor(System.Type,System.Runtime.CompilerServices.CallSite)">
            <summary>指定されたデリゲート型と呼び出しサイトを使用して、<see cref="T:Microsoft.Scripting.Interpreter.DynamicInstructionN"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="delegateType">動的呼び出しに使用するデリゲート型を指定します。</param>
            <param name="site">動的呼び出しサイトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.#ctor(System.Type,System.Runtime.CompilerServices.CallSite,System.Boolean)">
            <summary>指定されたデリゲート型、呼び出しサイトおよび値を返さないかどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Interpreter.DynamicInstructionN"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="delegateType">動的呼び出しに使用するデリゲート型を指定します。</param>
            <param name="site">動的呼び出しサイトを指定します。</param>
            <param name="isVoid">この動的呼び出しが値を返さないかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DynamicInstructionN.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DynamicInstructionN.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DynamicInstructionN.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor">
            <summary>
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> を訪問して、定数を <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> のフィールドへの直接アクセスに置き換えるリライターを表します。
            これは ExpressionQuoter が LambdaCompiler に行っていることとよく似ています。
            さらに、インタプリタがするようにデバッグ情報追跡を挿入しています。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._closureVars">
            <summary>ローカル変数のマッピング</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._closureArray">
            <summary>インタプリタからの <c>StrongBox&lt;Object&gt;[] closure</c> を格納している変数</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor._shadowedVars">
            <summary>
            ネストされたスコープで定義されている変数のスタック。
            ネストされたスコープが変数インスタンスの 1 つをシャドーイングする場合に変数を解決する場合は、ここをまず検索します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor.BindLambda(System.Linq.Expressions.LambdaExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.LocalVariable})">
            <summary>
            Walks the lambda and produces a higher order function, which can be used to bind the lambda to a closure array from the interpreter.
            ラムダ式を探索して高階関数を生成します。関数はラムダをインタプリタからのクロージャに束縛するために使用することができます。
            </summary>
            <param name="lambda">束縛するラムダ式を指定します。</param>
            <param name="closureVariables">外側のスコープで定義されてアクセスされる変数を指定します。</param>
            <returns>渡されたクロージャ配列に束縛するデリゲートの生成のために呼び出すことができるデリゲート。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambdaClosureVisitor.MergedRuntimeVariables">
            <summary>変数のリストを提供します。変数は値の読み込みおよび書き込みをサポートします。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.LightLambda"/> がコンパイルされた場合に発生するイベントにデータを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs.#ctor(System.Delegate)">
            <summary>コンパイル済みのデリゲートを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="compiled">コンパイル済みのデリゲートを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightLambdaCompileEventArgs.Compiled">
            <summary>コンパイル済みのデリゲートを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.NotInstruction">
            <summary>論理否定命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.NotInstruction.Instance">
            <summary>この命令の唯一のインスタンスを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.NotInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NotInstruction.ConsumedStack">
            <summary>この命令で消費されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.NotInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.ExceptionHandler">
            <summary>例外を捕捉するハンドラを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ExceptionHandler.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Type)">
            <summary>指定された引数を使用して、<see cref="T:Microsoft.Scripting.Interpreter.ExceptionHandler"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="start">例外を捕捉できる最初の命令を示すインデックスを指定します。</param>
            <param name="end">例外を捕捉できる最後の命令の次の命令を示すインデックスを指定します。</param>
            <param name="labelIndex">例外ハンドラの開始点を示すラベルのインデックスを指定します。</param>
            <param name="handlerStartIndex">例外ハンドラ開始後の最初の命令を示すインデックスを指定します。</param>
            <param name="exceptionType">捕捉できる例外の型を指定します。fault 節の場合は null を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ExceptionHandler.Matches(System.Type,System.Int32)">
            <summary>この例外ハンドラが指定された場所で発生した指定された型の例外を捕捉できるかどうかを判断します。</summary>
            <param name="exceptionType">発生した例外の型を指定します。</param>
            <param name="index">例外が発生した命令を示すインデックスを指定します。</param>
            <returns>指定された例外をこのハンドラが捕捉できる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ExceptionHandler.IsBetterThan(Microsoft.Scripting.Interpreter.ExceptionHandler)">
            <summary>この例外ハンドラが指定された例外ハンドラよりも捕捉に適しているかどうかを判断します。</summary>
            <param name="other">比較する例外ハンドラを指定します。</param>
            <returns>この例外ハンドラが指定された例外ハンドラよりも捕捉に適している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ExceptionHandler.IsInside(System.Int32)">
            <summary>指定された命令インデックスがこの例外ハンドラが例外を捕捉できる場所かどうかを判断します。</summary>
            <param name="index">調べる命令インデックスを指定します。</param>
            <returns>指定された命令インデックスがこの例外ハンドラが例外を捕捉できる場所の場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.ExceptionHandler.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.ExceptionType">
            <summary>捕捉できる例外の型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.StartIndex">
            <summary>例外を捕捉できる最初の命令を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.EndIndex">
            <summary>例外を捕捉できる最後の命令の次の命令を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.LabelIndex">
            <summary>例外ハンドラの開始点を示すラベルのインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.HandlerStartIndex">
            <summary>例外ハンドラ開始後の最初の命令を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.ExceptionHandler.IsFault">
            <summary>この例外ハンドラが fault 節を表すかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.DebugInfo">
            <summary>コードに付加されたデバッグ情報を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DebugInfo.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>指定された情報を使用して、<see cref="T:Microsoft.Scripting.Interpreter.DebugInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="startLine">ソースコード内の開始行を指定します。</param>
            <param name="endLine">ソースコード内の終了行を指定します。</param>
            <param name="index">デバッグ情報が付加された次の命令を示すインデックスを指定します。</param>
            <param name="fileName">デバッグ情報が示すソースファイルのファイル名を指定します。</param>
            <param name="clear">デバッグ情報がシーケンスポイントをクリアするために使用されるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DebugInfo.GetMatchingDebugInfo(Microsoft.Scripting.Interpreter.DebugInfo[],System.Int32)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Interpreter.DebugInfo"/> の配列の中から指定された命令インデックス以下の命令インデックスをもつ最後の要素を返します。</summary>
            <param name="debugInfos">指定された命令インデックス以下の最後の要素を検索する <see cref="T:Microsoft.Scripting.Interpreter.DebugInfo"/> の配列を指定します。</param>
            <param name="index">検索する命令インデックスを指定します。</param>
            <returns>指定された命令インデックス以下の命令インデックスをもつ最後の要素。そのような要素が存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.DebugInfo.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DebugInfo.StartLine">
            <summary>ソースコード内の開始行を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DebugInfo.EndLine">
            <summary>ソースコード内の終了行を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DebugInfo.Index">
            <summary>デバッグ情報が付加された次の命令を示すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DebugInfo.FileName">
            <summary>デバッグ情報が示すソースファイルのファイル名を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.DebugInfo.IsClear">
            <summary>デバッグ情報がシーケンスポイントをクリアするために使用されるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InterpretedFrameInfo">
            <summary>インタプリタのスタックフレームに関する情報を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrameInfo.#ctor(System.String,Microsoft.Scripting.Interpreter.DebugInfo)">
            <summary>実行しているメソッド名と実行している命令の近くにあるデバッグ情報を使用して、<see cref="T:Microsoft.Scripting.Interpreter.InterpretedFrameInfo"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="methodName">対象のスタックフレームが現在実行しているメソッドの名前を指定します。</param>
            <param name="info">対象のスタックフレームで現在実行している命令の近くにあるデバッグ情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrameInfo.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrameInfo.MethodName">
            <summary>対象のスタックフレームが実行してるメソッドの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrameInfo.DebugInfo">
            <summary>対象のスタックフレームで現在実行している命令の近くにあるデバッグ情報を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LightCompiler">
            <summary>式ツリーをインタプリタで実行可能な命令列にコンパイルする軽量コンパイラを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.#ctor(System.Int32)">
            <summary>コンパイルに必要なコード実行回数を指定して、<see cref="T:Microsoft.Scripting.Interpreter.LightCompiler"/> クラスの新しいスタンスを初期化します。</summary>
            <param name="compilationThreshold">JIT コードへのコンパイルまでに実行されるべき実行回数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.Unbox(System.Linq.Expressions.Expression)">
            <summary>指定された <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> を表す式から参照する値を取得する式を返します。</summary>
            <param name="strongBoxExpression">参照する値を取得する <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> を表す式を指定します。</param>
            <returns>指定された式から取得された値を表す式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.CompileTop(System.Linq.Expressions.LambdaExpression)">
            <summary>指定されたラムダ式をコンパイルすることで、インタプリタを用いるデリゲートを作成できる <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/> を返します。</summary>
            <param name="node">コンパイルするラムダ式を指定します。</param>
            <returns>インタプリタを用いるデリゲートを作成できる <see cref="T:Microsoft.Scripting.Interpreter.LightDelegateCreator"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.CompileGetVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対するローカル変数の値を取得する命令を命令リストに追加します。</summary>
            <param name="variable">取得される値を格納するローカル変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.CompileGetBoxedVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>指定されたボックス化された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対するローカル変数の値を取得する命令リストに追加します。</summary>
            <param name="variable">取得される値を格納するローカル変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.CompileSetVariable(System.Linq.Expressions.ParameterExpression,System.Boolean)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対するローカル変数に値を格納する命令をリストに追加します。</summary>
            <param name="variable">値を格納するローカル変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <param name="isVoid">格納された値を評価スタックからポップするかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LightCompiler.Compile(System.Linq.Expressions.Expression)">
            <summary>指定された式をコンパイルして、命令リストに対応する命令を追加します。</summary>
            <param name="expr">コンパイルする式を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightCompiler.Instructions">
            <summary>コンパイラが生成する疑似命令のリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LightCompiler.Locals">
            <summary>コンパイラが生成するローカル変数のリストを取得します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LightCompiler.ParameterVisitor._shadowedVars">
            <summary>
            A stack of variables that are defined in nested scopes.
            We search this first when resolving a variable in case a nested scope shadows one of our variable instances.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalVariable">
            <summary>単一のローカル変数またはクロージャ変数を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariable.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>割り当てるインデックスを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LocalVariable"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="index">変数を割り当てるインデックスを指定します。</param>
            <param name="closure">変数がクロージャであるかどうかを示す値を指定します。</param>
            <param name="boxed">変数がボックス化表現であるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariable.LoadFromArray(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>指定されたデータ配列またはクロージャデータからこのローカル変数のデータを表す式を返します。</summary>
            <param name="frameData">インタプリタのスタックフレームにおけるデータ配列を表す式を指定します。</param>
            <param name="closure">インタプリタのクロージャデータの配列を表す式を指定します。</param>
            <returns>このローカル変数の値を読み出す式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariable.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariable.Index">
            <summary>ローカル変数が割り当てられるインタプリタのデータ領域を表すインデックスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariable.IsBoxed">
            <summary>この変数がボックス化表現であるかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariable.InClosure">
            <summary>この変数がクロージャであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariable.InClosureOrBoxed">
            <summary>この変数がクロージャまたはボックス化表現であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalDefinition">
            <summary>ローカル変数のデータ配列上での場所と関連付けられた <see cref="T:System.Linq.Expressions.ParameterExpression"/> を格納します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LocalDefinition.Index">
            <summary>ローカル変数のデータ配列上の位置を示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.LocalDefinition.Parameter">
            <summary>ローカル変数が関連付けられた <see cref="T:System.Linq.Expressions.ParameterExpression"/> を示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalDefinition.#ctor(System.Int32,System.Linq.Expressions.ParameterExpression)">
            <summary>指定されたデータを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LocalDefinition"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="localIndex">ローカル変数のデータ配列上の位置を指定します。</param>
            <param name="parameter">ローカル変数が関連付けられた <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalVariables">
            <summary>ローカル変数のリストを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Interpreter.LocalVariables"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.DefineLocal(System.Linq.Expressions.ParameterExpression,System.Int32)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応する指定された命令インデックスからスコープが始まるローカル変数を定義します。</summary>
            <param name="variable">作成されるローカル変数に対応づけられる <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <param name="start">作成されるローカル変数のスコープの開始位置を示す命令インデックスを指定します。</param>
            <returns>ローカル変数定義を表す <see cref="T:Microsoft.Scripting.Interpreter.LocalDefinition"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.UndefineLocal(Microsoft.Scripting.Interpreter.LocalDefinition,System.Int32)">
            <summary>指定されたローカル変数定義によって示されるローカル変数のスコープを指定された命令インデックスで終了します。</summary>
            <param name="definition">スコープを終了するローカル変数を示すローカル変数定義を指定します。</param>
            <param name="end">ローカル変数のスコープの終了位置を示す命令インデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.Box(System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.InstructionList)">
            <summary>指定された変数表現をボックス化表現に切り替えます。</summary>
            <param name="variable">ボックス化表現に切り替える変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <param name="instructions">現在の変数を使用している命令が格納された <see cref="T:Microsoft.Scripting.Interpreter.InstructionList"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.GetLocalIndex(System.Linq.Expressions.ParameterExpression)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応するローカル変数のデータ配列内のインデックスを取得します。</summary>
            <param name="var">取得する位置にあるローカル変数が対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <returns><see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応するローカル変数のデータ配列内のインデックス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.TryGetLocalOrClosure(System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.LocalVariable@)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応するローカル変数またはクロージャ変数の取得を試みます。</summary>
            <param name="var">取得する変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <param name="local">取得されたローカル変数またはクロージャ変数を表す <see cref="T:Microsoft.Scripting.Interpreter.LocalVariable"/> が格納されます。</param>
            <returns>ローカル変数またはクロージャ変数が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.CopyLocals">
            <summary>現在のスコープで定義されているローカル変数のコピーを取得します。</summary>
            <returns>このスコープで定義されているローカル変数のコピー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.ContainsVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応する変数が現在のスコープで定義されているかどうかを判断します。</summary>
            <param name="variable">定義されているかどうかを調べる変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
            <returns>指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応する変数が現在のスコープで定義されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LocalVariables.AddClosureVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>現在のスコープに指定された <see cref="T:System.Linq.Expressions.ParameterExpression"/> に対応するクロージャ変数を追加します。</summary>
            <param name="variable">追加するクロージャ変数に対応する <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</param>
            <returns>追加されるクロージャ変数を表す <see cref="T:Microsoft.Scripting.Interpreter.LocalVariable"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariables.LocalCount">
            <summary>現在までに作成したローカル変数の個数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LocalVariables.ClosureVariables">
            <summary>外側のスコープで定義され現在のスコープで利用可能な変数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LocalVariables.VariableScope">
            <summary>変数が定義されている場所と使用される命令範囲を追跡します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LoopCompiler">
            <summary>ループ自体をデリゲートにコンパイルできるようにします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoopCompiler.#ctor(System.Linq.Expressions.LoopExpression,System.Collections.Generic.Dictionary{System.Linq.Expressions.LabelTarget,Microsoft.Scripting.Interpreter.BranchLabel},System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.LocalVariable},System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,Microsoft.Scripting.Interpreter.LocalVariable},System.Int32,System.Int32)">
            <summary>ループ、ラベルマッピング、ローカル変数、クロージャ変数、開始および終了時点での命令インデックスを使用して、<see cref="T:Microsoft.Scripting.Interpreter.LoopCompiler"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="loop">コンパイルするループを表す <see cref="T:System.Linq.Expressions.LoopExpression"/> を指定します。</param>
            <param name="labelMapping"><see cref="T:System.Linq.Expressions.LabelTarget"/> から <see cref="T:Microsoft.Scripting.Interpreter.BranchLabel"/> へのマッピングを指定します。</param>
            <param name="locals">ローカル変数に対する <see cref="T:System.Linq.Expressions.ParameterExpression"/> から <see cref="T:Microsoft.Scripting.Interpreter.LocalVariable"/> へのマッピングを指定します。</param>
            <param name="closureVariables">クロージャ変数に対する <see cref="T:System.Linq.Expressions.ParameterExpression"/> から <see cref="T:Microsoft.Scripting.Interpreter.LocalVariable"/> へのマッピングを指定します。</param>
            <param name="loopStartInstructionIndex">ループ開始時点での命令インデックスを指定します。</param>
            <param name="loopEndInstructionIndex">ループ終了時点での命令インデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LoopCompiler.CreateDelegate">
            <summary>ループをデリゲートにコンパイルします。</summary>
            <returns>コンパイルされたループを表すデリゲート。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.RuntimeVariables">
            <summary><see cref="T:System.Runtime.CompilerServices.IRuntimeVariables"/> の実装を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.RuntimeVariables.Create(System.Runtime.CompilerServices.IStrongBox[])">
            <summary>指定された参照に対して <see cref="T:Microsoft.Scripting.Interpreter.RuntimeVariables"/> を作成します。</summary>
            <param name="boxes"><see cref="T:Microsoft.Scripting.Interpreter.RuntimeVariables"/> を初期化する参照を指定します。</param>
            <returns>作成された <see cref="T:Microsoft.Scripting.Interpreter.RuntimeVariables"/></returns>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.InterpretedFrame">
            <summary>インタプリタによって実行されるプロシージャに対するスタックフレームを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.Interpreter">
            <summary>このスタックフレームのプロシージャを実行しているインタプリタを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.Data">
            <summary>このスタックフレームのデータ領域を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.Closure">
            <summary>このスタックフレームに提供されたクロージャを実現するデータを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.StackIndex">
            <summary>このスタックフレームのデータ領域で次にデータがプッシュされるインデックスを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.InstructionIndex">
            <summary>このスタックフレームで次に実行される命令を示すインデックスを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.FaultingInstruction">
            <summary>このスタックフレームで最近失敗した命令を示すインデックスを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.InterpretedFrame.CurrentAbortHandler">
            <summary>このスタックフレームに関連付けられた <see cref="T:System.Threading.ThreadAbortException"/> に対する例外ハンドラを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.#ctor(Microsoft.Scripting.Interpreter.Interpreter,System.Runtime.CompilerServices.StrongBox{System.Object}[])">
            <summary>実際に実行を行うインタプリタと外側のスコープから渡されるデータを使用して、<see cref="T:Microsoft.Scripting.Interpreter.InterpretedFrame"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="interpreter">実際にこのスタックフレームのプロシージャを実行するインタプリタを指定します。</param>
            <param name="closure">このスタックフレームに外側のスコープから提供されたデータを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.GetDebugInfo(System.Int32)">
            <summary>指定された命令インデックスに関連付けられたデバッグ情報を取得します。</summary>
            <param name="instructionIndex">デバッグ情報を取得する命令を示すインデックスを指定します。</param>
            <returns>命令に関連付けられたデバッグ情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Push(System.Object)">
            <summary>このスタックフレームのデータ領域に指定されたデータをプッシュします。</summary>
            <param name="value">プッシュするデータを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Push(System.Boolean)">
            <summary>このスタックフレームのデータ領域に指定されたブール値をプッシュします。</summary>
            <param name="value">プッシュするブール値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Push(System.Int32)">
            <summary>このスタックフレームのデータ領域に指定された 32 ビット符号付き整数をプッシュします。</summary>
            <param name="value">プッシュする 32 ビット符号付き整数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Pop">
            <summary>このスタックフレームのデータ領域からデータをポップします。</summary>
            <returns>ポップされたデータ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.SetStackDepth(System.Int32)">
            <summary>このスタックフレームのスタックの深さを指定された値に設定します。</summary>
            <param name="depth">設定するスタックの深さを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Peek">
            <summary>このスタックフレームのデータ領域から次にポップされる値を実際にはポップせずに返します。</summary>
            <returns>次にポップされる値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.IsInterpretedFrame(System.Diagnostics.StackFrame)">
            <summary>指定されたスタックフレームがインタプリタによって実行されているかどうかを判断します。</summary>
            <param name="frame">調べるスタックフレームを指定します。</param>
            <returns>スタックフレームがインタプリタによって実行されていた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.GroupStackFrames(System.Collections.Generic.IEnumerable{System.Diagnostics.StackFrame})">
            <summary>単一の CLR フレームが単一のインタプリタによるフレームを構成できるように、重複する CLR フレームを取り除きます。</summary>
            <param name="stackTrace">重複を含んでいる可能性のある <see cref="T:System.Diagnostics.StackFrame"/> のシーケンスを指定します。</param>
            <returns>重複が取り除かれた <see cref="T:System.Diagnostics.StackFrame"/> のシーケンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.GetStackTraceDebugInfo">
            <summary>このフレームおよびこのフレームを呼び出したすべてのフレームに対するスタックトレース用のデバッグ情報を取得します。</summary>
            <returns>すべてのフレームに対するスタックトレース用のデバッグ情報のシーケンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.SaveTraceToException(System.Exception)">
            <summary>指定された例外にこのスタックフレームに関するデバッグ情報を格納します。</summary>
            <param name="exception">デバッグ情報を格納する例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.GetExceptionStackTrace(System.Exception)">
            <summary>指定された例外にスタックトレース情報が存在していればその情報を取得します。</summary>
            <param name="exception">スタックトレース情報を取得する例外を指定します。</param>
            <returns>取得されたスタックトレース情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Enter">
            <summary>このスタックフレームの実行の開始を示し、現在のスレッドで実行されているフレーム情報を更新します。</summary>
            <returns>スタックフレームからの実行を終了する場合に使用する情報。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Leave(System.Runtime.CompilerServices.StrongBox{Microsoft.Scripting.Interpreter.InterpretedFrame})">
            <summary>このスタックフレームの実行の終了を示し、現在のスレッドで実行されているフレーム情報を更新します。</summary>
            <param name="currentFrame"><see cref="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Enter"/> で返された情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.RemoveContinuation">
            <summary>このスタックフレームに最後にプッシュした継続に関する情報を削除します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.PushContinuation(System.Int32)">
            <summary>指定された継続をこのスタックフレームにプッシュします。</summary>
            <param name="continuation">プッシュする継続を行うラベルのインデックスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.YieldToCurrentContinuation">
            <summary>このスタックフレームに最後にプッシュされた継続に処理を譲ります。</summary>
            <returns>処理を譲る命令に対するオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.YieldToPendingContinuation">
            <summary>このスタックフレームで最後にプッシュされた継続または保留中の継続に処理を譲ります。</summary>
            <returns>処理を譲る命令に対するオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.PushPendingContinuation">
            <summary>保留中の継続をデータ領域にプッシュします。この操作は 2 個の新しいブロックを作成します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.PopPendingContinuation">
            <summary>保留中の継続をデータ領域からポップします。この操作は 2 個のブロックを消費します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.VoidGoto(System.Int32)">
            <summary>値を渡さずに指定されたインデックスのラベルにジャンプします。</summary>
            <param name="labelIndex">ジャンプ先のラベルを示すインデックスを指定します。</param>
            <returns>ジャンプ先のラベル対象のオフセット。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Goto(System.Int32,System.Object)">
            <summary>値を渡して指定されたインデックスのラベルにジャンプします。</summary>
            <param name="labelIndex">ジャンプ先のラベルを示すインデックスを指定します。</param>
            <param name="value">ジャンプの際に渡す値を指定します。</param>
            <returns>ジャンプ先のラベル対象のオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrame.CurrentFrame">
            <summary>現在のスレッドで実行されているプロシージャのスタックフレームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrame.Lambda">
            <summary>このスタックフレームで実行しているコードの基になったラムダ式を表す <see cref="T:System.Linq.Expressions.LambdaExpression"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrame.Parent">
            <summary>このスタックフレームに対応するプロシージャを呼び出したプロシージャに対するスタックフレームを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrame.GotoMethod">
            <summary><see cref="M:Microsoft.Scripting.Interpreter.InterpretedFrame.Goto(System.Int32,System.Object)"/> を表す <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.InterpretedFrame.VoidGotoMethod">
            <summary><see cref="M:Microsoft.Scripting.Interpreter.InterpretedFrame.VoidGoto(System.Int32)"/> を表す <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.LastFaultingLineExpression">
            <summary>最近実行に失敗した行番号の式ツリーノードを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.#ctor(System.Linq.Expressions.Expression)">
            <summary>指定された行番号を表す式を使用して、<see cref="T:Microsoft.Scripting.Interpreter.LastFaultingLineExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="lineNumberExpression">行番号を表す式ツリーノードを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。
            ノードを単純化できない場合、このメソッドは例外をスローします。
            </summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.NodeType">
            <summary>
            この式のノード型を返します。
            拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:Microsoft.Scripting.Interpreter.LastFaultingLineExpression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Interpreter.UpdateStackTraceInstruction">
            <summary>フレームの最近失敗した命令を表す行番号をプッシュする命令を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Interpreter.UpdateStackTraceInstruction._debugInfos">
            <summary>行番号を検索するデバッグ情報を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Interpreter.UpdateStackTraceInstruction.Run(Microsoft.Scripting.Interpreter.InterpretedFrame)">
            <summary>指定されたフレームを使用してこの命令を実行し、次に実行する命令へのオフセットを返します。</summary>
            <param name="frame">命令によって使用する情報が含まれているフレームを指定します。</param>
            <returns>次に実行する命令へのオフセット。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Interpreter.UpdateStackTraceInstruction.ProducedStack">
            <summary>この命令で生成されるスタック中の要素の数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Numerics.BigInteger">
            <summary>
            arbitrary precision integers
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Numerics.BigInteger.Log">
            <summary>
            Calculates the natural logarithm of the BigInteger.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Numerics.BigInteger.Log10">
            <summary>
            Calculates log base 10 of a BigInteger.
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Numerics.BigInteger.ToByteArray">
            <summary>
            Return the value of this BigInteger as a little-endian twos-complement
            byte array, using the fewest number of bytes possible. If the value is zero,
            return an array of one byte whose element is 0x00.
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Numerics.BigInteger.Sign">
            <summary>
            Return the sign of this BigInteger: -1, 0, or 1.
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ArgumentArray">
            <summary>
            動的サイトに渡されたすべての引数を Func/Action デリゲートが受け入れることができるそれより多くの引数でラップします。
            そのようなサイトに対する規則を生成するバインダーはまず引数をラップ解除して、それらに対するバインディングを実行する必要があります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ArgumentArray.#ctor(System.Object[],System.Int32,System.Int32)">
            <summary>引数全体と実際に利用する範囲を使用して、<see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="arguments">引数全体を指定します。</param>
            <param name="first"><paramref name="arguments"/> の中で引数として使用される最初の位置を示す 0 から始まるインデックスを指定します。</param>
            <param name="count">実際に引数として使用する要素の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ArgumentArray.GetMetaObject(System.Linq.Expressions.Expression,System.Int32)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/> を表すインスタンスの指定されたインデックスにある引数を取得する <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="parameter">引数を取得する <see cref="T:Microsoft.Scripting.Runtime.ArgumentArray"/> のインスタンスを表す式を指定します。</param>
            <param name="index">取得する引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定された位置にある引数を示す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ArgumentArray.Count">
            <summary>引数を表すリストから実際に使用される要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ArgumentArray.Item(System.Int32)">
            <summary>指定されたインデックスにある引数を取得します。</summary>
            <param name="index">取得する引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定されたインデックスにある引数。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.BindingRestrictionsHelpers">
            <summary>バインディング制約を取得するためのヘルパー メソッドを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BindingRestrictionsHelpers.GetRuntimeTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
            <summary>指定された型に対して式をチェックするバインディング制約を取得します。</summary>
            <param name="expr">制約をテストする式を指定します。</param>
            <param name="type">制約する型を指定します。型には <see cref="T:Microsoft.Scripting.Runtime.DynamicNull"/> も含まれます。</param>
            <returns>型に対して式をチェックするバインディング制約。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BindingRestrictionsHelpers.GetRuntimeTypeRestriction(System.Dynamic.DynamicMetaObject)">
            <summary>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> の式を制限型に制約するバインディング制約を取得します。</summary>
            <param name="obj">制約をかける <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>指定された <see cref="T:System.Dynamic.DynamicMetaObject"/> の制約とその式を制限型に制約するバインディング制約をマージした制約。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicDelegateCreator">
            <summary>
            提供された <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> によって利用可能になる DLR バインダーを使用するオブジェクトからデリゲートへの変換のサポートを提供します。
            主にこれは <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> を実装するオブジェクトから適切なデリゲート型への変換をサポートします。
            提供されたオブジェクトがすでに適切な型のデリゲートである場合は、単純にデリゲートが返されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicDelegateCreator.#ctor(Microsoft.Scripting.Runtime.LanguageContext)">
            <summary><see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.DynamicDelegateCreator"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="languageContext">デリゲートへの変換に使用される DLR バインダーを提供する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.DynamicDelegateCreator._cache">
            <summary>メソッドシグネチャに基づいて共有される動的に生成されたデリゲートのテーブルです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicDelegateCreator.GetDelegate(System.Object,System.Type)">
            <summary>
            このオブジェクトを非動的コードから (コードコンテキストなしで) 呼び出すために使用される可能性のある指定されたシグネチャのデリゲートを作成します。
            スタブは適切な変換/ボックス化を実行したり、オブジェクトを呼び出したりするために作成されます。
            スタブはこのオブジェクトの言語コンテキスト内で実行される必要があります。
            </summary>
            <param name="callableObject">デリゲートに変換されるオブジェクトを指定します。</param>
            <param name="delegateType">変換先のデリゲート型を指定します。</param>
            <returns>変換されたデリゲート。</returns>
            <exception cref="T:Microsoft.Scripting.ArgumentTypeException">
            オブジェクトは <see cref="T:System.Delegate"/> 型のサブクラスですが、指定された型ではありません。
            または、オブジェクトは <see cref="T:System.Dynamic.IDynamicMetaObjectProvider"/> を実装していません。
            </exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DynamicDelegateCreator.DelegateInfo.EmitClrCallStub(System.Reflection.Emit.ILGenerator)">
            <summary> CLR 呼び出しを受信して、動的言語コードを呼び出すスタブを生成します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DynamicNull">
            <summary><c>null</c> である値を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IDebuggableGenerator">
            <summary>デバッグ可能なジェネレータを表します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.IDebuggableGenerator.YieldMarkerLocation">
            <summary>現在の状態に対する yield マーカーの位置を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers">
            <summary>
            ランタイムで一般に使用されるメソッドを提供します。
            このクラスには一般に使用されるプリミティブ型のキャッシュされたボックス化表現を共有できるように提供するメソッドが含まれます。
            これは <see cref="T:System.Object"/> を普遍的な型として使用するほとんどの動的言語で有用です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.ShiftParamsArray``1(``0[],System.Int32)">
            <summary>指定された配列引数を指定された数左にシフトした残りを返します。</summary>
            <param name="array">シフトする配列を指定します。</param>
            <param name="count">シフトする個数を指定します。</param>
            <returns><paramref name="count"/> 分左にシフトされた配列。シフト量が範囲を超えている場合は空の配列を返します。</returns>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.True">
            <summary>ボックス化されたブール値 <c>true</c> を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.False">
            <summary>ボックス化されたブール値 <c>false</c> を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.BooleanToObjectMethod">
            <summary><see cref="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.BooleanToObject(System.Boolean)"/> メソッドを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.Int32ToObjectMethod">
            <summary><see cref="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.Int32ToObject(System.Int32)"/> メソッドを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.Int32ToObject(System.Int32)">
            <summary>指定された 32 ビット符号付き整数のキャッシュされたボックス化表現を利用できる場合はそれを返します。それ以外の場合は引数をボックス化します。</summary>
            <param name="value">ボックス化する 32 ビット符号付き整数を指定します。</param>
            <returns>ボックス化された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.BooleanToObject(System.Boolean)">
            <summary>指定されたブール値に対応するボックス化表現を返します。</summary>
            <param name="value">ボックス化するブール値を指定します。</param>
            <returns>ボックス化された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.CharToString(System.Char)">
            <summary>指定された文字を 1 文字のみを含む文字列に変換します。キャッシュが使用できる場合はキャッシュを返します。</summary>
            <param name="ch">文字列に変換する文字を指定します。</param>
            <returns>変換された文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.GetPrimitiveDefaultValue(System.Type)">
            <summary>指定されたプリミティブ型の既定値を返します。</summary>
            <param name="type">既定値を返すプリミティブ型を指定します。</param>
            <returns>プリミティブ型の既定値。プリミティブ型以外が指定された場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.SimpleTypeError(System.String)">
            <summary>指定されたメッセージを使用して、新しい <see cref="T:Microsoft.Scripting.ArgumentTypeException"/> を作成します。</summary>
            <param name="message">例外を説明するメッセージを指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.CannotConvertError(System.Type,System.Object)">
            <summary>指定された型への変換が失敗したことを示す例外を返します。</summary>
            <param name="toType">変換先の型を指定します。</param>
            <param name="value">変換を試みた値を指定します。</param>
            <returns>変換が失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.SimpleAttributeError(System.String)">
            <summary>指定された属性が見つからないことを示す例外を返します。</summary>
            <param name="message">例外を説明するメッセージを指定します。</param>
            <returns>属性が見つからないことを示す <see cref="T:System.MissingMemberException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.ReadOnlyAssignError(System.Boolean,System.String)">
            <summary>指定されたフィールドまたはプロパティが読み取り専用であるのに代入を試みた場合にエラーを発生させます。</summary>
            <param name="field">フィールドへの代入であるかどうかを示す値を指定します。</param>
            <param name="name">代入を試みたメンバの名前を指定します。</param>
            <returns>なし。</returns>
            <exception cref="T:System.MissingMemberException">フィールドまたはプロパティは読み取り専用です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.CreateInstance``1">
            <summary>指定された型のインスタンスを作成します。</summary>
            <typeparam name="T">インスタンスを作成する型を指定します。</typeparam>
            <returns>指定された型のインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.CreateArray``1(System.Int32)">
            <summary>指定された型の配列を作成します。</summary>
            <typeparam name="T">配列の要素の型を指定します。</typeparam>
            <param name="args">配列の要素数を指定します。</param>
            <returns>新しく作成された指定された型の配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.MakeIncorrectBoxTypeError(System.Type,System.Object)">
            <summary><see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> が予期されたにもかかわらず別の型を受け取ったことを示す例外を返します。</summary>
            <param name="type">予期していた <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> の型引数を指定します。</param>
            <param name="received">実際に受け取った値を指定します。</param>
            <returns><see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> が予期されたにもかかわらず別の型を受け取ったことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ScriptingRuntimeHelpers.InitializeSymbols(System.Type)">
            <summary>指定された型の <see cref="T:Microsoft.Scripting.SymbolId"/> 型の静的フィールドにそのフィールドの名前を表す <see cref="T:Microsoft.Scripting.SymbolId"/> を設定します。</summary>
            <param name="t"><see cref="T:Microsoft.Scripting.SymbolId"/> 型の静的フィールドを名前で初期化する型を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Ast.GeneratorExpression">
            <summary>
            <see cref="T:System.Collections.IEnumerable"/>、<see cref="T:System.Collections.Generic.IEnumerable`1"/>、<see cref="T:System.Collections.IEnumerator"/>、または <see cref="T:System.Collections.Generic.IEnumerator`1"/> 型のパラメータのないジェネレータを表します。
            その本体は一連の <see cref="T:Microsoft.Scripting.Ast.YieldExpression"/> を格納することができます。
            列挙子上でのそれぞれの MoveNext への呼び出しでジェネレータに入り、YieldReturn または YieldBreak に当たるまで式を実行します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.GeneratorExpression.#ctor(System.String,System.Type,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
            <summary>指定された名前、型、ラベル、本体を使用して、<see cref="T:Microsoft.Scripting.Ast.GeneratorExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">このジェネレータの名前を指定します。</param>
            <param name="type">このジェネレータの型を指定します。</param>
            <param name="label">このジェネレータから処理を譲るラベルを指定します。</param>
            <param name="body">このジェネレータの本体を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.GeneratorExpression.Reduce">
            <summary>このノードをより単純な式に変形します。</summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.GeneratorExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。</summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.CanReduce">
            <summary>ノードをより単純なノードに変形できることを示します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.NodeType">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> のノード型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.Name">
            <summary>このジェネレータの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.Target">
            <summary>YieldBreak または YieldReturn 式によって使用されるこのジェネレータから処理を譲るラベルを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.Body">
            <summary>このジェネレータの本体を取得します。本体には YieldBreak または YieldReturn 式を含めることができます。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.GeneratorExpression.IsEnumerable">
            <summary>このジェネレータの型が <see cref="T:System.Collections.IEnumerable"/> または <see cref="T:System.Collections.Generic.IEnumerable`1"/> と等しいかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.GeneratorRewriter">
            <summary>
            yield return または yield break を見つけた場合に、このリライターは含んでいるブロック、スコープ、そして式をスタックの状態にしたがって平坦化します。
            すべての遭遇したスコープはジェネレータのクロージャに昇格された変数を持つため、yield を越えて生き残らせることができます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.GeneratorRewriter.MakeAssign(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>変数への値の代入を作成します。内部へのジャンプを可能にするために、可能な限り右辺の代入をプッシュします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.GeneratorRewriter.IsConstant(System.Linq.Expressions.Expression)">
            <summary>評価されているかどうかにかかわらず式に定数が残っていれば <c>true</c> を返します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.SymbolConstantExpression">
            <summary>
            <see cref="T:Microsoft.Scripting.SymbolId"/> の定数を表します。
            このノードは縮退可能であり、GlobalOptimizedRewriter によってリライトされます。
            TODO: このノードは GlobalOptimizedRewriter が厳密に型指定されたノードを認識し、リライトできるようにするために存在します。
            機能が必要なくなれば、このクラスも取り除かれます。
            この型が取り除かれた場合、<see cref="M:Microsoft.Scripting.Ast.Utils.Constant(System.Object)"/> の戻り値の型は <see cref="T:System.Linq.Expressions.Expression"/> から <see cref="T:System.Linq.Expressions.ConstantExpression"/> に変更します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SymbolConstantExpression.#ctor(Microsoft.Scripting.SymbolId)">
            <summary>指定された <see cref="T:Microsoft.Scripting.SymbolId"/> を使用して、<see cref="T:Microsoft.Scripting.Ast.SymbolConstantExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">このノードに格納する <see cref="T:Microsoft.Scripting.SymbolId"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SymbolConstantExpression.Reduce">
            <summary>
            このノードをより単純な式に変形します。
            <see cref="P:Microsoft.Scripting.Ast.SymbolConstantExpression.CanReduce"/> が <c>true</c> を返す場合、これは有効な式を返します。
            このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。
            </summary>
            <returns>単純化された式。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.SymbolConstantExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。
            ノードを単純化できない場合、このメソッドは例外をスローします。
            </summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SymbolConstantExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:Microsoft.Scripting.Ast.SymbolConstantExpression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SymbolConstantExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SymbolConstantExpression.NodeType">
            <summary>
            この式のノード型を返します。
            拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.SymbolConstantExpression.Value">
            <summary>このノードに格納されている <see cref="T:Microsoft.Scripting.SymbolId"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.Candidate">
            <summary>オーバーロード解決の際の選択された候補を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.Candidate.Equivalent">
            <summary>2 つの候補は等価です。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.Candidate.One">
            <summary>1 番目の候補が選択されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.Candidate.Two">
            <summary>2 番目の候補が選択されました。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Calls.Candidate.Ambiguous">
            <summary>2 つの候補はあいまいであり選択できません。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Calls.CandidateExtension">
            <summary><see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> に対する拡張メソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateExtension.Chosen(Microsoft.Scripting.Actions.Calls.Candidate)">
            <summary>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> において選択済みであるかどうかを示す値を取得します。</summary>
            <param name="candidate">判断する <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> を指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> が選択済みである場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Calls.CandidateExtension.TheOther(Microsoft.Scripting.Actions.Calls.Candidate)">
            <summary>現在の <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> のもう片方を表す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> を取得します。</summary>
            <param name="candidate">もう片方を取得する <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/> を指定します。</param>
            <returns>もう片方を表す <see cref="T:Microsoft.Scripting.Actions.Calls.Candidate"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Ast.YieldExpression">
            <summary>
            <see cref="T:Microsoft.Scripting.Ast.GeneratorExpression"/> で YieldBreak または YieldReturn を表します。
            <see cref="P:Microsoft.Scripting.Ast.YieldExpression.Value"/> が <c>null</c> でない場合は YieldReturn、それ以外の場合は YieldBreak を表します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.YieldExpression.#ctor(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Int32)">
            <summary>ラベル、渡される値、マーカーを使用して、<see cref="T:Microsoft.Scripting.Ast.YieldExpression"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="target">このジェネレータから譲られるラベルを指定します。</param>
            <param name="value">ラベルで渡される値を指定します。</param>
            <param name="yieldMarker">デバッグ用のマーカーを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.YieldExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
            ノードを単純化し、単純化された式の <paramref name="visitor"/> デリゲートを呼び出します。
            ノードを単純化できない場合、このメソッドは例外をスローします。
            </summary>
            <param name="visitor"><see cref="T:System.Func`2"/> のインスタンス。</param>
            <returns>走査中の式、またはツリー内で走査中の式と置き換える式</returns>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.CanReduce">
            <summary>
            ノードをより単純なノードに変形できることを示します。
            これが <c>true</c> を返す場合、<see cref="M:System.Linq.Expressions.Expression.Reduce"/> を呼び出して単純化された形式を生成できます。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.Type">
            <summary>この <see cref="T:System.Linq.Expressions.Expression"/> が表す式の静的な型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.NodeType">
            <summary>
            この式のノード型を返します。
            拡張ノードは、このメソッドをオーバーライドするとき、<see cref="F:System.Linq.Expressions.ExpressionType.Extension"/> を返す必要があります。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.Value">
            <summary>この式から譲られる値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.Target">
            <summary>このジェネレータから譲られるラベルを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.YieldExpression.YieldMarker">
            <summary>デバッグ用のマーカーを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.AssemblyGen">
            <summary>アセンブリの構築を支援します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.#ctor(System.Reflection.AssemblyName,System.String,System.String,System.Boolean)">
            <summary>名前、出力ディレクトリ、ファイル拡張子、デバッグ可能かどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Generation.AssemblyGen"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">アセンブリの一意識別子を表す <see cref="T:System.Reflection.AssemblyName"/> クラスのインスタンスを指定します。</param>
            <param name="outDir">作成されるアセンブリが出力されるディレクトリを指定します。<c>null</c> を指定するとアセンブリをファイルに出力しません。</param>
            <param name="outFileExtension">出力されるアセンブリ ファイルの拡張子を指定します。既定の拡張子は dll です。</param>
            <param name="debuggable">作成されるアセンブリがデバッグ可能かどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.#ctor(System.Reflection.AssemblyName,System.String,System.String,System.Boolean,System.Reflection.PortableExecutableKinds,System.Reflection.ImageFileMachine)">
            <summary>名前、出力ディレクトリ、ファイル拡張子、デバッグ可能かどうか、出力されるコードの性質および対象のプラットフォームを使用して、<see cref="T:Microsoft.Scripting.Generation.AssemblyGen"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">アセンブリの一意識別子を表す <see cref="T:System.Reflection.AssemblyName"/> クラスのインスタンスを指定します。</param>
            <param name="outDir">作成されるアセンブリが出力されるディレクトリを指定します。<c>null</c> を指定するとアセンブリをファイルに出力しません。</param>
            <param name="outFileExtension">出力されるアセンブリ ファイルの拡張子を指定します。既定の拡張子は dll です。</param>
            <param name="debuggable">作成されるアセンブリがデバッグ可能かどうかを示す値を指定します。</param>
            <param name="peKind">出力されるアセンブリ ファイルに含まれるコードの性質を示す値を指定します。</param>
            <param name="machine">出力されるアセンブリ ファイルが対象とするプラットフォームを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.SetDebuggableAttributes">
            <summary>作成されるアセンブリに <see cref="T:System.Diagnostics.DebuggableAttribute"/> 属性を付与します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.AddResourceFile(System.String,System.String,System.Reflection.ResourceAttributes)">
            <summary>作成されるアセンブリにリソースを追加します。</summary>
            <param name="name">リソースの名前を指定します。</param>
            <param name="file">リソースとして追加するファイルの名前を指定します。</param>
            <param name="attribute">追加するリソースの属性を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.SaveAssembly">
            <summary>アセンブリをファイルに出力します。</summary>
            <returns>出力されたアセンブリファイルのフルパス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.Verify">
            <summary>アセンブリを PEVerify ツールを使用して検証します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.PeVerifyAssemblyFile(System.String)">
            <summary>指定されたパスにあるアセンブリを PEVerify ツールを使用して検証します。</summary>
            <param name="fileLocation"></param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.DefinePublicType(System.String,System.Type,System.Boolean)">
            <summary>アセンブリに指定された名前をもつ新しいパブリック型を定義して、型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/> を返します。</summary>
            <param name="name">アセンブリに定義する型の名前を指定します。</param>
            <param name="parent">これから定義される型によって拡張される型を指定します。</param>
            <param name="preserveName">指定された名前を保持するかどうかを示す値を指定します。</param>
            <returns>定義された型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.DefineType(System.String,System.Type,System.Reflection.TypeAttributes,System.Boolean)">
            <summary>アセンブリに指定された名前をもつ新しい型を定義して、型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/> を返します。</summary>
            <param name="name">アセンブリに定義する型の名前を指定します。</param>
            <param name="parent">これから定義される型によって拡張される型を指定します。</param>
            <param name="attr">定義される型の属性を指定します。</param>
            <param name="preserveName">指定された名前を保持するかどうかを示す値を指定します。</param>
            <returns>定義された型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.SetEntryPoint(System.Reflection.MethodInfo,System.Reflection.Emit.PEFileKinds)">
            <summary>アセンブリのエントリポイントを設定し、構築するポータブル実行可能 (PE) ファイルの型を定義します。</summary>
            <param name="mi">アセンブリのエントリポイントとなるメソッドを指定します。</param>
            <param name="kind">構築するアセンブリ実行ファイルの型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.AssemblyGen.MakeDelegateType(System.String,System.Type[],System.Type)">
            <summary>指定された名前、パラメータ型、戻り値の型を使用して、アセンブリにデリゲートを作成します。</summary>
            <param name="name">作成するデリゲートの名前を指定します。</param>
            <param name="parameters">作成するデリゲートのパラメータ型を指定します。</param>
            <param name="returnType">作成するデリゲートの戻り値の型を指定します。</param>
            <returns>作成されたデリゲートを表す <see cref="T:System.Type"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Generation.AssemblyGen.IsDebuggable">
            <summary>作成するアセンブリがデバッグ可能かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.AssemblyGen.AssemblyBuilder">
            <summary>アセンブリを詳細に定義できる <see cref="P:Microsoft.Scripting.Generation.AssemblyGen.AssemblyBuilder"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.AssemblyGen.ModuleBuilder">
            <summary>動的アセンブリ内のモジュールを定義する <see cref="P:Microsoft.Scripting.Generation.AssemblyGen.ModuleBuilder"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ConstantCheck">
            <summary>式ツリーに関する定数比較を行うメソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ConstantCheck.Check(System.Linq.Expressions.Expression,System.Object)">
            <summary>式が指定された値の定数であるかどうかを調べます。</summary>
            <param name="expression">調べる式を指定します。</param>
            <param name="value">比較する定数値を指定します。</param>
            <returns>指定された式が指定された値の定数である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ConstantCheck.IsConstant(System.Linq.Expressions.Expression,System.Object)">
            <summary>式が指定された値の定数であるかどうかを調べます。</summary>
            <param name="e">調べる式を指定します。</param>
            <param name="value">比較する定数値を指定します。</param>
            <returns>指定された式が指定された値の定数である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ConstantCheck.IsNull(System.Linq.Expressions.Expression)">
            <summary>式が定数 <c>null</c> であるかどうかを調べます。</summary>
            <param name="e">調べる式を指定します。</param>
            <returns>指定された式が定数値 <c>null</c> である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Generation.DynamicILGen">
            <summary>動的なメソッドの本体の構築を支援し、メソッドまたはデリゲートを取得できるようにします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.DynamicILGen.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>動的メソッドの本体を構築できる <see cref="T:System.Reflection.Emit.ILGenerator"/> を使用して、<see cref="T:Microsoft.Scripting.Generation.DynamicILGen"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="il">動的メソッドの本体を構築できる <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.DynamicILGen.CreateDelegate``1">
            <summary>動的メソッドを完了して、作成されたメソッドを表す指定された型のデリゲートを作成します。</summary>
            <typeparam name="TDelegate">取得するデリゲートの型を指定します。</typeparam>
            <returns>作成されたメソッドを表すデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.DynamicILGen.CreateDelegate``1(System.Reflection.MethodInfo@)">
            <summary>動的メソッドを完了して、作成されたメソッドを表す指定された型のデリゲートおよびメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
            <typeparam name="TDelegate">取得するデリゲートの型を指定します。</typeparam>
            <param name="mi">作成されたメソッドの情報が格納されます。</param>
            <returns>作成されたメソッドを表すデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.DynamicILGen.Finish">
            <summary>動的メソッドを完了して、作成されたメソッドの情報を格納する <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
            <returns>作成されたメソッドの情報を表す <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Generation.DynamicILGen.Generator">
            <summary>この動的メソッドを構築する <see cref="T:System.Reflection.Emit.ILGenerator"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ILGeneratorExtensions">
            <summary><see cref="T:System.Reflection.Emit.ILGenerator"/> に関するヘルパー メソッドを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitLoadArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>指定された位置にある引数を評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="index">
            スタックに読み込む引数のインデックスを指定します。
            インスタンス メソッドの場合、0 は this オブジェクトを表し、引数リストの左端の引数はインデックス 1 になります。
            静的メソッドの場合は 0 が引数リストの左端の引数を表します。
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は 0 以上である必要があります。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitLoadArgAddress(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>指定された位置にある引数のアドレスを評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="index">
            スタックに読み込むアドレスに対応する引数のインデックスを指定します。
            インスタンス メソッドの場合、0 は this オブジェクトを表し、引数リストの左端の引数はインデックス 1 になります。
            静的メソッドの場合は 0 が引数リストの左端の引数を表します。
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は 0 以上である必要があります。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitStoreArg(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>評価スタックの一番上にある値を指定された位置にある引数に格納する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="index">
            スタックから値が格納される引数のインデックスを指定します。
            インスタンス メソッドの場合、0 は this オブジェクトを表し、引数リストの左端の引数はインデックス 1 になります。
            静的メソッドの場合は 0 が引数リストの左端の引数を表します。
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は 0 以上である必要があります。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitLoadValueIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックにすでに読み込まれているアドレスにある指定された型のオブジェクトをスタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">スタックに読み込むオブジェクトの型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitStoreValueIndirect(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックにすでに読み込まれている指定された型のオブジェクトを、同じくスタックに読み込まれているアドレスに格納する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">スタックからアドレスに格納するオブジェクトの型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitLoadElement(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックにすでに読み込まれている配列の、同じくスタックに読み込まれているインデックスにある要素をスタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">配列からスタックに読み込む要素の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitStoreElement(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックにすでに読み込まれている配列の、同じくスタックに読み込まれているインデックスにある要素に、スタックから値を格納する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">スタックから配列に格納する要素の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitType(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックに指定された <see cref="T:System.Type"/> を読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">スタックに読み込む <see cref="T:System.Type"/> オブジェクトを指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitUnbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>評価スタックにすでに読み込まれているオブジェクトを指定された型にボックス化解除する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">ボックス化解除された後のオブジェクトの型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitPropertyGet(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>指定された型にある指定された名前のパブリック プロパティの値を評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">値を読み込むプロパティが存在する型を指定します。</param>
            <param name="name">値を読み込むプロパティの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="name"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="name"/> という名前のパブリック プロパティは存在しません。</exception>
            <exception cref="T:System.InvalidOperationException">プロパティは書き込み専用で読み取ることはできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitPropertyGet(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo)">
            <summary>指定された <see cref="T:System.Reflection.PropertyInfo"/> によって表されるプロパティの値を評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="pi">値を読み込むプロパティを表す <see cref="T:System.Reflection.PropertyInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="pi"/> が <c>null</c> です。</exception>
            <exception cref="T:System.InvalidOperationException">プロパティは書き込み専用で読み取ることはできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitPropertySet(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>指定された型にある指定された名前のパブリック プロパティに評価スタックの一番上にある値を設定する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">値を設定するプロパティが存在する型を指定します。</param>
            <param name="name">値を設定するプロパティの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="name"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="name"/> という名前のパブリック プロパティは存在しません。</exception>
            <exception cref="T:System.InvalidOperationException">プロパティは読み取り専用で書き込むことはできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitPropertySet(System.Reflection.Emit.ILGenerator,System.Reflection.PropertyInfo)">
            <summary>指定された <see cref="T:System.Reflection.PropertyInfo"/> によって表されるプロパティに評価スタックの一番上にある値を設定する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="pi">値を設定するプロパティを表す <see cref="T:System.Reflection.PropertyInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="pi"/> が <c>null</c> です。</exception>
            <exception cref="T:System.InvalidOperationException">プロパティは読み取り専用で書き込むことはできません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitFieldAddress(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>指定された <see cref="T:System.Reflection.FieldInfo"/> によって表されるフィールドのアドレスを評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="fi">アドレスを読み込むフィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="fi"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitFieldGet(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>指定された型にある指定された名前のパブリック フィールドの値を評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">値を読み込むフィールドが存在する型を指定します。</param>
            <param name="name">値を読み込むフィールドの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="name"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="name"/> という名前のパブリック フィールドは存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitFieldSet(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>指定された型にある指定された名前のパブリック フィールドに評価スタックの一番上にある値を設定する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">値を設定するフィールドが存在する型を指定します。</param>
            <param name="name">値を設定するフィールドの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="name"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="name"/> という名前のパブリック フィールドは存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitFieldGet(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>指定された <see cref="T:System.Reflection.FieldInfo"/> によって表されるフィールドの値を評価スタックに読み込む命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="fi">値を読み込むフィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="fi"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitFieldSet(System.Reflection.Emit.ILGenerator,System.Reflection.FieldInfo)">
            <summary>指定された <see cref="T:System.Reflection.FieldInfo"/> によって表されるフィールドに評価スタックの一番上にある値を設定する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="fi">値を設定するフィールドを表す <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="fi"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitNew(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>指定された <see cref="T:System.Reflection.ConstructorInfo"/> によって表されるコンストラクタを呼び出してオブジェクトの新しいインスタンスを作成する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="ci">オブジェクトの初期化に使用するコンストラクタを表す <see cref="T:System.Reflection.ConstructorInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="ci"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">作成しようとした型にはジェネリック型パラメータが含まれています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitNew(System.Reflection.Emit.ILGenerator,System.Type,System.Type[])">
            <summary>指定された型にある指定された引数の型に一致するパブリック コンストラクタを呼び出してオブジェクトの新しいインスタンスを作成する命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">作成するオブジェクトの型を指定します。</param>
            <param name="paramTypes">オブジェクトの初期化に使用するコンストラクタの引数の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="paramTypes"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="paramTypes"/> の引数と一致するパブリック コンストラクタが存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitCall(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>指定された <see cref="T:System.Reflection.MethodInfo"/> によって表されるメソッドを呼び出す命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="mi">呼び出すメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="mi"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitCall(System.Reflection.Emit.ILGenerator,System.Type,System.String)">
            <summary>指定された型にある指定された名前のパブリック メソッドを呼び出す命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">呼び出すメソッドが存在する型を指定します。</param>
            <param name="name">呼び出すメソッドの名前を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/> または <paramref name="name"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に <paramref name="name"/> という名前のパブリック メソッドは存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitCall(System.Reflection.Emit.ILGenerator,System.Type,System.String,System.Type[])">
            <summary>指定された型にある指定された名前の指定された引数の型に一致するパブリック メソッドを呼び出す命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">呼び出すメソッドが存在する型を指定します。</param>
            <param name="name">呼び出すメソッドの名前を指定します。</param>
            <param name="paramTypes">呼び出すメソッドの引数の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="type"/>、<paramref name="name"/> または <paramref name="paramTypes"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> に指定されたシグネチャと一致するパブリック メソッドは存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitNull(System.Reflection.Emit.ILGenerator)">
            <summary><c>null</c> を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitString(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>指定された文字列を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする文字列を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="value"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitBoolean(System.Reflection.Emit.ILGenerator,System.Boolean)">
            <summary>指定されたブール値を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュするブール値を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitChar(System.Reflection.Emit.ILGenerator,System.Char)">
            <summary>指定された文字を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする文字を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitByte(System.Reflection.Emit.ILGenerator,System.Byte)">
            <summary>指定された 8 ビット符号なし整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 8 ビット符号なし整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitSByte(System.Reflection.Emit.ILGenerator,System.SByte)">
            <summary>指定された 8 ビット符号付き整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 8 ビット符号付き整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitInt16(System.Reflection.Emit.ILGenerator,System.Int16)">
            <summary>指定された 16 ビット符号付き整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 16 ビット符号付き整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitUInt16(System.Reflection.Emit.ILGenerator,System.UInt16)">
            <summary>指定された 16 ビット符号なし整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 16 ビット符号なし整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitInt32(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>指定された 32 ビット符号付き整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 32 ビット符号付き整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitUInt32(System.Reflection.Emit.ILGenerator,System.UInt32)">
            <summary>指定された 32 ビット符号なし整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 32 ビット符号なし整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitInt64(System.Reflection.Emit.ILGenerator,System.Int64)">
            <summary>指定された 64 ビット符号付き整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 64 ビット符号付き整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitUInt64(System.Reflection.Emit.ILGenerator,System.UInt64)">
            <summary>指定された 64 ビット符号なし整数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 64 ビット符号なし整数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitDouble(System.Reflection.Emit.ILGenerator,System.Double)">
            <summary>指定された倍精度浮動小数点数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする倍精度浮動小数点数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitSingle(System.Reflection.Emit.ILGenerator,System.Single)">
            <summary>指定された単精度浮動小数点数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする単精度浮動小数点数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.ShouldLdtoken(System.Type)">
            <summary>指定された型を <c>Ldtoken</c> 命令を使用して読み込んだ方がよいかどうかを判断します。</summary>
            <param name="t">判断する型を指定します。</param>
            <returns>指定された型を <c>Ldtoken</c> 命令を使用して読み込んだ方がよい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.ShouldLdtoken(System.Reflection.MethodBase)">
            <summary>指定されたメソッドまたはコンストラクタを <c>Ldtoken</c> 命令を使用して読み込んだ方がよいかどうかを判断します。</summary>
            <param name="mb">判断するメソッドまたはコンストラクタを指定します。</param>
            <returns>指定されたメソッドまたはコンストラクタを <c>Ldtoken</c> 命令を使用して読み込んだ方がよい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitImplicitCast(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>指定された 2 つの型の間での暗黙的なキャスト命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="from"/> または <paramref name="to"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="from"/> から <paramref name="to"/> の間に暗黙的な型変換が存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitExplicitCast(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>指定された 2 つの型の間での明示的なキャスト命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="from"/> または <paramref name="to"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="from"/> から <paramref name="to"/> の間に明示的な型変換が存在しません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.TryEmitImplicitCast(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>指定された 2 つの型の間での暗黙的なキャストが存在すればキャスト命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
            <returns>2 つの型の間で暗黙的な変換が存在した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="from"/> または <paramref name="to"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.TryEmitExplicitCast(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>指定された 2 つの型の間での明示的なキャストが存在すればキャスト命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
            <returns>2 つの型の間で明示的な変換が存在した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="from"/> または <paramref name="to"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.TryEmitNumericCast(System.Reflection.Emit.ILGenerator,System.Type,System.Type,System.Boolean)">
            <summary>指定された 2 つの数値型の間でキャストが存在した場合はキャスト命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="from">変換元の型を指定します。</param>
            <param name="to">変換先の型を指定します。</param>
            <param name="implicitOnly">暗黙的な変換のみを行うかどうかを示す値を指定します。</param>
            <returns>2 つの型の間で暗黙的または明示的な変換が存在した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitBoxing(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>指定された型をボックス化する命令を発行します。このメソッドは <see cref="T:System.Void"/> 型を <c>null</c> 参照にボックス化します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">ボックス化される値の型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="type"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitArray``1(System.Reflection.Emit.ILGenerator,System.Collections.Generic.ICollection{``0})">
            <summary>各要素が指定されたコレクションにより初期化された新しい配列を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="items">配列の各要素を初期化するコレクションを指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> または <paramref name="items"/> が <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException">コレクションの要素を表す定数を発行できません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitArray(System.Reflection.Emit.ILGenerator,System.Type,System.Int32,System.Action{System.Int32})">
            <summary>指定されたデリゲートを呼び出すことにより、各要素が初期化された新しい配列を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="elementType">配列の要素の型を指定します。</param>
            <param name="count">配列の要素数を指定します。</param>
            <param name="emitter">初期化に使用する各要素を発行するデリゲートを指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/>、<paramref name="elementType"/> または <paramref name="emitter"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitDecimal(System.Reflection.Emit.ILGenerator,System.Decimal)">
            <summary>指定された 10 進数を評価スタックにプッシュする命令を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="value">スタックにプッシュする 10 進数を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ILGeneratorExtensions.EmitMissingValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>指定された型において値が存在しないことを示す値を発行します。</summary>
            <param name="instance">命令を書き込む <see cref="T:System.Reflection.Emit.ILGenerator"/> を指定します。</param>
            <param name="type">存在しないことを表す値を発行する型を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> が <c>null</c> です。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Generation.Snippets">
            <summary>動的言語ランタイム全体で使用する型を定義し、アセンブリを作成できるようにします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.SetSaveAssemblies(System.Boolean,System.String)">
            <summary>アセンブリの保存に関する情報を設定します。</summary>
            <param name="enable">アセンブリの保存を可能にするかどうかを示す値を指定します。</param>
            <param name="directory">アセンブリが保存されるディレクトリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.SaveAndVerifyAssemblies">
            <summary>アセンブリを保存して検証を行います。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.SaveAssemblies">
            <summary>アセンブリを保存して、検証される必要があるアセンブリの場所を返します。</summary>
            <returns>検証される必要があるアセンブリの場所。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.CreateDynamicMethod(System.String,System.Type,System.Type[],System.Boolean)">
            <summary>新しい動的メソッドを作成して、メソッド本体を構築する <see cref="T:Microsoft.Scripting.Generation.DynamicILGen"/> を返します。</summary>
            <param name="methodName">動的メソッドの名前を指定します。</param>
            <param name="returnType">動的メソッドの戻り値の型を指定します。</param>
            <param name="parameterTypes">動的メソッドの仮引数の型を指定します。</param>
            <param name="isDebuggable">動的メソッドがデバッグ可能かどうかを示す値を指定します。</param>
            <returns>動的メソッドの本体を構築する <see cref="T:Microsoft.Scripting.Generation.DynamicILGen"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.DefinePublicType(System.String,System.Type)">
            <summary>指定された名前をもつ新しいパブリック型を定義して、型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/> を返します。</summary>
            <param name="name">定義する型の名前を指定します。</param>
            <param name="parent">定義する型が拡張する型を指定します。</param>
            <returns>定義された型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.DefinePublicType(System.String,System.Type,System.Boolean,System.Boolean)">
            <summary>指定された名前をもつ新しいパブリック型を定義して、型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/> を返します。</summary>
            <param name="name">定義する型の名前を指定します。</param>
            <param name="parent">定義する型が拡張する型を指定します。</param>
            <param name="preserveName">指定された名前を保持するかどうかを示す値を指定します。</param>
            <param name="emitDebugSymbols">デバッグシンボルを出力するかどうかを示す値を指定します。</param>
            <returns>定義された型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.DefineDelegateType(System.String)">
            <summary>指定された名前を持つデリゲート型を定義して、型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/> を返します。</summary>
            <param name="name">デリゲート型の名前を指定します。</param>
            <returns>定義された型を構築する <see cref="T:System.Reflection.Emit.TypeBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.Snippets.IsSnippetsAssembly(System.Reflection.Assembly)">
            <summary>指定されたアセンブリがこのスニペットで構築しているアセンブリかどうかを判断します。</summary>
            <param name="asm">調べるアセンブリを指定します。</param>
            <returns>指定されたアセンブリがこのスニペットで構築しているアセンブリである場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Generation.Snippets.SnippetsDirectory">
            <summary><see cref="P:Microsoft.Scripting.Generation.Snippets.SaveSnippets"/> が設定されたいるときに、アセンブリが保存されるディレクトリを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.Snippets.SaveSnippets">
            <summary>アセンブリを保存するかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.TypeGen">
            <summary>型の構築を支援します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.#ctor(Microsoft.Scripting.Generation.AssemblyGen,System.Reflection.Emit.TypeBuilder)">
            <summary>指定された <see cref="P:Microsoft.Scripting.Generation.TypeGen.AssemblyGen"/> および <see cref="P:Microsoft.Scripting.Generation.TypeGen.TypeBuilder"/> を使用して、<see cref="T:Microsoft.Scripting.Generation.TypeGen"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="myAssembly">この型が属しているアセンブリを構築している <see cref="P:Microsoft.Scripting.Generation.TypeGen.AssemblyGen"/> を指定します。</param>
            <param name="myType">この型を構築する <see cref="P:Microsoft.Scripting.Generation.TypeGen.TypeBuilder"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.FinishType">
            <summary>型の構築を完了して、この型の <see cref="T:System.Type"/> オブジェクトを作成します。</summary>
            <returns>この型を表す <see cref="T:System.Type"/> オブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.AddStaticField(System.Type,System.String)">
            <summary>この型に指定された型および名前をもつパブリックな静的フィールドを追加します。</summary>
            <param name="fieldType">静的フィールドの型を指定します。</param>
            <param name="name">静的フィールドの名前を指定します。</param>
            <returns>追加された静的フィールドを構築する <see cref="T:System.Reflection.Emit.FieldBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.AddStaticField(System.Type,System.Reflection.FieldAttributes,System.String)">
            <summary>この型に指定された型および名前をもつ静的フィールドを追加します。</summary>
            <param name="fieldType">静的フィールドの型を指定します。</param>
            <param name="attributes">静的フィールドの名前を指定します。</param>
            <param name="name">静的フィールドの属性を表す <see cref="T:System.Reflection.FieldAttributes"/> を指定します。</param>
            <returns>追加された静的フィールドを構築する <see cref="T:System.Reflection.Emit.FieldBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.DefineExplicitInterfaceImplementation(System.Reflection.MethodInfo)">
            <summary>この型に指定されたインターフェイス メソッドの明示実装を定義します。</summary>
            <param name="baseMethod">実装するインターフェイスのメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <returns>インターフェイスの明示実装メソッド本体を構築できる <see cref="T:System.Reflection.Emit.ILGenerator"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.TypeGen.DefineMethodOverride(System.Reflection.MethodInfo)">
            <summary>この型で指定された基底クラスのメソッドをオーバーライドします。</summary>
            <param name="baseMethod">オーバーライドする基底クラスのメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <returns>メソッド オーバーライドの本体を構築できる <see cref="T:System.Reflection.Emit.ILGenerator"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Generation.TypeGen.TypeInitializer">
            <summary>型初期化子 (cctor) の本体を構築する <see cref="T:System.Reflection.Emit.ILGenerator"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.TypeGen.AssemblyGen">
            <summary>この型が属しているアセンブリを構築している <see cref="P:Microsoft.Scripting.Generation.TypeGen.AssemblyGen"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Generation.TypeGen.TypeBuilder">
            <summary>型をより詳細に定義できる <see cref="P:Microsoft.Scripting.Generation.TypeGen.TypeBuilder"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ComboActionRewriter">
            <summary>
            動的サイトを消費する動的サイトを見つけ、単一のコンボ動的サイトに変形する式ツリーのリライターを表します。
            コンボ動的サイトは個別のメタバインダーを実行し、単一の動的サイトで結果のコードを生成します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboActionRewriter.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary><see cref="T:System.Linq.Expressions.DynamicExpression"/> の子を走査します。</summary>
            <param name="node">走査する式。</param>
            <returns>式またはいずれかの部分式が変更された場合は変更された式。それ以外の場合は元の式。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ComboActionRewriter.ComboDynamicSiteExpression">
            <summary>
            コンボ動的サイトの生成に使用する縮退可能なノードです。
            動的サイトを発見するたびに、それらを <see cref="T:Microsoft.Scripting.Actions.ComboActionRewriter.ComboDynamicSiteExpression"/> に置換します。
            動的サイトの子が <see cref="T:Microsoft.Scripting.Actions.ComboActionRewriter.ComboDynamicSiteExpression"/> となる場合は、バインディングマッピング情報を更新して子を親とマージします。
            入力のうち 1 つでも副作用を発生させる場合は、結合を停止します。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ComboBinder">
            <summary>
            複数のバインダーを単一の動的サイトに結合できるバインダーを表します。
            このクラスの作成者は引数、定数、サブサイト式のマッピングを行い、このデータを表す <see cref="T:Microsoft.Scripting.Actions.BinderMappingInfo"/> のリストを提供する必要があります。
            そこから、<see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> は結果のコードを生成するために、リストを処理するだけでよいことになります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.#ctor(Microsoft.Scripting.Actions.BinderMappingInfo[])">
            <summary>指定されたマッピング情報を使用して、<see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binders">この <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> が使用するマッピング情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.#ctor(System.Collections.Generic.ICollection{Microsoft.Scripting.Actions.BinderMappingInfo})">
            <summary>指定されたマッピング情報を使用して、<see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binders">この <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> が使用するマッピング情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
            <summary>動的操作のバインディングを実行します。</summary>
            <param name="target">動的操作のターゲット。</param>
            <param name="args">動的操作の引数の配列。</param>
            <returns>バインディングの結果を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>このオブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトと指定されたオブジェクトが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ComboBinder.Equals(Microsoft.Scripting.Actions.ComboBinder)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> が指定された <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> と等しいかどうかを判断します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> を指定します。</param>
            <returns>この<see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> と指定された <see cref="T:Microsoft.Scripting.Actions.ComboBinder"/> が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ComboBinder.ReturnType">
            <summary>操作の結果型。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ParameterMappingInfo">
            <summary>
            コンボアクション式の入力に対するマッピングを提供します。
            入力は新しい動的サイトの入力、以前の <see cref="T:System.Linq.Expressions.DynamicExpression"/> の入力、あるいは動的サイトの引数から取り出された <see cref="T:System.Linq.Expressions.ConstantExpression"/> にマッピングできます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.Parameter(System.Int32)">
            <summary>元の引数にマッピングされた入力を返します。</summary>
            <param name="index">マッピングする元の引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>元の引数にマッピングされた入力。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.Action(System.Int32)">
            <summary>以前のバインディング結果にマッピングされた入力を返します。</summary>
            <param name="index">マッピングする以前のバインディング結果の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>以前のバインディング結果にマッピングされた入力。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.Fixed(System.Linq.Expressions.ConstantExpression)">
            <summary>定数にマッピングされた入力を返します。</summary>
            <param name="e">マッピングする定数を表す <see cref="T:System.Linq.Expressions.ConstantExpression"/> を指定します。</param>
            <returns>定数にマッピングされた入力。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.Equals(Microsoft.Scripting.Actions.ParameterMappingInfo)">
            <summary>この入力が指定された入力と等しいかどうかを判断します。</summary>
            <param name="other">比較する入力を指定します。</param>
            <returns>この入力が指定された入力と等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>このオブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ParameterMappingInfo.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.ParameterIndex">
            <summary>この入力がマッピングされている元の引数リスト内の引数の位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.ActionIndex">
            <summary>この入力がマッピングされている以前のバインディング結果の位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.Constant">
            <summary>この入力がマッピングされている定数を表す <see cref="T:System.Linq.Expressions.ConstantExpression"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.IsParameter">
            <summary>この入力が元の引数リスト内の引数にマッピングされているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.IsAction">
            <summary>この入力が以前のバインディング結果にマッピングされているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ParameterMappingInfo.IsConstant">
            <summary>この入力が定数にマッピングされているかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.BinderMappingInfo">
            <summary>
            単一のコンボバインダーに対するマッピング情報を格納します。
            このクラスは元の <see cref="T:System.Dynamic.DynamicMetaObjectBinder"/> と引数、サブサイトおよび定数からバインディングへマッピングを含んでいます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BinderMappingInfo.#ctor(System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IList{Microsoft.Scripting.Actions.ParameterMappingInfo})">
            <summary>指定されたバインダーとマッピング情報を使用して、<see cref="T:Microsoft.Scripting.Actions.BinderMappingInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">元のバインダーを指定します。</param>
            <param name="mappingInfo">引数、サブサイトおよび定数からバインディングへのマッピング情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BinderMappingInfo.#ctor(System.Dynamic.DynamicMetaObjectBinder,Microsoft.Scripting.Actions.ParameterMappingInfo[])">
            <summary>指定されたバインダーとマッピング情報を使用して、<see cref="T:Microsoft.Scripting.Actions.BinderMappingInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="binder">元のバインダーを指定します。</param>
            <param name="mappingInfo">引数、サブサイトおよび定数からバインディングへのマッピング情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BinderMappingInfo.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BinderMappingInfo.Binder">
            <summary>元の <see cref="T:System.Dynamic.DynamicMetaObjectBinder"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BinderMappingInfo.MappingInfo">
            <summary>引数、サブサイトおよび定数からバインディングへのマッピング情報を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ConditionalBuilder">
            <summary>
            false 文がいまだ不明な場合に一連の条件式を構築します。
            条件およびその条件に対する true 文は追加し続けることができます。
            それぞれの後続の条件式は以前の条件の false 文になります。
            最後に条件式ではない終端ノードを追加する必要があります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConditionalBuilder.AddCondition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>新しい条件式と本体を追加します。最初の呼び出しは最上位の条件式に、後続の呼び出しは以前の条件式の false 文として追加されます。</summary>
            <param name="condition"><see cref="T:System.Boolean"/> 型の結果型をもつ条件式を指定します。</param>
            <param name="body"><paramref name="condition"/> が真の場合に実行される式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConditionalBuilder.FinishCondition(System.Dynamic.DynamicMetaObject)">
            <summary>先行するすべての条件が満たされない場合に実行される式を表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を追加します。</summary>
            <param name="body">先行するすべての条件が満たされない場合に実行される式を保持する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConditionalBuilder.FinishCondition(System.Linq.Expressions.Expression)">
            <summary>先行するすべての条件が満たされない場合に実行される式を追加します。</summary>
            <param name="body">先行するすべての条件が満たされない場合に実行される式を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConditionalBuilder.GetMetaObject(System.Dynamic.DynamicMetaObject[])">
            <summary>
            この条件式を表す結果のメタオブジェクトを取得します。
            FinishCondition が呼び出されている必要があります。
            </summary>
            <param name="types">結果の <see cref="T:System.Dynamic.DynamicMetaObject"/> への追加の制約を保持する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>この条件式を表す <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConditionalBuilder.AddVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>最終式のレベルにスコープされた変数を追加します。</summary>
            <param name="var">この条件式に追加する変数を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ConditionalBuilder.Restrictions">
            <summary>結果として生成される <see cref="T:System.Dynamic.DynamicMetaObject"/> に対して適用されるバインディング制約を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.NoSideEffectsAttribute">
            <summary>メソッドを副作用を持たないとしてマークします。コンボバインダーによってメソッド呼び出しを可能にするために使用されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.OperatorInfo">
            <summary>DLR <see cref="T:System.Linq.Expressions.ExpressionType"/> から関連付けられた .NET メソッドに対するマッピングを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.OperatorInfo.GetOperatorInfo(System.Linq.Expressions.ExpressionType)">
            <summary>指定された演算子に関連付けられた <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> または <c>null</c> を返します。</summary>
            <param name="op">関連付けられた <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> を返す演算子を指定します。</param>
            <returns>演算子に関連付けられた <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/>。対応する <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> が存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.OperatorInfo.GetOperatorInfo(System.String)">
            <summary>指定された演算子の名前から対応する <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> を取得します。</summary>
            <param name="name">対応する <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> を検索する演算子の名前または代替名を指定します。</param>
            <returns>名前に関連付けられた <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/>。対応する <see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> が存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.Operator">
            <summary><see cref="T:Microsoft.Scripting.Actions.OperatorInfo"/> が情報を提供する演算子を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.Name">
            <summary>
            この演算子に関連付けられたプライマリメソッド名を取得します。
            メソッド名は通常 op_Operator のような形式をとります。(例: op_Addition)
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.OperatorInfo.AlternateName">
            <summary>
            この演算子に関連付けられたセカンダリメソッド名を取得します。
            メソッド名は通常パスカルケースの標準的な .NET メソッド名になります。(例: Add)
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.LambdaBuilder">
            <summary>
            <see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成するためのビルダーを表します。
            式ツリーは引数および変数が事前に作成された上で、<see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成するファクトリに渡されることを要求するので、
            このビルダーはラムダ式の構成に関するあらゆる情報を追跡し、<see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.GetVisibleVariables">
            <summary>可視である変数のリストを取得します。</summary>
            <returns>可視である変数のリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Parameter(System.Type,System.String)">
            <summary>
            指定された名前と型を使用して、ラムダ式の仮引数を作成します。
            <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> は作成された順序を保持しますが、直接 <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> にアクセスすることで順序を変更することも可能です。
            </summary>
            <param name="type">作成される仮引数の型を指定します。</param>
            <param name="name">作成される仮引数の名前を指定します。</param>
            <returns>作成された仮引数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.ClosedOverParameter(System.Type,System.String)">
            <summary>
            指定された名前と型を使用して、ラムダ式の仮引数を作成します。
            <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> は作成された順序を保持しますが、直接 <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> にアクセスすることで順序を変更することも可能です。
            </summary>
            <param name="type">作成される仮引数の型を指定します。</param>
            <param name="name">作成される仮引数の名前を指定します。</param>
            <returns>作成された仮引数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateHiddenParameter(System.Type,System.String)">
            <summary>
            指定された名前と型を使用して、ラムダ式の隠れた仮引数を作成します。
            <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> は作成された順序を保持しますが、直接 <see cref="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters"/> にアクセスすることで順序を変更することも可能です。
            </summary>
            <param name="type">作成される仮引数の型を指定します。</param>
            <param name="name">作成される仮引数の名前を指定します。</param>
            <returns>作成された仮引数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.CreateParamsArray(System.Type,System.String)">
            <summary>
            指定された名前と型を使用して、ラムダ式の配列引数を作成します。
            配列引数はシグネチャに即時に追加されます。
            ラムダが作成される前に、(呼び出し元は明示的にリストを操作することで順序を変更できますが、) ビルダーはこの引数が最後であるかどうかを確認します。
            </summary>
            <param name="type">作成される仮引数の型を指定します。</param>
            <param name="name">作成される仮引数の名前を指定します。</param>
            <returns>作成された仮引数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.ClosedOverVariable(System.Type,System.String)">
            <summary>指定された名前と型を使用して、ローカル変数を作成します。</summary>
            <param name="type">作成されるローカル変数の型を指定します。</param>
            <param name="name">作成されるローカル変数の名前を指定します。</param>
            <returns>作成されたローカル変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Variable(System.Type,System.String)">
            <summary>指定された名前と型を使用して、ローカル変数を作成します。</summary>
            <param name="type">作成されるローカル変数の型を指定します。</param>
            <param name="name">作成されるローカル変数の名前を指定します。</param>
            <returns>作成されたローカル変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.HiddenVariable(System.Type,System.String)">
            <summary>指定された名前と型を使用して、一時変数を作成します。</summary>
            <param name="type">作成されるローカル変数の型を指定します。</param>
            <param name="name">作成されるローカル変数の名前を指定します。</param>
            <returns>作成されたローカル変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.AddHiddenVariable(System.Linq.Expressions.ParameterExpression)">
            <summary>
            一時変数をビルダーによって保持される変数リストに追加します。
            これは変数がビルダーの外で作成された場合に便利です。
            </summary>
            <param name="temp">追加されるローカル変数を表す <see cref="T:System.Linq.Expressions.ParameterExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeLambda(System.Type)">
            <summary>
            このビルダーから <see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成します。
            この操作の後は、このビルダーは他のインスタンスの作成に使用できなくなります。
            </summary>
            <param name="lambdaType">作成されるラムダ式の型を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.LambdaExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeLambda">
            <summary>
            このビルダーから <see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成します。
            この操作の後は、このビルダーは他のインスタンスの作成に使用できなくなります。
            </summary>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.LambdaExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.MakeGenerator(System.Linq.Expressions.LabelTarget,System.Type)">
            <summary>
            このビルダーからジェネレータを含む <see cref="T:System.Linq.Expressions.LambdaExpression"/> を作成します。
            この操作の後は、このビルダーは他のインスタンスの作成に使用できなくなります。
            </summary>
            <param name="label">内部のジェネレータから処理を譲るラベルを指定します。</param>
            <param name="lambdaType">返されるラムダ式の型を指定します。</param>
            <returns>新しく作成された <see cref="T:System.Linq.Expressions.LambdaExpression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.EnsureSignature(System.Type)">
            <summary>必要であればラムダ式の本体および指定されたデリゲートのシグネチャに一致する仮引数を構築します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.LambdaBuilder.Validate">
            <summary>ラムダを作成するのに十分な情報をビルダーが保持しているかどうかを検証します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Name">
            <summary>ラムダ式の名前を取得または設定します。現在匿名あるいは無名のラムダ式は許可されていません。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.ReturnType">
            <summary>作成されるラムダ式の戻り値の型を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Locals">
            <summary>ラムダ式のローカル変数を直接操作できるリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Parameters">
            <summary>ラムダ式の仮引数を直接操作できるリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.ParamsArray">
            <summary>存在する場合は配列引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Body">
            <summary>ラムダ式の本体を取得します。これは <c>null</c> でない必要があります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Dictionary">
            <summary>生成されるラムダ式がローカル変数を直接 CLR スタックに確保する代わりにそれらを格納するディクショナリを持つかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.LambdaBuilder.Visible">
            <summary>スコープが可視かどうかを示す値を取得または設定します。既定ではスコープは可視です。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.TryStatementBuilder">
            <summary>Try ステートメントを自然な構文で構築できるビルダーを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.#ctor(System.Linq.Expressions.Expression)">
            <summary>指定された本体を使用して、<see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="body">Try ステートメントの本体を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Catch(System.Type,System.Linq.Expressions.Expression[])">
            <summary>補足する例外の型と本体を使用して、Try ステートメントに Catch 句を追加します。</summary>
            <param name="type">補足する例外の型を指定します。</param>
            <param name="body">Catch 句の本体を指定します。</param>
            <returns>Catch 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression[])">
            <summary>補足した例外を保存する変数と本体を使用して、Try ステートメントに Catch 句を追加します。</summary>
            <param name="holder">補足した例外を保存する変数を指定します。</param>
            <param name="body">Catch 句の本体を指定します。</param>
            <returns>Catch 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Filter(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>補足する例外の型、補足するかどうかを判断する条件および本体を使用して、Try ステートメントに Filter 句を追加します。</summary>
            <param name="type">補足する例外の型を指定します。</param>
            <param name="condition">例外を補足するかどうかを判断する条件を指定します。</param>
            <param name="body">Filter 句の本体を指定します。</param>
            <returns>Filter 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Filter(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>補足した例外を保存する変数、補足するかどうかを判断する条件および本体を使用して、Try ステートメントに Filter 句を追加します。</summary>
            <param name="holder">補足した例外を保存する変数を指定します。</param>
            <param name="condition">例外を補足するかどうかを判断する条件を指定します。</param>
            <param name="body">Filter 句の本体を指定します。</param>
            <returns>Filter 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Finally(System.Linq.Expressions.Expression[])">
            <summary>指定された本体を使用して、Try ステートメントに Finally 句を追加します。</summary>
            <param name="body">Finally 句の本体を指定します。</param>
            <returns>Finally 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.FinallyWithJumps(System.Linq.Expressions.Expression[])">
            <summary>指定された本体を使用して、Try ステートメントに外側へのジャンプが可能な Finally 句を追加します。</summary>
            <param name="body">外側へのジャンプが可能な Finally 句の本体を指定します。</param>
            <returns>外側へのジャンプが可能な Finally 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.Fault(System.Linq.Expressions.Expression[])">
            <summary>指定された本体を使用して、Try ステートメントに Fault 句を追加します。</summary>
            <param name="body">Fault 句の本体を指定します。</param>
            <returns>Fault 句が追加された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.op_Implicit(Microsoft.Scripting.Ast.TryStatementBuilder)~System.Linq.Expressions.Expression">
            <summary>提供された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> を等価な <see cref="T:System.Linq.Expressions.Expression"/> に変換します。</summary>
            <param name="builder">変換する <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> です。</param>
            <returns>指定された <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> と等価な <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.TryStatementBuilder.ToExpression">
            <summary>この <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> を等価な <see cref="T:System.Linq.Expressions.Expression"/> に変換します。</summary>
            <returns>この <see cref="T:Microsoft.Scripting.Ast.TryStatementBuilder"/> と等価な <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.MultiRuntimeAwareAttribute">
            <summary>
            静的フィールドを複数のランタイムからアクセスされる場合でも安全であるとしてマークします。</summary>
            <remarks>
            この属性でマークされていない書き込み可能な静的フィールドはランタイム間で共有されている状態を調べるテストによってフラグが付けられます。
            この属性を適用する前にユーザーは状態を共有しても安全であることを確実にするべきです。
            これは通常遅延初期化されるか、すべてのランタイムで同一で不変な値をキャッシュしている変数に適用します。
            </remarks>
        </member>
        <member name="T:Microsoft.Scripting.PerfTrack">
            <summary>
            時間のかかる操作に対するパフォーマンスカウントを高速に収集する際に使用されるメソッド群を提供します。
            通常このような操作はリフレクションまたはコード生成に関係する操作を意味します。
            長期にわたってこの処理が通常のパフォーマンスカウンターアーキテクチャに含まれるかを確かめる必要があります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.DumpHistogram``1(System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>指定されたヒストグラムの内容を標準出力に表示します。ヒストグラムは値によって昇順に並び替えられます。</summary>
            <typeparam name="TKey">ヒストグラムのキーの型を指定します。</typeparam>
            <param name="histogram">出力するヒストグラムを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.DumpHistogram``1(System.Collections.Generic.IDictionary{``0,System.Int32},System.IO.TextWriter)">
            <summary>指定されたヒストグラムの内容を指定された <see cref="T:System.IO.TextWriter"/> に書き込みます。ヒストグラムは値によって昇順に並び替えられます。</summary>
            <typeparam name="TKey">ヒストグラムのキーの型を指定します。</typeparam>
            <param name="histogram">出力するヒストグラムを指定します。</param>
            <param name="output">ヒストグラムを出力する <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.AddHistograms``1(System.Collections.Generic.IDictionary{``0,System.Int32},System.Collections.Generic.IDictionary{``0,System.Int32})">
            <summary>2 個のヒストグラムの内容を 1 つに統合します。</summary>
            <typeparam name="TKey">ヒストグラムのキーの型を指定します。</typeparam>
            <param name="result">統合された結果が書き込まれるヒストグラムを指定します。</param>
            <param name="addend"><paramref name="result"/> に統合するヒストグラムを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.IncrementEntry``1(System.Collections.Generic.IDictionary{``0,System.Int32},``0)">
            <summary>ヒストグラムの指定されたキーに対する値を 1 増加させます。</summary>
            <typeparam name="TKey">ヒストグラムのキーの型を指定します。</typeparam>
            <param name="histogram">値を増加させるヒストグラムを指定します。</param>
            <param name="key">値を増加させるエントリを示すキーを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.DumpStats">
            <summary>このクラスで収集したパフォーマンス統計情報を標準出力に表示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.DumpStats(System.IO.TextWriter)">
            <summary>このクラスで収集したパフォーマンス統計情報を指定された <see cref="T:System.IO.TextWriter"/> に書き込みます。</summary>
            <param name="output">統計情報を書き込む <see cref="T:System.IO.TextWriter"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.PerfTrack.NoteEvent(Microsoft.Scripting.PerfTrack.Category,System.Object)">
            <summary>指定されたカテゴリのイベントの発生を記録します。</summary>
            <param name="category">発生したイベントのカテゴリを指定します。</param>
            <param name="key">発生したイベントの詳細を示すキーを指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.PerfTrack.Category">
            <summary>パフォーマンスイベントのカテゴリを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Temporary">
            <summary>迅速な調査のための一時的なカテゴリを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.ReflectedTypes">
            <summary>型オブジェクトに対する処理を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Exceptions">
            <summary>例外のスローを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Properties">
            <summary>プロパティの取得または設定を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Fields">
            <summary>フィールドの取得または設定を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Methods">
            <summary>MethodBase.Invoke を通したメソッド呼び出しを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Compiler">
            <summary>ReflectOptimizer を通じてコンパイルされたメソッドを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.DelegateCreate">
            <summary>デリゲートに対する新しいメソッドを作成したことを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.DictInvoke">
            <summary>辞書によるアクセスを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.OperatorInvoke">
            <summary>型に対する演算子呼び出しを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.OverAllocate">
            <summary>必要以上に割り当てをしなければならない理想的ではないアルゴリズムの存在している場所を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Rules">
            <summary>規則またはアクションに関連する操作を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.RuleEvaluation">
            <summary>規則が評価されたことを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Binding">
            <summary>規則がバインドされたことを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.BindingSlow">
            <summary>低速なバインディングを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.BindingFast">
            <summary>高速なバインディングを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.BindingTarget">
            <summary>規則が特定の型のターゲットに対してバインドされたことを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.PerfTrack.Category.Count">
            <summary>任意のパフォーマンスカウントイベントを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.DebugOptions">
            <summary>
            このクラスはこのアセンブリ内で使用される内部的なデバッグオプションを保持します。
            これらのオプションは環境変数 DLR_{option-name} を通して設定することができます。
            ブール値のオプションは "true" は true、それ以外は false とみなされます。
            
            これらのオプションは内部的なデバッグのためにのみ存在し、どのようなパブリック API を通しても公開するべきではありません。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.CompilerContext">
            <summary>
            コンパイラの実行のために流し込まれたコンテキストを表します。
            言語はこのクラスから派生することで、追加のコンテキスト情報を提供することができます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CompilerContext.#ctor(Microsoft.Scripting.SourceUnit,Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink)">
            <summary>翻訳入力単位、コンパイラオプション、<see cref="T:Microsoft.Scripting.ErrorSink"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.CompilerContext"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="sourceUnit">コンパイルされる翻訳入力単位を指定します。</param>
            <param name="options">コンパイラのオプションを指定します。</param>
            <param name="errorSink">エラーが通知されるオブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CompilerContext.#ctor(Microsoft.Scripting.SourceUnit,Microsoft.Scripting.CompilerOptions,Microsoft.Scripting.ErrorSink,Microsoft.Scripting.Runtime.ParserSink)">
            <summary>翻訳入力単位、コンパイラオプション、<see cref="T:Microsoft.Scripting.ErrorSink"/>、<see cref="P:Microsoft.Scripting.Runtime.CompilerContext.ParserSink"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.CompilerContext"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="sourceUnit">コンパイルされる翻訳入力単位を指定します。</param>
            <param name="options">コンパイラのオプションを指定します。</param>
            <param name="errorSink">エラーが通知されるオブジェクトを指定します。</param>
            <param name="parserSink">パーサーのコールバックが通知されるオブジェクトを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CompilerContext.SourceUnit">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CompilerContext"/> で現在コンパイルされている <see cref="P:Microsoft.Scripting.Runtime.CompilerContext.SourceUnit"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CompilerContext.ParserSink">
            <summary>パーサーのコールバック (例: かっこの一致など) が通知されるオブジェクトを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CompilerContext.Errors">
            <summary>現在の <see cref="T:Microsoft.Scripting.ErrorSink"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CompilerContext.Options">
            <summary>コンパイラ固有のオプションを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IConvertibleMetaObject">
            <summary><see cref="T:System.Dynamic.DynamicMetaObject"/> が CLR 型に変換可能であることを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IConvertibleMetaObject.CanConvertTo(System.Type,System.Boolean)">
            <summary>この <see cref="T:System.Dynamic.DynamicMetaObject"/> が指定された型に変換可能であるかどうかを判断します。</summary>
            <param name="type">変換先の型を指定します。</param>
            <param name="isExplicit">変換が明示的に行われるかどうかを示す値を指定します。</param>
            <returns><see cref="T:System.Dynamic.DynamicMetaObject"/> が <paramref name="type"/> に指定された変換方法で変換可能な場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.ICustomScriptCodeData">
            <summary>スクリプトコードをディスクに保存する際にシリアライズされるデータを取得できるようにします。</summary>
        </member>
        <member name="P:Microsoft.Scripting.ICustomScriptCodeData.CustomScriptCodeData">
            <summary>ディスク保存時にスクリプトコードがシリアライズされるデータを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IRestrictedMetaObject">
            <summary>
            <see cref="T:System.Dynamic.DynamicMetaObject"/> がすでに制約された型を表していることを示します。
            すでに既知の型に制約されているが、型情報がキャプチャされていない場合 (型がシールされていないなど) に有効です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IRestrictedMetaObject.Restrict(System.Type)">
            <summary>指定された型の制約された <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="type">制約する型を指定します。</param>
            <returns>型に制約された <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.MetaObjectExtensions">
            <summary><see cref="T:System.Dynamic.DynamicMetaObject"/> に関するヘルパー メソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.NeedsDeferral(System.Dynamic.DynamicMetaObject)">
            <summary>操作のバインディングの保留が必要かどうかを判断します。</summary>
            <param name="self">バインディングの保留が必要かどうかを判断する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>バインディングの保留が必要である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.Restrict(System.Dynamic.DynamicMetaObject,System.Type)">
            <summary>指定された型に制約された <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="self">制約された <see cref="T:System.Dynamic.DynamicMetaObject"/> を返す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="type">制約する型を指定します。</param>
            <returns>型に制約された <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.Clone(System.Dynamic.DynamicMetaObject,System.Linq.Expressions.Expression)">
            <summary>値を表す式を指定された式に置き換えた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。</summary>
            <param name="self">元の <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="newExpression">値を表す新しい式を指定します。</param>
            <returns>値を表す式が置き換えられた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.Clone(System.Dynamic.DynamicMetaObject,System.Dynamic.BindingRestrictions)">
            <summary>バインディング制約を指定された値に置き換えた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。</summary>
            <param name="self">元の <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="newRestrictions">新しいバインディング制約を指定します。</param>
            <returns>バインディング制約が置き換えられた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.Clone(System.Dynamic.DynamicMetaObject,System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
            <summary>値を表す式とバインディング制約を指定された値に置き換えた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/> を作成します。</summary>
            <param name="self">元の <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <param name="newExpression">値を表す新しい式を指定します。</param>
            <param name="newRestrictions">新しいバインディング制約を指定します。</param>
            <returns>値を表す式とバインディング制約が置き換えられた新しい <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.GetLimitType(System.Dynamic.DynamicMetaObject)">
            <summary>値が <c>null</c> の場合も考慮された <see cref="T:System.Dynamic.DynamicMetaObject"/> の制限型を取得します。</summary>
            <param name="self">制限型を取得する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>値が <c>null</c> の場合は <see cref="T:Microsoft.Scripting.Runtime.DynamicNull"/> 型。それ以外の場合は <see cref="P:System.Dynamic.DynamicMetaObject.LimitType"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.MetaObjectExtensions.GetRuntimeType(System.Dynamic.DynamicMetaObject)">
            <summary>値が <c>null</c> の場合も考慮された <see cref="T:System.Dynamic.DynamicMetaObject"/> のランタイム値の型を取得します。</summary>
            <param name="self">ランタイム値の型を取得する <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
            <returns>値が <c>null</c> の場合は <see cref="T:Microsoft.Scripting.Runtime.DynamicNull"/> 型。それ以外の場合は <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.RestrictedMetaObject">
            <summary>型が制約された <see cref="T:System.Dynamic.DynamicMetaObject"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.RestrictedMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
            <summary><see cref="T:Microsoft.Scripting.Runtime.RestrictedMetaObject"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="expression">動的バインディング プロセスにおいてこの <see cref="T:Microsoft.Scripting.Runtime.RestrictedMetaObject"/> を表す式。</param>
            <param name="restriction">バインディングが有効となるバインディング制限のセット。</param>
            <param name="value"><see cref="T:Microsoft.Scripting.Runtime.RestrictedMetaObject"/> が表すランタイム値。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.RestrictedMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
            <summary><see cref="T:Microsoft.Scripting.Runtime.RestrictedMetaObject"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="expression">動的バインディング プロセスにおいてこの <see cref="T:Microsoft.Scripting.Runtime.RestrictedMetaObject"/> を表す式。</param>
            <param name="restriction">バインディングが有効となるバインディング制限のセット。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.RestrictedMetaObject.Restrict(System.Type)">
            <summary>指定された型の制約された <see cref="T:System.Dynamic.DynamicMetaObject"/> を返します。</summary>
            <param name="type">制約する型を指定します。</param>
            <returns>型に制約された <see cref="T:System.Dynamic.DynamicMetaObject"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.SavableScriptCode">
            <summary>ディスクに保存することができる <see cref="T:Microsoft.Scripting.ScriptCode"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.#ctor(Microsoft.Scripting.SourceUnit)">
            <summary>翻訳単位を使用して、<see cref="T:Microsoft.Scripting.SavableScriptCode"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="sourceUnit">このクラスに関連づけられる<see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を保持している <see cref="T:Microsoft.Scripting.SourceUnit"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.SaveToAssembly(System.String,Microsoft.Scripting.SavableScriptCode[])">
            <summary>
            指定された <see cref="T:Microsoft.Scripting.SavableScriptCode"/> オブジェクトをアセンブリの保存場所を指定して保存します。
            指定されたスクリプトのコードは複数の言語のコードとすることができます。
            ファイルが既に存在した場合は例外がスローされます。
            </summary>
            <param name="assemblyName">保存するアセンブリの場所を表す拡張子を含んだアセンブリ名を指定します。完全修飾名あるいは相対パスのどちらかである必要があります。</param>
            <param name="codes">指定されたアセンブリに保存する <see cref="T:Microsoft.Scripting.SavableScriptCode"/> オブジェクトを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.LoadFromAssembly(Microsoft.Scripting.Runtime.ScriptDomainManager,System.Reflection.Assembly)">
            <summary>
            指定されたアセンブリから <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> にロードされた新しい <see cref="T:Microsoft.Scripting.ScriptCode"/> のセットを返します。
            <see cref="T:Microsoft.Scripting.ScriptCode"/> に関連付けられた言語が <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> にロードされていない場合、保存された型情報に基づいて <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> をロードします。
            言語のコンパイル対象の <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> や DLR のバージョンが利用できない場合、管理者によってバインディングをリダイレクトするポリシーが適用されない限り <see cref="T:System.TypeLoadException"/> がスローされます。
            </summary>
            <param name="runtime">読み込まれた <see cref="T:Microsoft.Scripting.ScriptCode"/> または言語がロードされる <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
            <param name="assembly">ロードする <see cref="T:Microsoft.Scripting.ScriptCode"/> を含むユーザーがすでにロードしたアセンブリを指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> にロードされた新しい <see cref="T:Microsoft.Scripting.ScriptCode"/> の配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.RewriteForSave(Microsoft.Scripting.Generation.TypeGen,System.Linq.Expressions.LambdaExpression)">
            <summary>指定されたラムダ式をディスクへ保存するためにリライトします。</summary>
            <param name="typeGen">リライトでフィールドなどが付加される型を構築する <see cref="T:Microsoft.Scripting.Generation.TypeGen"/> を指定します。</param>
            <param name="code">ディスクへ保存するためにリライトするラムダ式を指定します。</param>
            <returns>リライトされたラムダ式</returns>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.CompileForSave(Microsoft.Scripting.Generation.TypeGen)">
            <summary>このオブジェクトが表すコードを保存用にコンパイルします。</summary>
            <param name="typeGen">このコードと等価なメソッドが追加される型を表す <see cref="T:Microsoft.Scripting.Generation.TypeGen"/> を指定します。</param>
            <returns>コードがコンパイルされたメソッドとメソッドを表すデリゲートの型を示す <see cref="T:System.Collections.Generic.KeyValuePair`2"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.SavableScriptCode.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.TokenizerBuffer">
            <summary>トークナイザが使用できるバッファを提供します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer.EndOfFile">
            <summary>ファイルの末尾に達したことを示す文字を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer.InvalidCharacter">
            <summary>バッファ内で無効な文字を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._multiEols">
            <summary>
            複数形式の改行文字を認めるかどうかを示します。
            <c>false</c> の場合 \n のみが改行文字として扱われます。
            それ以外の場合は \n, \r\n, \r が改行文字として扱われます。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._bufferResized">
            <summary>
            バッファがリサイズされたかどうかを示します。
            バッファの内容はその開始位置にシフトされ、もはや使用されていないバッファ内のデータは破棄されます。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._position">
            <summary>次に読み取られる文字を示すバッファ内の位置を示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._tokenEndLocation">
            <summary>トークンの終了位置を示します。これは後で計算されます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._start">
            <summary>バッファ内の有効な文字の最初を示すインデックスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._end">
            <summary>バッファ内の有効な文字の最後の直後の文字を示すインデックスを示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.TokenizerBuffer._tokenEnd">
            <summary>現在のトークンが終了する文字の次の文字を示すインデックスを示します。(トークンの開始位置は <see cref="F:Microsoft.Scripting.Runtime.TokenizerBuffer._start"/> になります。)</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.#ctor(System.IO.TextReader,Microsoft.Scripting.SourceLocation,System.Int32,System.Boolean)">
            <summary>指定された引数を使用して、<see cref="T:Microsoft.Scripting.Runtime.TokenizerBuffer"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="reader">データの取得元の <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="initialLocation"><see cref="T:System.IO.TextReader"/> の現在の位置に対応する <see cref="T:Microsoft.Scripting.SourceLocation"/> を指定します。</param>
            <param name="initialCapacity">バッファの初期容量を <see cref="T:System.Char"/> の個数で指定します。</param>
            <param name="multiEols">'\n' 以外の改行記号を改行と判断するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Initialize(System.IO.TextReader,Microsoft.Scripting.SourceLocation,System.Int32,System.Boolean)">
            <summary>指定された引数を使用して、この <see cref="T:Microsoft.Scripting.Runtime.TokenizerBuffer"/> を初期化します。</summary>
            <param name="reader">データの取得元の <see cref="T:System.IO.TextReader"/> を指定します。</param>
            <param name="initialLocation"><see cref="T:System.IO.TextReader"/> の現在の位置に対応する <see cref="T:Microsoft.Scripting.SourceLocation"/> を指定します。</param>
            <param name="initialCapacity">バッファの初期容量を <see cref="T:System.Char"/> の個数で指定します。</param>
            <param name="multiEols">'\n' 以外の改行記号を改行と判断するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Read">
            <summary>基になる <see cref="T:System.IO.TextReader"/> から次の文字を読み取り、文字位置を 1 文字進めます。</summary>
            <returns>読み取られた文字を表す整数値。末尾を表す <see cref="F:Microsoft.Scripting.Runtime.TokenizerBuffer.EndOfFile"/> が返される可能性があります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Read(System.Int32)">
            <summary>次の文字が指定された文字であれば、文字位置を 1 文字進めます。</summary>
            <param name="expectedChar">文字位置を進める文字を指定します。この値には <see cref="F:Microsoft.Scripting.Runtime.TokenizerBuffer.EndOfFile"/> なども指定することができます。</param>
            <returns>次の文字が指定された文字の場合には <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Read(System.String)">
            <summary>バッファ内の現在の文字以降が指定された文字列に等しい場合はその文字数分文字位置を進めます。</summary>
            <param name="expectedString">文字位置を進める文字列を指定します。</param>
            <returns>バッファ内の現在の文字以降が指定された文字列に等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Peek">
            <summary>基になる <see cref="T:System.IO.TextReader"/> から次の文字を読み取り、バッファに格納してから返します。</summary>
            <returns>文字が有効な場合はその文字。それ以外の場合は <see cref="F:Microsoft.Scripting.Runtime.TokenizerBuffer.EndOfFile"/> などの負数値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Back">
            <summary>次に読み取る文字位置を 1 文字分戻します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Seek(System.Int32)">
            <summary>次に読み取る文字位置をバッファの先頭からのオフセットを使用して設定します。</summary>
            <param name="offset">文字位置を設定するバッファの先頭からのオフセットを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.SeekRelative(System.Int32)">
            <summary>次に読み取る文字位置を現在の値からの変化量で指定します。</summary>
            <param name="disp">現在の設定されている次に読み取られる文字位置からの設定する文字位置の変化量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkMultiLineTokenEnd">
            <summary>複数行トークンの終了をマークします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkSingleLineTokenEnd">
            <summary>
            単一行トークンの終了をマークします。
            機能的にこれは <see cref="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkMultiLineTokenEnd"/> と同じですが、単一行と判明している場合はこちらの方が速くなります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkMultiLineTokenEnd(System.Int32)">
            <summary>複数行トークンの終了を指定された値だけ現在位置から移動した場所でマークします。</summary>
            <param name="disp">トークンの終了をマークする位置の現在位置からの変化量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkSingleLineTokenEnd(System.Int32)">
            <summary>
            単一行トークンの終了を指定された値だけ現在位置から移動した場所でマークします。
            機能的にこれは <see cref="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkMultiLineTokenEnd(System.Int32)"/> と同じですが、単一行と判明している場合はこちらの方が速くなります。
            </summary>
            <param name="disp">トークンの終了をマークする位置の現在位置からの変化量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.MarkTokenEnd(System.Boolean)">
            <summary>トークンが複数行であるかどうかを指定して、トークンの終了をマークします。</summary>
            <param name="multiLine">終了をマークするトークンが複数行にわたるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.DiscardToken">
            <summary>
            トークンの開始をマークします。これによってバッファは現在のトークンを破棄できるようになります
            このメソッドはトークンが読み取られていない場合も呼び出すことができます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.GetChar(System.Int32)">
            <summary>バッファ内の先頭からのオフセットを指定して、その位置にある文字を取得します。</summary>
            <param name="offset">取得する文字の位置を示すバッファ内の先頭からのオフセットを指定します。</param>
            <returns>バッファ内の先頭からのオフセットが示す位置にある文字。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.GetCharRelative(System.Int32)">
            <summary>次に読み取られる文字位置からの変化量を指定して、その位置にある文字を取得します。</summary>
            <param name="disp">取得する文字の位置を示す次に読み取られる文字位置からの変化量を指定します。</param>
            <returns>バッファ内の次に読み取られる文字位置からの指定量変化した位置にある文字。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.GetTokenString">
            <summary>現在のトークンが示すバッファ内の文字列を取得します。</summary>
            <returns>トークンに対応するバッファ内の文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.GetTokenSubstring(System.Int32)">
            <summary>現在のトークンが示すバッファ内の範囲から指定されたオフセット以降の範囲にある文字列を取得します。</summary>
            <param name="offset">トークン内の部分文字列の取得の開始位置を示すオフセットを指定します。</param>
            <returns>指定されたオフセットから開始されトークンの終了までの部分を表す文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.GetTokenSubstring(System.Int32,System.Int32)">
            <summary>現在のトークンが示すバッファ内の範囲から指定された範囲にある文字列を取得します。</summary>
            <param name="offset">トークン内の部分文字列の取得の開始位置を示すオフセットを指定します。</param>
            <param name="length">トークン内で取得する部分文字列の文字数を指定します。</param>
            <returns>指定されたオフセットから開始され指定された文字数分の範囲を表す文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.IsEol(System.Int32)">
            <summary>指定された文字が改行文字であるかどうかを判断します。</summary>
            <param name="current">改行文字かどうかを判断する文字を指定します。</param>
            <returns>
            指定された文字が改行文字の場合は <c>true</c>。それ以外の場合は <c>false</c>。
            どの文字が改行文字として扱われるかはコンストラクタあるいは <see cref="M:Microsoft.Scripting.Runtime.TokenizerBuffer.Initialize(System.IO.TextReader,Microsoft.Scripting.SourceLocation,System.Int32,System.Boolean)"/> メソッドの引数に依存します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.ReadEolOpt(System.Int32)">
            <summary>指定された文字にしたがって改行文字を読み込みます。</summary>
            <param name="current">このバッファの現在の文字を指定します。</param>
            <returns>読み込まれた改行文字の文字数。改行文字に遭遇しなかった場合は 0 が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.ReadLine">
            <summary>改行文字が現れるまで読み込み、改行文字の直前の文字を返します。返された文字はスキップされません。</summary>
            <returns>改行文字が現れる直前の文字。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.TokenizerBuffer.ResizeInternal(System.Char[]@,System.Int32,System.Int32,System.Int32)">
            <summary>配列のサイズを指定されたサイズに変更して、元の配列の部分を変更された配列の最初にコピーします。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.Reader">
            <summary>このバッファがデータを取得する <see cref="T:System.IO.TextReader"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.AtBeginning">
            <summary>次に読み取られる文字が基になる <see cref="T:System.IO.TextReader"/> の最初の文字であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.TokenLength">
            <summary>現在のトークンに含まれている文字数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.TokenRelativePosition">
            <summary>現在のトークンの次の読みとられる文字位置に相対的な位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.Position">
            <summary>次に読み取られる文字を示すバッファ内の位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.TokenSpan">
            <summary>現在のトークンのソースコード内での範囲を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.TokenStart">
            <summary>現在のトークンの最初の文字に対応する位置を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.TokenizerBuffer.TokenEnd">
            <summary>現在のトークンの最後の文字の次の文字に対応する位置を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.MethodSignatureInfo">
            <summary>
            等価なシグネチャをもつメソッドを取り除くヘルパー クラスです。
            継承階層内のすべての型からメンバを返す GetDefaultMembers によって使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodSignatureInfo.#ctor(System.Reflection.MethodInfo)">
            <summary>メソッドの情報を保持する <see cref="T:System.Reflection.MethodInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Generation.MethodSignatureInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">シグネチャ情報を取り出すメソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodSignatureInfo.#ctor(System.Boolean,System.Reflection.ParameterInfo[],System.Int32)">
            <summary>メソッドの情報を直接指定することで、<see cref="T:Microsoft.Scripting.Generation.MethodSignatureInfo"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="isStatic">メソッドが静的であるかどうかを示す値を指定します。</param>
            <param name="pis">メソッドの仮引数に関する情報を格納する <see cref="T:System.Reflection.ParameterInfo"/> の配列を指定します。</param>
            <param name="genericArity">メソッドのジェネリック型パラメータの数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodSignatureInfo.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">判断するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.MethodSignatureInfo.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.BasicConsole">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.IConsole"/> を実装する基本的なコンソールを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.IConsole">
            <summary>
            コンソールの入出力を制御します。
            このインターフェイスは <see cref="T:System.IO.TextReader"/>、<see cref="T:System.IO.TextWriter"/>、<see cref="T:System.Console"/> などに値します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.IConsole.ReadLine(System.Int32)">
            <summary>
            単一行の対話入力あるいは複数行のステートメントセットのブロックを読み取ります。
            イベント駆動型の GUI コンソールでは入力が利用可能であることを示すイベントをブロックおよび待機するスレッドを作成することで、このメソッドを実装することができます。
            </summary>
            <param name="autoIndentSize">
            現在のステートメントセットに使用されるインデントレベルを指定します。
            コンソールは自動インデントをサポートしない場合、この引数を無視することができます。
            </param>
            <returns>
            入力ストリームが閉じていた場合は <c>null</c>。それ以外の場合は実行するコマンドを表す文字列。
            結果はステートメントのブロックとして処理されるような複数行の文字列なることもあります。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.IConsole.Write(System.String,Microsoft.Scripting.Hosting.Shell.Style)">
            <summary>指定された文字列を指定されたスタイルでコンソールに出力します。</summary>
            <param name="text">出力する文字列を指定します。</param>
            <param name="style">文字列を出力するスタイルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.IConsole.WriteLine(System.String,Microsoft.Scripting.Hosting.Shell.Style)">
            <summary>指定された文字列を指定されたスタイルでコンソールに出力し、続けて改行文字を出力します。</summary>
            <param name="text">出力する文字列を指定します。</param>
            <param name="style">文字列を出力するスタイルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.IConsole.WriteLine">
            <summary>コンソールに改行文字を出力します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.IConsole.Output">
            <summary>コンソールの標準出力を表す <see cref="T:System.IO.TextWriter"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.IConsole.ErrorOutput">
            <summary>コンソールの標準エラー出力を表す <see cref="T:System.IO.TextWriter"/> を取得または設定します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.#ctor(System.Boolean)">
            <summary>各スタイルで異なる色を使用するかどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.BasicConsole"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="colorful">このコンソールが <see cref="T:Microsoft.Scripting.Hosting.Shell.Style"/> 列挙体の各値に応じて異なる色を使用するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.WriteColor(System.IO.TextWriter,System.String,System.ConsoleColor)">
            <summary>指定された <see cref="T:System.IO.TextWriter"/> に指定された文字列を指定された色で書き込みます。</summary>
            <param name="output">文字列が書き込まれる <see cref="T:System.IO.TextWriter"/> を指定します。</param>
            <param name="str">書き込まれる文字列を指定します。</param>
            <param name="c">文字列が表示される色を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.ReadLine(System.Int32)">
            <summary>指定されたインデント幅でコンソールから 1 行を読み取ります。</summary>
            <param name="autoIndentSize">行の左端に挿入されるインデントの幅を指定します。</param>
            <returns>読み取られた文字列。文字列には自動インデントの幅も含まれます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.Write(System.String,Microsoft.Scripting.Hosting.Shell.Style)">
            <summary>指定された文字列を指定されたスタイルで適切なストリームに書き込みます。</summary>
            <param name="text">書き込まれる文字列を指定します。</param>
            <param name="style">書き込まれる文字列のスタイルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.WriteLine(System.String,Microsoft.Scripting.Hosting.Shell.Style)">
            <summary>指定された文字列を指定されたスタイルで適切なストリームに書き込み、続けて行終端記号を出力します。</summary>
            <param name="text">書き込まれる文字列を指定します。</param>
            <param name="style">書き込まれる文字列のスタイルを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.WriteLine">
            <summary>標準出力に行終端記号を出力します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.BasicConsole.Dispose">
            <summary>このクラスで使用されているすべてのリソースを破棄します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.BasicConsole.Output">
            <summary>このコンソールの出力を書き込む <see cref="T:System.IO.TextWriter"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.BasicConsole.ErrorOutput">
            <summary>このコンソールのエラー出力を書き込む <see cref="T:System.IO.TextWriter"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.BasicConsole.CtrlCEvent">
            <summary>このコンソールが Ctrl-C を入力された際に終了できるようにする <see cref="T:System.Threading.AutoResetEvent"/> を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.BasicConsole.CreatingThread">
            <summary>このコンソールが作成されたスレッドを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.BasicConsole.ConsoleCancelEventHandler">
            <summary>基になるコンソールでキャンセルキーが押された時に呼ばれるデリゲートを取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> が参照するオプションを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.GetHelp">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> の起動時オプションに関するヘルプを取得します。</summary>
            <returns>オプション書式と説明が格納された 2 次元配列。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.IgnoredArgs">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser"/> によって解析がスキップされた引数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.RunFile">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> が実行するファイル名を取得または設定します。指定されていない場合は <c>null</c> になります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.SourceUnitSearchPaths">
            <summary>引数で指定された追加の検索パスを取得または設定します。指定されていない場合は <c>null</c> になります。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.RunAction">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> によって実行される動作を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.EnvironmentVars">
            <summary>引数で作成または上書きされた環境変数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.LanguageProvider">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> で使用される言語プロバイダの型名を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions.HasLanguageProvider">
            <summary>言語プロバイダが引数で指定されたかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostAction">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> によって実行される動作を示します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.ConsoleHostAction.None">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> は何もしません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.ConsoleHostAction.RunConsole">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> はコンソールを実行します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.ConsoleHostAction.RunFile">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> は指定されたファイルを実行します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.ConsoleHostAction.DisplayHelp">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHost"/> はヘルプを表示します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser">
            <summary>起動時の引数から <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions"/> を解析します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.#ctor(Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions,Microsoft.Scripting.Hosting.ScriptRuntimeSetup)">
            <summary>基になるオプションとランタイムのセットアップ情報を使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="options">基になるオプションのインスタンスを指定します。</param>
            <param name="runtimeSetup">ランタイムのセットアップ情報を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.Parse(System.String[])">
            <summary>指定された起動時の引数を解析して <see cref="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.Options"/> を変更します。</summary>
            <param name="args">解析する起動時の引数を指定します。</param>
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"></exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.ParseOption(System.String,System.String@,System.String@)">
            <summary>
            name == null は引数がオプションを指定していないことを表します。すなわち、値は引数全体を含みます。
            name == "" はオプションの名前が空 (引数のセパレータ) であることを表します。その場合、値は null です。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.OptionValueRequired(System.String,System.String)">
            <summary>指定されたオプションに値が必須であり、値が指定されている必要があることを確認します。</summary>
            <param name="optionName">オプションの名前を指定します。</param>
            <param name="value">オプションの値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.Options">
            <summary>解析された <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptions"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleHostOptionsParser.RuntimeSetup">
            <summary>ランタイムのセットアップ情報を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions">
            <summary>コンソール全体に対するオプションを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.#ctor(Microsoft.Scripting.Hosting.Shell.ConsoleOptions)">
            <summary>基になるオプションを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="options">設定をコピーするオプションを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.AutoIndent">
            <summary>コンソールで自動的にインデントを行うかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.HandleExceptions">
            <summary>例外をハンドルするかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.TabCompletion">
            <summary>コンソールでタブ補完を行うかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.ColorfulConsole">
            <summary>色つきのコンソールを使用するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.PrintUsage">
            <summary>使用方法を表示するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.Command">
            <summary>起動時オプションで与えられたリテラルのスクリプトコマンドを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.FileName">
            <summary>実行するファイル名を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.PrintVersion">
            <summary>バージョンを表示するかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.Exit">
            <summary>プロンプトを出すことなく即座に実行を終了させるかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.AutoIndentSize">
            <summary>コンソールの自動インデントサイズを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.RemainingArgs">
            <summary>解析されなかった残りの引数を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.Introspection">
            <summary>内部調査を行うかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.IsMta">
            <summary>実際の実行をマルチスレッドアパートメントとしてマークされたスレッドで行うかどうかを示す値を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.ConsoleOptions.RemoteRuntimeChannel">
            <summary>リモートコンソールが <see cref="T:Microsoft.Scripting.Hosting.ScriptEngine"/> との相互通信に使用すると予期される IPC チャンネルを取得または設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException">
            <summary>無効な形式のオプションに遭遇した場合にスローされる例外を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.InvalidOptionException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.InvalidOptionException.#ctor(System.String)">
            <summary>指定されたメッセージを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の詳細を表すメッセージを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.InvalidOptionException.#ctor(System.String,System.Exception)">
            <summary>指定されたメッセージと内部例外を使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の詳細を表すメッセージを指定します。</param>
            <param name="innerException">この例外の原因となった例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.InvalidOptionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名が <c>null</c> であるか、または <see cref="P:System.Exception.HResult"/> が 0 です。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.OptionsParser">
            <summary>起動時の引数から <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions"/> を解析します。このクラスは抽象クラスです。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsParser"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.Parse(System.String[],Microsoft.Scripting.Hosting.ScriptRuntimeSetup,Microsoft.Scripting.Hosting.LanguageSetup,Microsoft.Scripting.PlatformAdaptationLayer)">
            <summary>指定された起動時の引数を解析することで、セットアップ情報を更新します。</summary>
            <param name="args">解析する引数を指定します。</param>
            <param name="setup">解析によって変更される可能性のある <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を指定します。</param>
            <param name="languageSetup">解析によって変更される可能性のある <see cref="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.LanguageSetup"/> を指定します。</param>
            <param name="platform">解析に使用される <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を指定します。</param>
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException">On error.</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.BeforeParse">
            <summary>引数の解析の直前に呼ばれます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.AfterParse">
            <summary>引数の解析の直後に呼ばれます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.ParseArgument(System.String)">
            <summary>指定された単一の引数を解析します。</summary>
            <param name="arg">解析する引数の値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.IgnoreRemainingArgs">
            <summary>解析されなかった残りの引数を無視します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.PopRemainingArgs">
            <summary>引数の読み取り位置を最後尾に移動させて、読み取ったすべての引数を返します。</summary>
            <returns>読み取ったすべての引数を含む配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.PeekNextArg">
            <summary>次の引数の値を取得します。</summary>
            <returns>次の引数の値。</returns>
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException">現在読み取っている引数は最後の引数です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.PopNextArg">
            <summary>次の引数を読み取り、読み取り位置を 1 つ先に進めます。</summary>
            <returns>次の引数の値。</returns>
            <exception cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException">現在読み取っている引数は最後の引数です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.PushArgBack">
            <summary>読み取り位置を 1 つ前に戻します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.InvalidOptionValue(System.String,System.String)">
            <summary>指定されたオプション名において指定された値が無効であることを示す <see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/> を返します。</summary>
            <param name="option">オプション名を指定します。</param>
            <param name="value">オプションの値を指定します。</param>
            <returns>値が無効であることを示す <see cref="T:Microsoft.Scripting.Hosting.Shell.InvalidOptionException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.GetHelp">
            <summary>コマンドライン オプションのヘルプを取得します。</summary>
            <returns>ヘルプを格納する <see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsHelp"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.RuntimeSetup">
            <summary>引数の解析によって変更される可能性のある <see cref="T:Microsoft.Scripting.Hosting.ScriptRuntimeSetup"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.LanguageSetup">
            <summary>引数の解析によって変更される可能性のある <see cref="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.LanguageSetup"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.Platform">
            <summary>解析で使用される <see cref="T:Microsoft.Scripting.PlatformAdaptationLayer"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.CommonConsoleOptions">
            <summary>引数の解析によって変更される <see cref="T:Microsoft.Scripting.Hosting.Shell.ConsoleOptions"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser.IgnoredArgs">
            <summary>解析がスキップされた引数のリストを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.OptionsHelp">
            <summary><see cref="M:Microsoft.Scripting.Hosting.Shell.OptionsParser.GetHelp"/> メソッドによって返されるコマンドライン オプションのヘルプを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsHelp.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsHelp"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="commandLine">コマンドラインのフォーマットを示す文字列を指定します。</param>
            <param name="options">オプション名および説明を格納するシーケンスを指定します。</param>
            <param name="environmentVariables">環境変数の名前および説明を格納するシーケンスを指定します。</param>
            <param name="comments">コメントを示す文字列を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsHelp.CommandLine">
            <summary>コマンドラインのフォーマットを示す文字列を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsHelp.Options">
            <summary>オプション名および説明を格納するコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsHelp.EnvironmentVariables">
            <summary>環境変数の名前および説明を格納するコレクションを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsHelp.Comments">
            <summary>コメントを示す文字列を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.OptionsParser`1">
            <summary>指定された言語固有のオプションを解析する <see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsParser"/> を表します。</summary>
            <typeparam name="TConsoleOptions">言語固有のオプションを指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsParser`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.ParseArgument(System.String)">
            <summary>指定された単一の引数を解析します。</summary>
            <param name="arg">解析する引数の値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.SetDlrOption(System.String)">
            <summary>環境変数に動的言語ランタイムに関するオプションを設定します。</summary>
            <param name="option">設定するオプションを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.SetDlrOption(System.String,System.String)">
            <summary>環境変数に動的言語ランタイムに関するオプションを設定します。</summary>
            <param name="option">設定するオプションの名前を指定します。</param>
            <param name="value">設定するオプションの値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.GetHelp">
            <summary>コマンドライン オプションのヘルプを取得します。</summary>
            <returns>ヘルプを格納する <see cref="T:Microsoft.Scripting.Hosting.Shell.OptionsHelp"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.ConsoleOptions">
            <summary>引数の解析によって変更される言語固有のオプションを取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.CommonConsoleOptions">
            <summary>引数の解析によって変更される <see cref="P:Microsoft.Scripting.Hosting.Shell.OptionsParser`1.ConsoleOptions"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.Style">
            <summary>コンソールの表示スタイルを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.Style.Prompt">
            <summary>文字列はプロンプトとして表示されます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.Style.Out">
            <summary>文字列は標準の出力として表示されます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.Style.Error">
            <summary>文字列はエラー出力として表示されます。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.Style.Warning">
            <summary>文字列は警告として表示されます。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole">
            <summary>タブ補完などの高度な機能を備えたコンソールを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._input">
            <summary>コンソールの入力バッファを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._current">
            <summary>現在の位置 (入力バッファへのインデックス) を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._autoIndentSize">
            <summary>現在の行で自動インデントのために表示される空白の個数を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._rendered">
            <summary>現在スクリーンにレンダリングされた出力の長さを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._history">
            <summary>コマンド履歴を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._options">
            <summary>現在の文脈で利用可能なタブオプションを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._cursor">
            <summary>カーソル アンカー (ルーチンが呼ばれた時のカーソルの位置) を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole._commandLine">
            <summary>このコンソールがアタッチされているコマンドラインを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.#ctor(Microsoft.Scripting.Hosting.Shell.CommandLine,System.Boolean)">
            <summary>アタッチするコマンドラインとコンソールが色つきであるかどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Hosting.Shell.SuperConsole"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="commandLine">このコンソールにアタッチするコマンドラインを指定します。</param>
            <param name="colorful">このコンソールに色をつけるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.ReadLine(System.Int32)">
            <summary>指定されたインデント幅でコンソールから 1 行を読み取ります。</summary>
            <param name="autoIndentSize">行の左端に挿入されるインデントの幅を指定します。</param>
            <returns>読み取られた文字列。文字列には自動インデントの幅も含まれます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.DisplayNextOption(System.ConsoleKeyInfo,System.Boolean)">
            <summary>
            オプションリストの次のオプションを表示するか、現在の入力プレフィックスで利用可能なオプションがない場合はビープを鳴らします。
            入力プレフィックスがない場合は単純にタブを出力します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Hosting.Shell.SuperConsole.OnEnter(System.Boolean)">
            <summary>Enter キーをハンドルします。現在の入力が空でない場合は履歴に追加します。</summary>
            <returns>入力文字列。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.History">
            <summary>コマンド履歴を管理するクラスです。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.SuperConsoleOptions">
            <summary>利用可能なオプションのリストを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor">
            <summary>カーソル位置を管理します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor._anchorTop">
            <summary>カーソルの開始位置の Y 座標を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Hosting.Shell.SuperConsole.Cursor._anchorLeft">
            <summary>カーソルの開始位置の X 座標を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.AmbiguousFileNameException">
            <summary>複数のファイル名があいまいである場合にスローされる例外を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.AmbiguousFileNameException.#ctor(System.String,System.String)">
            <summary>あいまいであるパスを使用して、<see cref="T:Microsoft.Scripting.AmbiguousFileNameException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="firstPath">あいまいである 1 番目のパスを指定します。</param>
            <param name="secondPath">あいまいである 2 番目のパスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.AmbiguousFileNameException.#ctor(System.String,System.String,System.String)">
            <summary>あいまいであるパスと例外を説明するメッセージを使用して、<see cref="T:Microsoft.Scripting.AmbiguousFileNameException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="firstPath">あいまいである 1 番目のパスを指定します。</param>
            <param name="secondPath">あいまいである 2 番目のパスを指定します。</param>
            <param name="message">例外を説明するメッセージを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.AmbiguousFileNameException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>あいまいであるパス、例外を説明するメッセージ、この例外の原因となった例外を使用して、<see cref="T:Microsoft.Scripting.AmbiguousFileNameException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="firstPath">あいまいである 1 番目のパスを指定します。</param>
            <param name="secondPath">あいまいである 2 番目のパスを指定します。</param>
            <param name="message">例外を説明するメッセージを指定します。</param>
            <param name="innerException">この例外の原因となった例外を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.AmbiguousFileNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.AmbiguousFileNameException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名が <c>null</c> であるか、または <see cref="P:Microsoft.Scripting.AmbiguousFileNameException.HResult"/> が 0 です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.AmbiguousFileNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo"/> を設定します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> 参照 (Visual Basic の場合は <c>Nothing</c>) です。</exception>
        </member>
        <member name="P:Microsoft.Scripting.AmbiguousFileNameException.FirstPath">
            <summary>あいまいなファイル名に対する 1 番目のファイルパスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.AmbiguousFileNameException.SecondPath">
            <summary>あいまいなファイル名に対する 2 番目のファイルパスを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.BinderOps">
            <summary>既定の DLR バインダーから呼び出しが生成されたヘルパーメソッドを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.MakeSymbolDictionary(System.String[],System.Object[])">
            <summary>指定された名前と値の配列の同じ位置の要素から <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> を作成します。</summary>
            <param name="names"><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納する名前を含んでいる配列を指定します。</param>
            <param name="values"><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納する値を含んでいる配列を指定します。</param>
            <returns>指定された名前と値の配列の同じ位置の要素から作成された <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.MakeDictionary``2(System.String[],System.Object[])">
            <summary>指定された名前と値の配列の同じ位置の要素から <see cref="T:System.Collections.Generic.Dictionary`2"/> を作成します。</summary>
            <typeparam name="TKey">作成するディクショナリのキーの型を指定します。<see cref="T:System.String"/> または <see cref="T:System.Object"/> である必要があります。</typeparam>
            <typeparam name="TValue">作成するディクショナリの値の型を指定します。</typeparam>
            <param name="names"><see cref="T:System.Collections.Generic.Dictionary`2"/> に格納する名前を含んでいる配列を指定します。</param>
            <param name="values"><see cref="T:System.Collections.Generic.Dictionary`2"/> に格納する値を含んでいる配列を指定します。</param>
            <returns>指定された名前と値の配列の同じ位置の要素から作成された <see cref="T:System.Collections.Generic.Dictionary`2"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.BadArgumentsForOperation(System.Linq.Expressions.ExpressionType,System.Object[])">
            <summary>指定された操作がオペランドの型が不正であるために失敗したことを示す例外を返します。</summary>
            <param name="op">失敗した操作を指定します。</param>
            <param name="args">操作の引数を指定します。</param>
            <returns>操作がオペランドの型が不正であるために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForIncorrectArgumentCount(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>引数の数が正しくないために失敗したことを示す例外を返します。</summary>
            <param name="methodName">不正な数の引数が渡されたメソッドの名前を指定します。</param>
            <param name="formalNormalArgumentCount">配列引数およびキーワード引数を含まない引数の数を指定します。</param>
            <param name="defaultArgumentCount">メソッド宣言の中で既定値のある引数の数を指定します。</param>
            <param name="providedArgumentCount">呼び出しサイトで渡された引数の数を指定します。</param>
            <param name="hasArgList">メソッド宣言に配列引数を含むかどうかを示す値を指定します。</param>
            <param name="keywordArgumentsProvided">呼び出しサイトでキーワード引数が渡されたかどうかを示す値を指定します。</param>
            <returns>引数の数が正しくないために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForIncorrectArgumentCount(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>引数の数が正しくないために失敗したことを示す例外を返します。</summary>
            <param name="methodName">不正な数の引数が渡されたメソッドの名前を指定します。</param>
            <param name="minFormalNormalArgumentCount">配列引数およびキーワード引数を含まないこのメソッドが許容する引数の数の最小値を指定します。</param>
            <param name="maxFormalNormalArgumentCount">配列引数およびキーワード引数を含まないこのメソッドが許容する引数の数の最大値を指定します。</param>
            <param name="defaultArgumentCount">メソッド宣言の中で既定値のある引数の数を指定します。</param>
            <param name="providedArgumentCount">呼び出しサイトで渡された引数の数を指定します。</param>
            <param name="hasArgList">メソッド宣言に配列引数を含むかどうかを示す値を指定します。</param>
            <param name="keywordArgumentsProvided">呼び出しサイトでキーワード引数が渡されたかどうかを示す値を指定します。</param>
            <returns>引数の数が正しくないために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForIncorrectArgumentCount(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>引数の数が正しくないために失敗したことを示す例外を返します。</summary>
            <param name="methodName">不正な数の引数が渡されたメソッドの名前を指定します。</param>
            <param name="formalNormalArgumentCount">配列引数およびキーワード引数を含まない引数の数を指定します。</param>
            <param name="defaultArgumentCount">メソッド宣言の中で既定値のある引数の数を指定します。</param>
            <param name="providedArgumentCount">呼び出しサイトで渡された引数の数を指定します。</param>
            <returns>引数の数が正しくないために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForIncorrectArgumentCount(System.String,System.Int32,System.Int32)">
            <summary>引数の数が正しくないために失敗したことを示す例外を返します。</summary>
            <param name="methodName">不正な数の引数が渡されたメソッドの名前を指定します。</param>
            <param name="expectedArgumentCount">このメソッドで予期されている引数の数を指定します。</param>
            <param name="providedArgumentCount">呼び出しサイトで渡された引数の数を指定します。</param>
            <returns>引数の数が正しくないために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForExtraKeywordArgument(System.String,System.String)">
            <summary>予期しないキーワード引数が渡されたために失敗したことを示す例外を返します。</summary>
            <param name="methodName">予期しないキーワード引数が渡されたメソッドの名前を指定します。</param>
            <param name="argumentName">渡されたキーワード引数の名前を指定します。</param>
            <returns>予期しないキーワード引数が渡されたために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForDuplicateKeywordArgument(System.String,System.String)">
            <summary>重複したキーワード引数が渡されたために失敗したことを示す例外を返します。</summary>
            <param name="methodName">重複したキーワード引数が渡されたメソッドの名前を指定します。</param>
            <param name="argumentName">重複のあるキーワード引数の名前を指定します。</param>
            <returns>重複したキーワード引数が渡されたために失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.TypeErrorForNonInferrableMethod(System.String)">
            <summary>メソッドの型引数を推論できないため失敗したことを示す例外を返します。</summary>
            <param name="methodName">推論できない型引数をもつメソッドの名前を指定します。</param>
            <returns>メソッドの型引数を推論できないため失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.SimpleTypeError(System.String)">
            <summary>指定されたメッセージを使用して、新しい <see cref="T:Microsoft.Scripting.ArgumentTypeException"/> を作成します。</summary>
            <param name="message">メッセージを指定します。</param>
            <returns>新しく作成された <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.InvalidSplatteeError(System.String,System.String)">
            <summary>散開される引数に渡される実引数の型がシーケンスでないため失敗したことを示す例外を返します。</summary>
            <param name="methodName">シーケンス以外の型のオブジェクトが散開引数に渡されたメソッドの名前を指定します。</param>
            <param name="typeName">散開引数に渡されたオブジェクトの型の名前を指定します。</param>
            <returns>散開される引数に渡される実引数の型がシーケンスでないため失敗したことを示す <see cref="T:Microsoft.Scripting.ArgumentTypeException"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.InvokeMethod(System.Reflection.MethodBase,System.Object,System.Object[])">
            <summary>指定されたオブジェクトに対するメソッドをリフレクションを使用して呼び出します。</summary>
            <param name="mb">呼び出すメソッドを指定します。</param>
            <param name="obj">メソッドを呼び出すオブジェクトを指定します。</param>
            <param name="args">メソッドに渡す実引数を指定します。</param>
            <returns>メソッドの戻り値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.InvokeConstructor(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>指定されたコンストラクタをリフレクションを使用して呼び出します。</summary>
            <param name="ci">呼び出すコンストラクタを指定します。</param>
            <param name="args">コンストラクタに渡す実引数を指定します。</param>
            <returns>指定されたコンストラクタによって作成されたオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.CheckDictionaryMembers(System.Collections.IDictionary,System.String[],System.Type[])">
            <summary>指定されたディクショナリに指定された名前が存在して、名前に対する値が指定された型であるかどうかを判断します。</summary>
            <param name="dict">調べるディクショナリを指定します。</param>
            <param name="names">ディクショナリに含まれている項目の名前が格納された配列を指定します。</param>
            <param name="types">ディクショナリの <paramref name="names"/> 配列に対応する要素の型が格納された配列を指定します。この引数は省略可能です。</param>
            <returns>指定されたディクショナリに指定された名前が存在して、名前に対する値が指定された型である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BinderOps.SetEvent(Microsoft.Scripting.Actions.EventTracker,System.Object)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.EventTracker"/> に指定された値を関連付けられているかどうかを判断します。</summary>
            <param name="eventTracker">値が関連付けられている <see cref="T:Microsoft.Scripting.Actions.EventTracker"/> を指定します。</param>
            <param name="value">関連付けられている値を指定します。</param>
            <exception cref="T:System.ArgumentException">イベントが指定された値に関連付けられていません。</exception>
            <exception cref="T:Microsoft.Scripting.ArgumentTypeException">関連付けられている値が期待された型ではありません。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.CallTypes">
            <summary>メソッドを呼び出す方法を指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.CallTypes.None">
            <summary>すべての引数を明示してメソッドを呼び出します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.CallTypes.ImplicitInstance">
            <summary>暗黙のインスタンス引数を含んだままメソッドを呼び出します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Cast">
            <summary>実行時にサポートされる明示的なキャストを実装します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToBoolean(System.Object)">
            <summary>指定されたオブジェクトをブール値に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToByte(System.Object)">
            <summary>指定されたオブジェクトを 8 ビット符号なし整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToChar(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Char"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToDecimal(System.Object)">
            <summary>指定されたオブジェクトを 10 進数値に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToDouble(System.Object)">
            <summary>指定されたオブジェクトを倍精度浮動小数点数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToInt16(System.Object)">
            <summary>指定されたオブジェクトを 16 ビット符号付き整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToInt32(System.Object)">
            <summary>指定されたオブジェクトを 32 ビット符号付き整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToInt64(System.Object)">
            <summary>指定されたオブジェクトを 64 ビット符号付き整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToSByte(System.Object)">
            <summary>指定されたオブジェクトを 8 ビット符号付き整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToSingle(System.Object)">
            <summary>指定されたオブジェクトを単精度浮動小数点数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToUInt16(System.Object)">
            <summary>指定されたオブジェクトを 16 ビット符号なし整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToUInt32(System.Object)">
            <summary>指定されたオブジェクトを 32 ビット符号なし整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToUInt64(System.Object)">
            <summary>指定されたオブジェクトを 64 ビット符号なし整数に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableBoolean(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Boolean&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableByte(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Byte&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableChar(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Char&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableDecimal(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Decimal&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableDouble(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Double&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableInt16(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Int16&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableInt32(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Int32&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableInt64(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Int64&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableSByte(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.SByte&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableSingle(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.Single&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableUInt16(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.UInt16&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableUInt32(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.UInt32&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.ExplicitCastToNullableUInt64(System.Object)">
            <summary>指定されたオブジェクトを <see cref="T:System.Nullable&lt;System.UInt64&gt;"/> に変換します。</summary>
            <param name="o">変換されるオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定されたオブジェクトを型変換できませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.NewNullableInstance(System.Type)">
            <summary>指定された型を基にする <see cref="T:System.Nullable`1"/> を作成します。</summary>
            <param name="type">基になる型を指定します。</param>
            <returns>型を基にする <see cref="T:System.Nullable`1"/> のインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.Explicit(System.Object,System.Type)">
            <summary>オブジェクトを指定された型に明示的に変換します。ユーザー定義の型変換演算子は考慮されません。</summary>
            <param name="o">型を変換するオブジェクトを指定します。</param>
            <param name="to">オブジェクトの変換先の型を指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定された型への変換が失敗しました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Cast.Explicit``1(System.Object)">
            <summary>オブジェクトを指定された型に明示的に変換します。ユーザー定義の型変換演算子は考慮されません。</summary>
            <typeparam name="T">変換先の型を指定します。</typeparam>
            <param name="o">型を変換するオブジェクトを指定します。</param>
            <returns>変換されたオブジェクト。</returns>
            <exception cref="T:System.InvalidCastException">指定された型への変換が失敗しました。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.CodeDomCodeGen">
            <summary>Code DOM からのソースコード生成を行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.CodeDomCodeGen.SourceSpanKey">
            <summary><see cref="P:System.CodeDom.CodeObject.UserData"/> でインスタンスの元のソースファイル内での位置を追跡するために使用されるキーを示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteExpressionStatement(System.CodeDom.CodeExpressionStatement)">
            <summary>指定された式文を表す <see cref="T:System.CodeDom.CodeExpressionStatement"/> に対するコードを生成します。</summary>
            <param name="statement">コードを生成する <see cref="T:System.CodeDom.CodeExpressionStatement"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteFunctionDefinition(System.CodeDom.CodeMemberMethod)">
            <summary>指定されたメソッド宣言を表す <see cref="T:System.CodeDom.CodeMemberMethod"/> に対するコードを生成します。</summary>
            <param name="func">コードを生成する <see cref="T:System.CodeDom.CodeMemberMethod"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.QuoteString(System.String)">
            <summary>指定された文字列をリテラル形式に変換します。</summary>
            <param name="val">リテラル形式に変換する文字列値を指定します。</param>
            <returns>リテラル形式に変換された文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.GenerateCode(System.CodeDom.CodeMemberMethod,Microsoft.Scripting.Runtime.LanguageContext,System.String,Microsoft.Scripting.SourceCodeKind)">
            <summary>指定されたメソッド宣言を表す <see cref="T:System.CodeDom.CodeMemberMethod"/> に対するコードを生成します。</summary>
            <param name="codeDom">コードを生成するメソッド宣言を表す <see cref="T:System.CodeDom.CodeMemberMethod"/> を指定します。</param>
            <param name="context"><see cref="T:Microsoft.Scripting.SourceUnit"/> を作成する <see cref="T:Microsoft.Scripting.Runtime.LanguageContext"/> を指定します。</param>
            <param name="path">生成されるソースコードのパスを指定します。</param>
            <param name="kind">生成されるソースコードの種類を指定します。</param>
            <returns>生成されたソースコードに対する翻訳入力単位を表す <see cref="T:Microsoft.Scripting.SourceUnit"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
            <summary>指定された引数の値への参照を表す <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> からソースコードを生成します。</summary>
            <param name="expression">コードを生成する <see cref="T:System.CodeDom.CodeArgumentReferenceExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteSnippetExpression(System.CodeDom.CodeSnippetExpression)">
            <summary>指定されたリテラル式を表す <see cref="T:System.CodeDom.CodeSnippetExpression"/> からソースコードを生成します。</summary>
            <param name="expression">コードを生成する <see cref="T:System.CodeDom.CodeSnippetExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteSnippetStatement(System.CodeDom.CodeSnippetStatement)">
            <summary>指定されたリテラルコード片を使用するステートメントを表す <see cref="T:System.CodeDom.CodeSnippetStatement"/> からソースコードを生成します。</summary>
            <param name="statement">コードを生成する <see cref="T:System.CodeDom.CodeSnippetStatement"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteStatement(System.CodeDom.CodeStatement)">
            <summary>指定されたステートメントを表す <see cref="T:System.CodeDom.CodeStatement"/> からソースコードを生成します。</summary>
            <param name="statement">コードを生成する <see cref="T:System.CodeDom.CodeStatement"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteExpression(System.CodeDom.CodeExpression)">
            <summary>指定された式を表す <see cref="T:System.CodeDom.CodeExpression"/> からソースコードを生成します。</summary>
            <param name="expression">コードを生成する <see cref="T:System.CodeDom.CodeExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WritePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
            <summary>指定されたプリミティブ データ型の値を表す <see cref="T:System.CodeDom.CodePrimitiveExpression"/> からソースコードを生成します。</summary>
            <param name="expression">コードを生成する <see cref="T:System.CodeDom.CodePrimitiveExpression"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CodeDomCodeGen.WriteCallExpression(System.CodeDom.CodeMethodInvokeExpression)">
            <summary>指定されたメソッド呼び出しを表す <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> からソースコードを生成します。</summary>
            <param name="m">コードを生成する <see cref="T:System.CodeDom.CodeMethodInvokeExpression"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CodeDomCodeGen.Writer">
            <summary>生成されたコードを格納する <see cref="T:Microsoft.Scripting.Runtime.PositionTrackingWriter"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ISlice">
            <summary>Python の Slice オブジェクトに影響された数値配列のスライスを取得する場合に有効なインターフェイスです。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.StartIndex">
            <summary>スライスの開始インデックスを取得します。開始インデックスが定義されていない場合は <c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.StopIndex">
            <summary>スライスの終了インデックスを取得します。終了インデックスが定義されていない場合は <c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ISlice.StepCount">
            <summary>取得するステップの長さを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IdDispenser">
            <summary>オブジェクトに対する一意識別子の割り当てを行います。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.GetObject(System.Int64)">
            <summary>指定された一意識別子に関連付けられたオブジェクトを取得します。</summary>
            <param name="id">関連付けられたオブジェクトを取得する一意識別子を指定します。</param>
            <returns>一意識別子に関連付けられたオブジェクト。関連付けられたオブジェクトが存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.GetId(System.Object)">
            <summary>指定されたオブジェクトに対する一意識別子を取得します。</summary>
            <param name="o">一意識別子を取得するオブジェクトを指定します。</param>
            <returns>オブジェクトに関連付けられた一意識別子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IdDispenser.Cleanup">
            <summary>ハッシュテーブルを走査して、空の要素を削除します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IdDispenser.Wrapper">
            <summary>オブジェクトへの弱参照、ハッシュ値、オブジェクト ID をキャッシュする弱参照ラッパーを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IdDispenser.WrapperComparer">
            <summary><see cref="T:Microsoft.Scripting.Runtime.IdDispenser.Wrapper"/> を透過エンベロープとして扱う等値比較子を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.LocalsDictionary">
            <summary>スコープ内のローカル変数のディクショナリを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary">
            <summary>
            最適化されたスレッドセーフのシンボルディクショナリに対する抽象基底クラスです。
            実装者はこのクラスから派生して、<see cref="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.ExtraKeys"/>、<see cref="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TrySetExtraValue(Microsoft.Scripting.SymbolId,System.Object)"/> および <see cref="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TryGetExtraValue(Microsoft.Scripting.SymbolId,System.Object@)"/> をオーバーライドしてください。
            値の検索時は最初に最適化された関数を使用して追加のキーが検索されます。
            値が見つからなかった場合は、基になる .NET ディクショナリに値が格納されます。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.BaseSymbolDictionary">
            <summary>
            <see cref="T:Microsoft.Scripting.SymbolId"/> を使用するディクショナリの基本クラスです。
            <see cref="T:Microsoft.Scripting.SymbolId"/> ディクショナリはクラスのメンバ、関数の環境、関数のローカル変数、およびその他の名前によってインデックス化された場所の検索に使用される高速なディクショナリです。
            <see cref="T:Microsoft.Scripting.SymbolId"/> ディクショナリは <see cref="T:Microsoft.Scripting.SymbolId"/> と
            (直接ユーザーコードに公開された場合は <see cref="T:System.Collections.Generic.Dictionary&lt;System.Object, System.Object&gt;"/> としてのディクショナリへの遅延バインディングアクセスをサポートする)
            <see cref="T:System.Object"/> によるキーをサポートします。
            <see cref="T:System.Object"/> によるインデックス化の場合は <c>null</c> は有効なキーとなります。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BaseSymbolDictionary.ObjectKeys">
            <summary><see cref="T:Microsoft.Scripting.SymbolId"/> ディクショナリのオブジェクトを格納するキーを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.BaseSymbolDictionary"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.GetValueHashCode">
            <summary>値のハッシュコードを求めます。常に <see cref="T:Microsoft.Scripting.ArgumentTypeException"/> をスローします。</summary>
            <exception cref="T:Microsoft.Scripting.ArgumentTypeException">ディクショナリはハッシュ可能ではありません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.ValueEquals(System.Object)">
            <summary>このオブジェクトと指定されたオブジェクトに含まれている値が等しいかどうかを判断します。</summary>
            <param name="other">値を比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトと指定されたオブジェクトに含まれている値が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.NullToObj(System.Object)">
            <summary>指定されたオブジェクトが <c>null</c> の場合は <c>null</c> オブジェクトに変換します。</summary>
            <param name="obj">変換するオブジェクトを指定します。</param>
            <returns>オブジェクトが <c>null</c> の場合は <c>null</c> オブジェクト。それ以外の場合は元のオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.ObjToNull(System.Object)">
            <summary>指定された <c>null</c> オブジェクトを <c>null</c> に変換します。</summary>
            <param name="obj">変換するオブジェクトを指定します。</param>
            <returns>オブジェクトが <c>null</c> オブジェクトの場合は <c>null</c>。それ以外の場合は元のオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.BaseSymbolDictionary.IsNullObject(System.Object)">
            <summary>指定されたオブジェクトが <c>null</c> オブジェクトかどうかを判断します。</summary>
            <param name="obj">判断するオブジェクトを指定します。</param>
            <returns>オブジェクトが <c>null</c> オブジェクトの場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TrySetExtraValue(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>追加の値の設定を試み、指定されたキーに対する値が正常に設定されたかどうかを示す値を返します。</summary>
            <param name="key">設定する値に対するキーを指定します。</param>
            <param name="value">設定する値を指定します。</param>
            <returns>指定されたキーに対して値が正常に設定された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TryGetExtraValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>追加の値の取得を試み、指定されたキーに対する値が正常に取得されたかどうかを示す値を返します。値が <see cref="T:Microsoft.Scripting.Runtime.Uninitialized"/> であっても <c>true</c> を返します。</summary>
            <param name="key">取得する値に対するキーを指定します。</param>
            <param name="value">取得された値が格納されます。</param>
            <returns>指定されたキーに対して値が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Add(System.Object,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に追加します。</summary>
            <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.ContainsKey(System.Object)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に格納されているかどうかを確認します。</summary>
            <param name="key"><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Remove(System.Object)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> から削除します。</summary>
            <param name="key">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="key"/> が元の <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TryGetValue(System.Object,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="key">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に格納されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Clear">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> からすべての項目を削除します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Add(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用する <see cref="T:Microsoft.Scripting.SymbolId"/>。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.ContainsKey(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Remove(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.TryGetValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に格納されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.AsObjectKeyedDictionary">
            <summary>このオブジェクトを <see cref="T:System.Collections.Generic.IDictionary`2"/> として取得します。</summary>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> という形式で取得された現在のオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CustomSymbolDictionary.GetEnumerator">
            <summary>このコレクションの要素を列挙するための列挙子を返します。</summary>
            <returns>要素の列挙に使用される列挙子。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.ExtraKeys">
            <summary>モジュールの最適化された実装によってキャッシュされる追加のキーを取得します。</summary>
            <returns>追加のキーを表す <see cref="T:Microsoft.Scripting.SymbolId"/> の配列。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Keys">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Values">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> の値を保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Item(System.Object)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="key">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Count">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> に格納されている要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.IsReadOnly">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CustomSymbolDictionary"/> が読み取り専用かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.Item(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="name">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CustomSymbolDictionary.SymbolAttributes">
            <summary><see cref="T:Microsoft.Scripting.SymbolId"/> がキーである属性のディクショナリを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.CheckedDictionaryEnumerator">
            <summary>
            列挙の状態を監視して無効な列挙操作で例外を発生させる列挙子の抽象基本クラスを表します。
            このクラスは主に非ジェネリック ディクショナリの列挙に使用されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.CheckedDictionaryEnumerator.MoveNext">
            <summary>列挙子をコレクションの次の要素に進めます。</summary>
            <returns>列挙子が次の要素に正常に進んだ場合は <c>true</c>。列挙子がコレクションの末尾を越えた場合は <c>false</c>。</returns>
            <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.CheckedDictionaryEnumerator.Reset">
            <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
            <exception cref="T:System.InvalidOperationException">列挙子が作成された後に、コレクションが変更されました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.CheckedDictionaryEnumerator.Dispose">
            <summary>アンマネージ リソースの解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.CheckedDictionaryEnumerator.MoveNextCore">
            <summary>列挙子をコレクションの次の要素に進めます。</summary>
            <returns>列挙子が次の要素に正常に進んだ場合は <c>true</c>。列挙子がコレクションの末尾を越えた場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.CheckedDictionaryEnumerator.ResetCore">
            <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.Entry">
            <summary>現在のディクショナリ エントリのキーと値の両方を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.Key">
            <summary>現在のディクショナリ エントリのキーを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.Value">
            <summary>現在のディクショナリ エントリの値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.Current">
            <summary>コレクション内の現在の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.System#Collections#Generic#IEnumerator{System#Collections#Generic#KeyValuePair{System#Object@System#Object}}#Current">
            <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.KeyCore">
            <summary>現在のディクショナリ エントリのキーを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.CheckedDictionaryEnumerator.ValueCore">
            <summary>現在のディクショナリ エントリの値を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LocalsDictionary.#ctor(System.Runtime.CompilerServices.IRuntimeVariables,Microsoft.Scripting.SymbolId[])">
            <summary>指定されたランタイム変数と名前を使用して、<see cref="T:Microsoft.Scripting.Runtime.LocalsDictionary"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="locals">ローカル変数の値を格納するランタイム変数を指定します。</param>
            <param name="symbols">ローカル変数の名前を表す <see cref="T:Microsoft.Scripting.SymbolId"/> の配列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LocalsDictionary.TrySetExtraValue(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>追加の値の設定を試み、指定されたキーに対する値が正常に設定されたかどうかを示す値を返します。</summary>
            <param name="key">設定する値に対するキーを指定します。</param>
            <param name="value">設定する値を指定します。</param>
            <returns>指定されたキーに対して値が正常に設定された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.LocalsDictionary.TryGetExtraValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>追加の値の取得を試み、指定されたキーに対する値が正常に取得されたかどうかを示す値を返します。値が <see cref="T:Microsoft.Scripting.Runtime.Uninitialized"/> であっても <c>true</c> を返します。</summary>
            <param name="key">取得する値に対するキーを指定します。</param>
            <param name="value">取得された値が格納されます。</param>
            <returns>指定されたキーに対して値が正常に取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.LocalsDictionary.ExtraKeys">
            <summary>モジュールの最適化された実装によってキャッシュされる追加のキーを取得します。</summary>
            <returns>追加のキーを表す <see cref="T:Microsoft.Scripting.SymbolId"/> の配列。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.PositionTrackingWriter">
            <summary>テキストが追加された場合に効率的に (行, 列) の情報を追跡し、元のソースコードの生成されたソースコードの間の行マッピングを収集することで、正しいデバッグ情報を生成できるようにします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.PositionTrackingWriter"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.MapLocation(System.CodeDom.CodeLinePragma)">
            <summary>ライターの現在の位置を指定された元のソースコードの位置と対応するとマークします。</summary>
            <param name="linePragma">生成されたコードで現在の位置と対応する行プラグマを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.GetLineMap">
            <summary>このライターの生成されたソースコードから元のソースコードへの行マッピングを取得します。</summary>
            <returns>取得された行マッピング。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.GetFileMap">
            <summary>このライターの生成されたソースコードの行番号から元のソースコードのファイル名へのマッピングを取得します。</summary>
            <returns>行番号からファイル名へのマッピング。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.Write(System.Char)">
            <summary>文字列に文字を書き込みます。</summary>
            <param name="value">書き込む文字。</param>
            <exception cref="T:System.ObjectDisposedException">ライターが閉じられました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.Write(System.String)">
            <summary>現在の文字列に文字列を書き込みます。</summary>
            <param name="value">書き込む文字列。</param>
            <exception cref="T:System.ObjectDisposedException">ライターが閉じられました。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PositionTrackingWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>文字配列の一部を文字列に書き込みます。</summary>
            <param name="buffer">データの書き込み元の文字配列。</param>
            <param name="index">データの読み取りを開始する、バッファー内の位置。</param>
            <param name="count">書き込む文字の最大数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> または <paramref name="count"/> が負の値です。</exception>
            <exception cref="T:System.ArgumentException">(<paramref name="index"/> + <paramref name="count"/>) の値が <paramref name="buffer"/>.Length よりも大きな値です。</exception>
            <exception cref="T:System.ObjectDisposedException">ライターが閉じられました。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Utils.CacheDict`2">
            <summary>
            構築時に指定した最大容量を保持するキャッシュに使用されるディクショナリに似たオブジェクトを提供します。
            このクラスはスレッドセーフではありません。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CacheDict`2.#ctor(System.Int32)">
            <summary>最大容量を指定して、<see cref="T:Microsoft.Scripting.Utils.CacheDict`2"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="capacity">格納する要素の最大量を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CacheDict`2.TryGetValue(`0,`1@)">
            <summary>指定されたキーに関連付けられた値の取得を試みます。</summary>
            <param name="key">関連付けられた値を取得するキーを指定します。</param>
            <param name="value">キーに関連付けられた値が返されます。</param>
            <returns>キーに対応する値が存在する場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CacheDict`2.Add(`0,`1)">
            <summary>指定されたキーおよび値を追加します。すでにキーが存在していた場合は元の値を置き換えます。</summary>
            <param name="key">追加するキーを指定します。</param>
            <param name="value">キーに関連付けられた値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Utils.CacheDict`2.Item(`0)">
            <summary>指定されたキーに関連付けられた値を取得または設定します。</summary>
            <param name="key">値に対応するキーを指定します。</param>
            <returns>キーに関連付けられた値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.DynamicUtils">
            <summary>動的操作と <see cref="T:System.Dynamic.DynamicMetaObject"/> に関するユーティリティ メソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.DynamicUtils.ObjectToMetaObject(System.Object,System.Linq.Expressions.Expression)">
            <summary>ランタイム値およびこの <see cref="T:System.Dynamic.DynamicMetaObject"/> をバインディングプロセス中に表す式に対する <see cref="T:System.Dynamic.DynamicMetaObject"/> のインスタンスを作成します。</summary>
            <param name="argValue"><see cref="T:System.Dynamic.DynamicMetaObject"/> によって表されるランタイム値を指定します。</param>
            <param name="parameterExpression">この <see cref="T:System.Dynamic.DynamicMetaObject"/> をバインディングプロセス中に表す式を指定します。</param>
            <returns><see cref="T:System.Dynamic.DynamicMetaObject"/> の新しいインスタンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.DynamicUtils.LightBind``1(System.Dynamic.DynamicMetaObjectBinder,System.Runtime.CompilerServices.CallSite{``0},System.Object[],System.Int32)">
            <summary>引数に対するバインディングを行い <see cref="T:System.Runtime.CompilerServices.CallSite`1"/> のターゲットを更新します。</summary>
            <typeparam name="TDelegate"><see cref="T:System.Runtime.CompilerServices.CallSite`1"/> のターゲットの型を指定します。</typeparam>
            <param name="binder">動的操作を実際にバインドする <see cref="T:System.Dynamic.DynamicMetaObjectBinder"/> を指定します。</param>
            <param name="site">操作のバインド対象である <see cref="T:System.Runtime.CompilerServices.CallSite`1"/> を指定します。</param>
            <param name="args">動的操作の引数の配列を指定します。</param>
            <param name="compilationThreshold">インタプリタがコンパイルを開始するまでの繰り返し数を指定します。</param>
            <returns><see cref="T:System.Runtime.CompilerServices.CallSite`1"/> のターゲットを置き換える新しいデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.DynamicUtils.Bind``1(System.Dynamic.DynamicMetaObjectBinder,System.Object[])">
            <summary>指定された引数に対して動的操作のバインディングを実行します。</summary>
            <typeparam name="TDelegate">バインディングで生成されるデリゲートの型を指定します。</typeparam>
            <param name="binder">バインディングを実行する <see cref="T:System.Dynamic.DynamicMetaObjectBinder"/> を指定します。</param>
            <param name="args">動的操作の引数の配列を指定します。</param>
            <returns>バインディングの結果生成されたデリゲート。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.EnumUtils">
            <summary>列挙体メンバ同士の演算に関するメソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.EnumUtils.BitwiseOr(System.Object,System.Object)">
            <summary>指定された 2 つの列挙体メンバに対してビットごとの OR 演算を実行し結果を 1 番目のオペランドの型に変換します。</summary>
            <param name="self">ビットごとの OR 演算を実行する 1 番目のオペランドを指定します。</param>
            <param name="other">ビットごとの OR 演算を実行する 2 番目のオペランドを指定します。</param>
            <returns>2 つの列挙体メンバのビットごとの OR 演算の結果を 1 番目のオペランドの型に変換した値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.EnumUtils.BitwiseAnd(System.Object,System.Object)">
            <summary>指定された 2 つの列挙体メンバに対してビットごとの AND 演算を実行し結果を 1 番目のオペランドの型に変換します。</summary>
            <param name="self">ビットごとの AND 演算を実行する 1 番目のオペランドを指定します。</param>
            <param name="other">ビットごとの AND 演算を実行する 2 番目のオペランドを指定します。</param>
            <returns>2 つの列挙体メンバのビットごとの AND 演算の結果を 1 番目のオペランドの型に変換した値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.EnumUtils.ExclusiveOr(System.Object,System.Object)">
            <summary>指定された 2 つの列挙体メンバに対してビットごとの XOR 演算を実行し結果を 1 番目のオペランドの型に変換します。</summary>
            <param name="self">ビットごとの XOR 演算を実行する 1 番目のオペランドを指定します。</param>
            <param name="other">ビットごとの XOR 演算を実行する 2 番目のオペランドを指定します。</param>
            <returns>2 つの列挙体メンバのビットごとの XOR 演算の結果を 1 番目のオペランドの型に変換した値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.EnumUtils.OnesComplement(System.Object)">
            <summary>指定された列挙体メンバに対して 1 の補数を求め結果をその列挙型に変換します。</summary>
            <param name="self">1 の補数を求める列挙体メンバを指定します。</param>
            <returns>1 の補数の値を列挙型に変換した値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.MathUtils">
            <summary>数学と任意長整数に関するユーティリティ メソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.FloorDivideUnchecked(System.Int32,System.Int32)">
            <summary>2 つの 32 ビット符号付き整数の商を計算して、結果を負の無限大に丸めます。</summary>
            <param name="dividend">被除数を指定します。</param>
            <param name="divisor">除数を指定します。</param>
            <returns>2 つの数値の商を負の無限大に丸めた数。</returns>
            <exception cref="T:System.DivideByZeroException"><paramref name="divisor"/> は 0 です。</exception>
            <remarks>呼び出し元はオーバーフローをチェックする必要があります。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.FloorDivideUnchecked(System.Int64,System.Int64)">
            <summary>2 つの 64 ビット符号付き整数の商を計算して、結果を負の無限大に丸めます。</summary>
            <param name="dividend">被除数を指定します。</param>
            <param name="divisor">除数を指定します。</param>
            <returns>2 つの数値の商を負の無限大に丸めた数。</returns>
            <exception cref="T:System.DivideByZeroException"><paramref name="divisor"/> は 0 です。</exception>
            <remarks>呼び出し元はオーバーフローをチェックする必要があります。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.FloorRemainder(System.Int32,System.Int32)">
            <summary>2 つの 32 ビット符号付き整数の丸め除算の剰余を計算します。</summary>
            <param name="dividend">被除数を指定します。</param>
            <param name="divisor">除数を指定します。</param>
            <returns>指定された数値の丸め除算の剰余。</returns>
            <exception cref="T:System.DivideByZeroException"><paramref name="divisor"/> は 0 です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.FloorRemainder(System.Int64,System.Int64)">
            <summary>2 つの 64 ビット符号付き整数の丸め除算の剰余を計算します。</summary>
            <param name="dividend">被除数を指定します。</param>
            <param name="divisor">除数を指定します。</param>
            <returns>指定された数値の丸め除算の剰余。</returns>
            <exception cref="T:System.DivideByZeroException"><paramref name="divisor"/> は 0 です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.RoundAwayFromZero(System.Double,System.Int32)">
            <summary>倍精度浮動小数点数を指定した小数点部の桁数に丸めます。数値が 2 つの数値の中間に位置するときは 0 から遠い方に丸められます。</summary>
            <param name="value">丸め対象の倍精度浮動小数点数を指定します。</param>
            <param name="precision">丸めを行う小数点部の桁数を指定します。負の値を指定した場合、丸めは整数部の桁数で行われます。</param>
            <returns><paramref name="value"/> を <paramref name="precision"/> によって表される桁で丸めた数値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.IsNegativeZero(System.Double)">
            <summary>倍精度浮動小数点数が -0 であるかどうかを判断します。</summary>
            <param name="value">-0 かどうかを判断する倍精度浮動小数点数を指定します。</param>
            <returns>倍精度浮動小数点数が -0 である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Hypot(System.Double,System.Double)">
            <summary>指定された 2 つの数値を底辺および高さとする直角三角形の斜辺を計算します。</summary>
            <param name="x">直角三角形の底辺の長さを指定します。</param>
            <param name="y">直角三角形の高さを指定します。</param>
            <returns>指定された直角三角形の斜辺。<c>Math.Sqrt(x * x + y * y)</c> と等しくなります。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.GetRandBits(System.Random,System.Int32)">
            <summary>指定されたビット数の乱数を返します。</summary>
            <param name="generator">乱数を生成する乱数ジェネレーターを指定します。</param>
            <param name="bits">返される乱数のビット数を指定します。</param>
            <returns>指定されたビット数の乱数を表す任意長整数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="bits"/> は 0 以下です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.NextBigInt(System.Random,System.Numerics.BigInteger)">
            <summary>指定された最大値より小さい 0 以上の乱数を返します。</summary>
            <param name="generator">乱数を生成する乱数ジェネレーターを指定します。</param>
            <param name="maxValue">生成される乱数の排他的上限値。 <paramref name="maxValue"/> は 0 より大きな値である必要があります。</param>
            <returns>0 以上で <paramref name="maxValue"/> 未満の任意長整数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> が 0 以下です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.NextBigInteger(System.Random,Microsoft.Scripting.Numerics.BigInteger)">
            <summary>指定された最大値より小さい 0 以上の乱数を返します。</summary>
            <param name="generator">乱数を生成する乱数ジェネレーターを指定します。</param>
            <param name="maxValue">生成される乱数の排他的上限値。 <paramref name="maxValue"/> は 0 より大きな値である必要があります。</param>
            <returns>0 以上で <paramref name="maxValue"/> 未満の任意長整数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="generator"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> が 0 以下です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.TryToFloat64(System.Numerics.BigInteger,System.Double@)">
            <summary>任意長整数の倍精度浮動小数点数への変換を試みます。</summary>
            <param name="value">倍精度浮動小数点数への変換を行う任意長整数を指定します。</param>
            <param name="result">変換された倍精度浮動小数点数が返されます。</param>
            <returns>任意長整数を倍精度浮動小数点数に変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.TryToFloat64(Microsoft.Scripting.Numerics.BigInteger,System.Double@)">
            <summary>任意長整数の倍精度浮動小数点数への変換を試みます。</summary>
            <param name="value">倍精度浮動小数点数への変換を行う任意長整数を指定します。</param>
            <param name="result">変換された倍精度浮動小数点数が返されます。</param>
            <returns>任意長整数を倍精度浮動小数点数に変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.AsInt32(System.Numerics.BigInteger,System.Int32@)">
            <summary>任意長整数の 32 ビット符号付き整数への変換を試みます。</summary>
            <param name="value">32 ビット符号付き整数へ変換する任意長整数を指定します。</param>
            <param name="result">変換された 32 ビット符号付き整数が返されます。</param>
            <returns>任意長整数を 32 ビット符号付き整数へ変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.AsInt64(System.Numerics.BigInteger,System.Int64@)">
            <summary>任意長整数の 64 ビット符号付き整数への変換を試みます。</summary>
            <param name="value">64 ビット符号付き整数へ変換する任意長整数を指定します。</param>
            <param name="result">変換された 64 ビット符号付き整数が返されます。</param>
            <returns>任意長整数を 64 ビット符号付き整数へ変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.AsUInt32(System.Numerics.BigInteger,System.UInt32@)">
            <summary>任意長整数の 32 ビット符号なし整数への変換を試みます。</summary>
            <param name="value">32 ビット符号なし整数へ変換する任意長整数を指定します。</param>
            <param name="result">変換された 32 ビット符号なし整数が返されます。</param>
            <returns>任意長整数を 32 ビット符号なし整数へ変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.AsUInt64(System.Numerics.BigInteger,System.UInt64@)">
            <summary>任意長整数の 64 ビット符号なし整数への変換を試みます。</summary>
            <param name="value">64 ビット符号なし整数へ変換する任意長整数を指定します。</param>
            <param name="result">変換された 64 ビット符号なし整数が返されます。</param>
            <returns>任意長整数を 64 ビット符号なし整数へ変換できた場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Abs(System.Numerics.BigInteger)">
            <summary>任意長整数の絶対値を返します。</summary>
            <param name="value">絶対値を取得する任意長整数を指定します。</param>
            <returns>任意長整数に対する絶対値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Log(System.Numerics.BigInteger)">
            <summary>任意長整数の自然対数を返します。</summary>
            <param name="value">自然対数を取得する任意長整数を指定します。</param>
            <returns>任意長整数に対する自然対数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">自然対数が <see cref="T:System.Double"/> で表現できる範囲を超えています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Log(System.Numerics.BigInteger,System.Double)">
            <summary>任意長整数の指定された底の対数を返します。</summary>
            <param name="value">対数を取得する任意長整数を指定します。</param>
            <param name="baseValue">取得する対数の底を指定します。</param>
            <returns>任意長整数に対する対数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">対数が <see cref="T:System.Double"/> で表現できる範囲を超えています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Log10(System.Numerics.BigInteger)">
            <summary>任意長整数の 10 を底とする対数を返します。</summary>
            <param name="value">10 を底とする対数を取得する任意長整数を指定します。</param>
            <returns>任意長整数に対する 10 を底とする対数。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">10 を底とする対数が <see cref="T:System.Double"/> で表現できる範囲を超えています。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.Power(System.Numerics.BigInteger,System.Int32)">
            <summary>任意長整数の指定された数を指数とする累乗を返します。</summary>
            <param name="value">累乗を取得する任意長整数を指定します。</param>
            <param name="exponent">任意長整数を累乗する指数を指定します。</param>
            <returns>任意長整数の累乗。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="exponent"/> の値が 0 未満です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>任意長整数を累乗して別の数値で割った剰余を返します。</summary>
            <param name="value"><paramref name="exponent"/> で累乗する任意長整数を指定します。</param>
            <param name="exponent">任意長整数を累乗する任意長整数を指定します。</param>
            <param name="modulus">累乗された値を割る任意長整数を指定します。</param>
            <returns><paramref name="value"/> ^ <paramref name="exponent"/> を <paramref name="modulus"/> で割った結果生じた剰余。</returns>
            <exception cref="T:System.DivideByZeroException"><paramref name="modulus"/> が 0 です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="exponent"/> が 0 未満です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.ToString(System.Numerics.BigInteger,System.Int32)">
            <summary>任意長整数を指定された基数で表現した文字列を返します。</summary>
            <param name="value">基数による文字列表現を取得する任意長整数を指定します。</param>
            <param name="radix">任意長整数を表現する基数を指定します。</param>
            <returns>任意長整数を指定された基数によって表す文字列。</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">基数が 2 未満または 36 より大きな数です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.GetWords(System.Numerics.BigInteger)">
            <summary>任意長整数を表す <see cref="T:System.UInt32"/> 値の配列を取得します。この結果は符号を区別しません。</summary>
            <param name="value"><see cref="T:System.UInt32"/> 値の配列を取得する任意長整数を指定します。</param>
            <returns>任意長整数を表す <see cref="T:System.UInt32"/> 値の配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.GetWordCount(System.Numerics.BigInteger)">
            <summary>任意長整数を表す <see cref="T:System.UInt32"/> 配列の要素数を返します。</summary>
            <param name="value">任意長整数を表す <see cref="T:System.UInt32"/> 配列の要素数を取得する任意長整数を指定します。</param>
            <returns>任意長整数を表す <see cref="T:System.UInt32"/> 配列の要素数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.GetByteCount(System.Numerics.BigInteger)">
            <summary>任意長整数を表すために必要なバイト数を返します。</summary>
            <param name="value">任意長整数を表すために必要なバイト数を取得する任意長整数を指定します。</param>
            <returns>任意長整数を表すために必要なバイト数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MathUtils.GetBitCount(System.Numerics.BigInteger)">
            <summary>任意長整数を表すために必要なビット数を返します。</summary>
            <param name="self">任意長整数を表すために必要なビット数を取得する任意長整数を指定します。</param>
            <returns>任意長整数を表すために必要なビット数。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.MonitorUtils">
            <summary><see cref="T:System.Threading.Monitor"/> に関するユーティリティ メソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.MonitorUtils.Exit(System.Object,System.Boolean@)">
            <summary>指定されたオブジェクトの排他ロックを解放します。</summary>
            <param name="obj">排他ロックを解放するオブジェクトを指定します。</param>
            <param name="lockTaken">ロックが解放されたかどうかを示します。ロックが解放された場合は <c>false</c> に変更されます。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> が <c>null</c> です。</exception>
            <exception cref="T:System.Threading.SynchronizationLockException">現在のスレッドは <paramref name="obj"/> に対してロックを所有していません。</exception>
        </member>
        <member name="T:Microsoft.Scripting.Utils.TypeUtils">
            <summary>型に関するユーティリティ メソッドを公開します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.TypeUtils.ComObjectType">
            <summary>COM オブジェクトを表す型を示します。すべての COM オブジェクトはこの型に代入可能です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.TypeUtils.IsComObjectType(System.Type)">
            <summary>指定された型が COM オブジェクトを表しているかどうかを判断します。</summary>
            <param name="type">COM オブジェクトを表しているかどうかを調べる型を指定します。</param>
            <returns><paramref name="type"/> が COM オブジェクトを表す型である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.TypeUtils.IsComObject(System.Object)">
            <summary>指定されたオブジェクトが COM オブジェクトであるかどうかを判断します。</summary>
            <param name="obj">COM オブジェクトであるかどうかを調べるオブジェクトを指定します。</param>
            <returns><paramref name="obj"/> が COM オブジェクトの場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
            <remarks><see cref="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)"/> は部分信頼では動作しないため使用できません。</remarks>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ValueArray`1">
            <summary>配列に値の等価性による等値比較のサポートを追加します。</summary>
            <typeparam name="T">配列の要素型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ValueArray`1.#ctor(`0[])">
            <summary>指定された配列を使用して、<see cref="T:Microsoft.Scripting.Utils.ValueArray`1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="array">このオブジェクトでラップする配列を指定します。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> または <paramref name="array"/> の要素が <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ValueArray`1.Equals(Microsoft.Scripting.Utils.ValueArray{`0})">
            <summary>指定された <see cref="T:Microsoft.Scripting.Utils.ValueArray`1"/> がこのオブジェクトと等しいかどうかを判断します。</summary>
            <param name="other">このオブジェクトと等しいかどうかを調べるオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ValueArray`1.Equals(System.Object)">
            <summary>指定されたオブジェクトがこのオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">このオブジェクトと等しいかどうかを調べるオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ValueArray`1.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.WeakDictionary`2">
            <summary>
            キーが他のオブジェクトから参照されなくなるとキーが利用できなくなるディクショナリを表します。
            値はキーが生存している限り生存し続けます。
            </summary>
            <typeparam name="TKey">ディクショナリのキーの型を指定します。</typeparam>
            <typeparam name="TValue">ディクショナリの値の型を指定します。</typeparam>
            <remarks>
            現在このクラスにはキーとして使用されているオブジェクトをこのクラスのどのインスタンスでも値として使用することができないという制限があります。
            さもなければ、オブジェクトは永遠に解放されません。
            これは事実上、このクラスの利用者のみが値として使用されているオブジェクトへアクセスできるようにする必要があることを意味します。
            
            また、現在キーが収集されてから値が保持される期間に関する保証は存在しません。
            この問題は CheckCleanup() を呼び出すファイナライザをもつダミーのウォッチドッグオブジェクトを持ち、ガベージコレクション毎に CheckCleanup() をトリガーすることで解決できる可能性があります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.Add(`0,`1)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> に追加します。</summary>
            <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
            <exception cref="T:System.ArgumentException">同じキーを持つ要素が、<see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> に既に存在します。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.ContainsKey(`0)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> に格納されているかどうかを確認します。</summary>
            <param name="key"><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.Remove(`0)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> から削除します。</summary>
            <param name="key">削除する要素のキー。</param>
            <returns>要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。このメソッドは、<paramref name="key"/> が元の <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> に見つからなかった場合にも <c>false</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.TryGetValue(`0,`1@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="key">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value"/> パラメーターの型に対する既定の値。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> を実装するオブジェクトに格納されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.CheckCleanup">
            <summary>
            Check if any of the keys have gotten collected
            
            Currently, there is also no guarantee of how long the values will be kept alive even after the keys
            get collected. This could be fixed by triggerring CheckCleanup() to be called on every garbage-collection
            by having a dummy watch-dog object with a finalizer which calls CheckCleanup().
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.Clear">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> からすべての項目を削除します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakDictionary`2.GetEnumerator">
            <summary>コレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakDictionary`2.Keys">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakDictionary`2.Values">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> 内の値を格納している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakDictionary`2.Item(`0)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="key">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">プロパティは取得されますが、<paramref name="key"/> が見つかりません。</exception>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakDictionary`2.Count">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> に格納されている要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakDictionary`2.IsReadOnly">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakDictionary`2"/> が読み取り専用かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.HybridMapping`1">
            <summary>通常の参照と弱い参照の両方でオブジェクトと ID をマッピングする方法を提供します。</summary>
            <typeparam name="T">マッピング対象のオブジェクトの型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Utils.HybridMapping`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.#ctor(System.Int32)">
            <summary>ID の最小値を使用して、<see cref="T:Microsoft.Scripting.Utils.HybridMapping`1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="minimum">割り当てられる ID の最小値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.WeakAdd(`0)">
            <summary>指定されたオブジェクトの弱参照をマッピングに追加して、このマッピングのオブジェクトに対する ID を返します。</summary>
            <param name="value">マッピングするオブジェクトを指定します。</param>
            <returns><paramref name="value"/> に対する ID。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.StrongAdd(`0)">
            <summary>指定されたオブジェクトをマッピングに追加して、このマッピングのオブジェクトに対する ID を返します。</summary>
            <param name="value">マッピングするオブジェクトを指定します。</param>
            <returns><paramref name="value"/> に対する ID。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.GetObjectForId(System.Int32)">
            <summary>指定された ID に対応するオブジェクトを取得します。</summary>
            <param name="id">対応するオブジェクトを取得する ID を指定します。</param>
            <returns><paramref name="id"/> に対応するオブジェクトが存在する場合はそのオブジェクト。それ以外の場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.GetIdForObject(`0)">
            <summary>指定されたオブジェクトに対応する ID を取得します。</summary>
            <param name="value">対応する ID を取得するオブジェクトを指定します。</param>
            <returns><paramref name="value"/> がこのマッピングに存在する場合はその ID。それ以外の場合は -1。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.RemoveById(System.Int32)">
            <summary>指定された ID に対応するオブジェクトをこのマッピングから削除します。</summary>
            <param name="id">削除するオブジェクトの ID を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.HybridMapping`1.Remove(`0)">
            <summary>指定されたオブジェクトをこのマッピングから削除します。</summary>
            <param name="value">削除するオブジェクトを指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Utils.WeakHandle">
            <summary>自動的に解放されない "弱い参照" を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.#ctor(System.Object,System.Boolean)">
            <summary>指定されたオブジェクトを参照し、指定された復活の追跡を使用する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> 構造体の新しいインスタンスを初期化します。 </summary>
            <param name="target">参照するオブジェクトを指定します。</param>
            <param name="trackResurrection">終了後もオブジェクトを参照するかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.Free">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトを解放します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.GetHashCode">
            <summary>現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトの識別子を返します。</summary>
            <returns>現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトの識別子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.Equals(System.Object)">
            <summary>指定されたオブジェクトが現在のオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">等しいかどうかを調べるオブジェクトを指定します。</param>
            <returns>現在のオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.Equals(Microsoft.Scripting.Utils.WeakHandle)">
            <summary>指定した <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトが、現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトと等しいかどうかを判断します。</summary>
            <param name="other">現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトと比較する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクト。</param>
            <returns>指定した <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトが現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.op_Equality(Microsoft.Scripting.Utils.WeakHandle,Microsoft.Scripting.Utils.WeakHandle)">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> の 2 つのオブジェクトが等しいかどうかを示す値を返します。</summary>
            <param name="left"><paramref name="right"/> パラメーターと比較する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクト。</param>
            <param name="right"><paramref name="left"/> パラメーターと比較する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクト。</param>
            <returns><paramref name="left"/> パラメーターと <paramref name="right"/> パラメーターが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.WeakHandle.op_Inequality(Microsoft.Scripting.Utils.WeakHandle,Microsoft.Scripting.Utils.WeakHandle)">
            <summary><see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> の 2 つのオブジェクトが等しくないかどうかを示す値を返します。</summary>
            <param name="left"><paramref name="right"/> パラメーターと比較する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクト。</param>
            <param name="right"><paramref name="left"/> パラメーターと比較する <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクト。</param>
            <returns><paramref name="left"/> パラメーターと <paramref name="right"/> パラメーターが等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakHandle.IsAlive">
            <summary>現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトが参照するオブジェクトが、ガベージ コレクションで収集されているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Utils.WeakHandle.Target">
            <summary>現在の <see cref="T:Microsoft.Scripting.Utils.WeakHandle"/> オブジェクトが参照するオブジェクト (ターゲット) を取得します。 </summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple">
            <summary>値を変更可能な組オブジェクトの抽象基本クラスです。</summary>
        </member>
        <member name="F:Microsoft.Scripting.MutableTuple.MaxSize">
            <summary>組オブジェクトがネストせずに保持することができる要素の最大数を示します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetNestedValue(System.Int32,System.Int32)">
            <summary>
            指定されたサイズの組オブジェクトの指定されたインデックスにある値を取得します。
            このメソッドはネストされた組オブジェクトを走査して正確なインデックスの値を取得できます。
            </summary>
            <param name="size">ネストされている組オブジェクトに含まれている実際の要素数を指定します。</param>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.SetNestedValue(System.Int32,System.Int32,System.Object)">
            <summary>
            指定されたサイズの組オブジェクトの指定されたインデックスに値を設定します。
            このメソッドはネストされた組オブジェクトを走査して正確なインデックスに値を設定できます。
            </summary>
            <param name="size">ネストされている組オブジェクトに含まれている実際の要素数を指定します。</param>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetTupleType(System.Int32)">
            <summary>指定された数の要素を格納するのに十分な数のスロットを持つ組オブジェクトの型を返します。</summary>
            <param name="size">組オブジェクトに格納する要素の数を指定します。</param>
            <returns>指定された数の要素を格納するのに十分な大きさの組オブジェクト。十分な大きさの型がないときは <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.MakeTupleType(System.Type[])">
            <summary>
            要素ごとの型を使用してジェネリックな組オブジェクトの型を作成します。
            要素数が <see cref="F:Microsoft.Scripting.MutableTuple.MaxSize"/> 以下であれば単純に単一の型を作成します。
            それ以外の場合はネストされた組オブジェクトの型を返します。
            </summary>
            <param name="types">組オブジェクトに格納する各要素の型を指定します。</param>
            <returns>各要素が指定された型であるジェネリックな組オブジェクトの型。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="types"/> は <c>null</c> です。</exception>
            <remarks>(例: 136個の要素数を持つ組オブジェクトを作成する場合、Tuple`128 および Tuple`8 を含む Tuple`2 を返します。)</remarks>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetSize(System.Type)">
            <summary>ネストされた組オブジェクトも含む指定された組オブジェクトの型で利用可能なスロット数を返します。</summary>
            <param name="tupleType">利用可能なスロット数を返す組オブジェクトの型を指定します。</param>
            <returns>指定された型に対する利用可能なスロット数。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tupleType"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentException"><paramref name="tupleType"/> は <see cref="T:Microsoft.Scripting.MutableTuple"/> の派生型ではありません。</exception>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.MakeTuple(System.Type,System.Object[])">
            <summary>
            指定された型の組オブジェクトを指定された引数を使用して作成します。
            組オブジェクトがネストされていた場合は、ネストされたそれぞれのスロットに対して値が格納されます。
            </summary>
            <param name="tupleType">作成する組オブジェクトの型を指定します。</param>
            <param name="args">作成された組オブジェクトに設定される値を指定します。</param>
            <returns>値が設定された新しい組オブジェクト。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tupleType"/> または <paramref name="args"/> は <c>null</c> です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetTupleValues">
            <summary>ネストされた組オブジェクトも含むこの組オブジェクトに格納されているすべての値を取得します。</summary>
            <returns>組オブジェクトに格納されているすべての値のシーケンス。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.GetAccessPath(System.Type,System.Int32)">
            <summary>ネストされている可能性のある組オブジェクト内の特定の論理要素にアクセスするために使用するプロパティのシーケンスを返します。</summary>
            <param name="tupleType">プロパティのシーケンスを取得する組オブジェクトの型を指定します。</param>
            <param name="index">アクセスするためにプロパティのシーケンスを返す論理要素のインデックスを指定します。</param>
            <returns>特定の論理要素にアクセスするために使用するプロパティのシーケンス。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="tupleType"/> は <c>null</c> です。</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> は 0 未満または型で許容できる最大要素数以上の値です。</exception>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple.Create(System.Linq.Expressions.Expression[])">
            <summary>指定された値を用いて組オブジェクトを作成する式を作成します。</summary>
            <param name="values">組オブジェクトに設定する値を指定します。</param>
            <returns>組オブジェクトを作成する式。</returns>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`1">
            <summary>1 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`1.#ctor(`0)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`1.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`1.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`1.Item000">
            <summary>組オブジェクトの 1 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`1.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`2">
            <summary>2 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`2.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`2"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`2.#ctor(`0,`1)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`2"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`2.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`2.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`2.Item001">
            <summary>組オブジェクトの 2 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`2.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`4">
            <summary>4 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`4.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`4"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`4.#ctor(`0,`1,`2,`3)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`4"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`4.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`4.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`4.Item002">
            <summary>組オブジェクトの 3 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`4.Item003">
            <summary>組オブジェクトの 4 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`4.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`8">
            <summary>8 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
            <typeparam name="T4">組オブジェクトの 5 番目の要素の型を指定します。</typeparam>
            <typeparam name="T5">組オブジェクトの 6 番目の要素の型を指定します。</typeparam>
            <typeparam name="T6">組オブジェクトの 7 番目の要素の型を指定します。</typeparam>
            <typeparam name="T7">組オブジェクトの 8 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`8.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`8"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`8"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
            <param name="item4">組オブジェクトの 5 番目の要素を指定します。</param>
            <param name="item5">組オブジェクトの 6 番目の要素を指定します。</param>
            <param name="item6">組オブジェクトの 7 番目の要素を指定します。</param>
            <param name="item7">組オブジェクトの 8 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`8.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`8.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`8.Item004">
            <summary>組オブジェクトの 5 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`8.Item005">
            <summary>組オブジェクトの 6 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`8.Item006">
            <summary>組オブジェクトの 7 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`8.Item007">
            <summary>組オブジェクトの 8 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`8.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`16">
            <summary>16 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
            <typeparam name="T4">組オブジェクトの 5 番目の要素の型を指定します。</typeparam>
            <typeparam name="T5">組オブジェクトの 6 番目の要素の型を指定します。</typeparam>
            <typeparam name="T6">組オブジェクトの 7 番目の要素の型を指定します。</typeparam>
            <typeparam name="T7">組オブジェクトの 8 番目の要素の型を指定します。</typeparam>
            <typeparam name="T8">組オブジェクトの 9 番目の要素の型を指定します。</typeparam>
            <typeparam name="T9">組オブジェクトの 10 番目の要素の型を指定します。</typeparam>
            <typeparam name="T10">組オブジェクトの 11 番目の要素の型を指定します。</typeparam>
            <typeparam name="T11">組オブジェクトの 12 番目の要素の型を指定します。</typeparam>
            <typeparam name="T12">組オブジェクトの 13 番目の要素の型を指定します。</typeparam>
            <typeparam name="T13">組オブジェクトの 14 番目の要素の型を指定します。</typeparam>
            <typeparam name="T14">組オブジェクトの 15 番目の要素の型を指定します。</typeparam>
            <typeparam name="T15">組オブジェクトの 16 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`16.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`16"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`16.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`16"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
            <param name="item4">組オブジェクトの 5 番目の要素を指定します。</param>
            <param name="item5">組オブジェクトの 6 番目の要素を指定します。</param>
            <param name="item6">組オブジェクトの 7 番目の要素を指定します。</param>
            <param name="item7">組オブジェクトの 8 番目の要素を指定します。</param>
            <param name="item8">組オブジェクトの 9 番目の要素を指定します。</param>
            <param name="item9">組オブジェクトの 10 番目の要素を指定します。</param>
            <param name="item10">組オブジェクトの 11 番目の要素を指定します。</param>
            <param name="item11">組オブジェクトの 12 番目の要素を指定します。</param>
            <param name="item12">組オブジェクトの 13 番目の要素を指定します。</param>
            <param name="item13">組オブジェクトの 14 番目の要素を指定します。</param>
            <param name="item14">組オブジェクトの 15 番目の要素を指定します。</param>
            <param name="item15">組オブジェクトの 16 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`16.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`16.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item008">
            <summary>組オブジェクトの 9 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item009">
            <summary>組オブジェクトの 10 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item010">
            <summary>組オブジェクトの 11 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item011">
            <summary>組オブジェクトの 12 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item012">
            <summary>組オブジェクトの 13 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item013">
            <summary>組オブジェクトの 14 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item014">
            <summary>組オブジェクトの 15 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Item015">
            <summary>組オブジェクトの 16 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`16.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`32">
            <summary>32 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
            <typeparam name="T4">組オブジェクトの 5 番目の要素の型を指定します。</typeparam>
            <typeparam name="T5">組オブジェクトの 6 番目の要素の型を指定します。</typeparam>
            <typeparam name="T6">組オブジェクトの 7 番目の要素の型を指定します。</typeparam>
            <typeparam name="T7">組オブジェクトの 8 番目の要素の型を指定します。</typeparam>
            <typeparam name="T8">組オブジェクトの 9 番目の要素の型を指定します。</typeparam>
            <typeparam name="T9">組オブジェクトの 10 番目の要素の型を指定します。</typeparam>
            <typeparam name="T10">組オブジェクトの 11 番目の要素の型を指定します。</typeparam>
            <typeparam name="T11">組オブジェクトの 12 番目の要素の型を指定します。</typeparam>
            <typeparam name="T12">組オブジェクトの 13 番目の要素の型を指定します。</typeparam>
            <typeparam name="T13">組オブジェクトの 14 番目の要素の型を指定します。</typeparam>
            <typeparam name="T14">組オブジェクトの 15 番目の要素の型を指定します。</typeparam>
            <typeparam name="T15">組オブジェクトの 16 番目の要素の型を指定します。</typeparam>
            <typeparam name="T16">組オブジェクトの 17 番目の要素の型を指定します。</typeparam>
            <typeparam name="T17">組オブジェクトの 18 番目の要素の型を指定します。</typeparam>
            <typeparam name="T18">組オブジェクトの 19 番目の要素の型を指定します。</typeparam>
            <typeparam name="T19">組オブジェクトの 20 番目の要素の型を指定します。</typeparam>
            <typeparam name="T20">組オブジェクトの 21 番目の要素の型を指定します。</typeparam>
            <typeparam name="T21">組オブジェクトの 22 番目の要素の型を指定します。</typeparam>
            <typeparam name="T22">組オブジェクトの 23 番目の要素の型を指定します。</typeparam>
            <typeparam name="T23">組オブジェクトの 24 番目の要素の型を指定します。</typeparam>
            <typeparam name="T24">組オブジェクトの 25 番目の要素の型を指定します。</typeparam>
            <typeparam name="T25">組オブジェクトの 26 番目の要素の型を指定します。</typeparam>
            <typeparam name="T26">組オブジェクトの 27 番目の要素の型を指定します。</typeparam>
            <typeparam name="T27">組オブジェクトの 28 番目の要素の型を指定します。</typeparam>
            <typeparam name="T28">組オブジェクトの 29 番目の要素の型を指定します。</typeparam>
            <typeparam name="T29">組オブジェクトの 30 番目の要素の型を指定します。</typeparam>
            <typeparam name="T30">組オブジェクトの 31 番目の要素の型を指定します。</typeparam>
            <typeparam name="T31">組オブジェクトの 32 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`32.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`32"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`32.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27,`28,`29,`30,`31)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`32"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
            <param name="item4">組オブジェクトの 5 番目の要素を指定します。</param>
            <param name="item5">組オブジェクトの 6 番目の要素を指定します。</param>
            <param name="item6">組オブジェクトの 7 番目の要素を指定します。</param>
            <param name="item7">組オブジェクトの 8 番目の要素を指定します。</param>
            <param name="item8">組オブジェクトの 9 番目の要素を指定します。</param>
            <param name="item9">組オブジェクトの 10 番目の要素を指定します。</param>
            <param name="item10">組オブジェクトの 11 番目の要素を指定します。</param>
            <param name="item11">組オブジェクトの 12 番目の要素を指定します。</param>
            <param name="item12">組オブジェクトの 13 番目の要素を指定します。</param>
            <param name="item13">組オブジェクトの 14 番目の要素を指定します。</param>
            <param name="item14">組オブジェクトの 15 番目の要素を指定します。</param>
            <param name="item15">組オブジェクトの 16 番目の要素を指定します。</param>
            <param name="item16">組オブジェクトの 17 番目の要素を指定します。</param>
            <param name="item17">組オブジェクトの 18 番目の要素を指定します。</param>
            <param name="item18">組オブジェクトの 19 番目の要素を指定します。</param>
            <param name="item19">組オブジェクトの 20 番目の要素を指定します。</param>
            <param name="item20">組オブジェクトの 21 番目の要素を指定します。</param>
            <param name="item21">組オブジェクトの 22 番目の要素を指定します。</param>
            <param name="item22">組オブジェクトの 23 番目の要素を指定します。</param>
            <param name="item23">組オブジェクトの 24 番目の要素を指定します。</param>
            <param name="item24">組オブジェクトの 25 番目の要素を指定します。</param>
            <param name="item25">組オブジェクトの 26 番目の要素を指定します。</param>
            <param name="item26">組オブジェクトの 27 番目の要素を指定します。</param>
            <param name="item27">組オブジェクトの 28 番目の要素を指定します。</param>
            <param name="item28">組オブジェクトの 29 番目の要素を指定します。</param>
            <param name="item29">組オブジェクトの 30 番目の要素を指定します。</param>
            <param name="item30">組オブジェクトの 31 番目の要素を指定します。</param>
            <param name="item31">組オブジェクトの 32 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`32.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`32.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item016">
            <summary>組オブジェクトの 17 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item017">
            <summary>組オブジェクトの 18 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item018">
            <summary>組オブジェクトの 19 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item019">
            <summary>組オブジェクトの 20 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item020">
            <summary>組オブジェクトの 21 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item021">
            <summary>組オブジェクトの 22 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item022">
            <summary>組オブジェクトの 23 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item023">
            <summary>組オブジェクトの 24 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item024">
            <summary>組オブジェクトの 25 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item025">
            <summary>組オブジェクトの 26 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item026">
            <summary>組オブジェクトの 27 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item027">
            <summary>組オブジェクトの 28 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item028">
            <summary>組オブジェクトの 29 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item029">
            <summary>組オブジェクトの 30 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item030">
            <summary>組オブジェクトの 31 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Item031">
            <summary>組オブジェクトの 32 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`32.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`64">
            <summary>64 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
            <typeparam name="T4">組オブジェクトの 5 番目の要素の型を指定します。</typeparam>
            <typeparam name="T5">組オブジェクトの 6 番目の要素の型を指定します。</typeparam>
            <typeparam name="T6">組オブジェクトの 7 番目の要素の型を指定します。</typeparam>
            <typeparam name="T7">組オブジェクトの 8 番目の要素の型を指定します。</typeparam>
            <typeparam name="T8">組オブジェクトの 9 番目の要素の型を指定します。</typeparam>
            <typeparam name="T9">組オブジェクトの 10 番目の要素の型を指定します。</typeparam>
            <typeparam name="T10">組オブジェクトの 11 番目の要素の型を指定します。</typeparam>
            <typeparam name="T11">組オブジェクトの 12 番目の要素の型を指定します。</typeparam>
            <typeparam name="T12">組オブジェクトの 13 番目の要素の型を指定します。</typeparam>
            <typeparam name="T13">組オブジェクトの 14 番目の要素の型を指定します。</typeparam>
            <typeparam name="T14">組オブジェクトの 15 番目の要素の型を指定します。</typeparam>
            <typeparam name="T15">組オブジェクトの 16 番目の要素の型を指定します。</typeparam>
            <typeparam name="T16">組オブジェクトの 17 番目の要素の型を指定します。</typeparam>
            <typeparam name="T17">組オブジェクトの 18 番目の要素の型を指定します。</typeparam>
            <typeparam name="T18">組オブジェクトの 19 番目の要素の型を指定します。</typeparam>
            <typeparam name="T19">組オブジェクトの 20 番目の要素の型を指定します。</typeparam>
            <typeparam name="T20">組オブジェクトの 21 番目の要素の型を指定します。</typeparam>
            <typeparam name="T21">組オブジェクトの 22 番目の要素の型を指定します。</typeparam>
            <typeparam name="T22">組オブジェクトの 23 番目の要素の型を指定します。</typeparam>
            <typeparam name="T23">組オブジェクトの 24 番目の要素の型を指定します。</typeparam>
            <typeparam name="T24">組オブジェクトの 25 番目の要素の型を指定します。</typeparam>
            <typeparam name="T25">組オブジェクトの 26 番目の要素の型を指定します。</typeparam>
            <typeparam name="T26">組オブジェクトの 27 番目の要素の型を指定します。</typeparam>
            <typeparam name="T27">組オブジェクトの 28 番目の要素の型を指定します。</typeparam>
            <typeparam name="T28">組オブジェクトの 29 番目の要素の型を指定します。</typeparam>
            <typeparam name="T29">組オブジェクトの 30 番目の要素の型を指定します。</typeparam>
            <typeparam name="T30">組オブジェクトの 31 番目の要素の型を指定します。</typeparam>
            <typeparam name="T31">組オブジェクトの 32 番目の要素の型を指定します。</typeparam>
            <typeparam name="T32">組オブジェクトの 33 番目の要素の型を指定します。</typeparam>
            <typeparam name="T33">組オブジェクトの 34 番目の要素の型を指定します。</typeparam>
            <typeparam name="T34">組オブジェクトの 35 番目の要素の型を指定します。</typeparam>
            <typeparam name="T35">組オブジェクトの 36 番目の要素の型を指定します。</typeparam>
            <typeparam name="T36">組オブジェクトの 37 番目の要素の型を指定します。</typeparam>
            <typeparam name="T37">組オブジェクトの 38 番目の要素の型を指定します。</typeparam>
            <typeparam name="T38">組オブジェクトの 39 番目の要素の型を指定します。</typeparam>
            <typeparam name="T39">組オブジェクトの 40 番目の要素の型を指定します。</typeparam>
            <typeparam name="T40">組オブジェクトの 41 番目の要素の型を指定します。</typeparam>
            <typeparam name="T41">組オブジェクトの 42 番目の要素の型を指定します。</typeparam>
            <typeparam name="T42">組オブジェクトの 43 番目の要素の型を指定します。</typeparam>
            <typeparam name="T43">組オブジェクトの 44 番目の要素の型を指定します。</typeparam>
            <typeparam name="T44">組オブジェクトの 45 番目の要素の型を指定します。</typeparam>
            <typeparam name="T45">組オブジェクトの 46 番目の要素の型を指定します。</typeparam>
            <typeparam name="T46">組オブジェクトの 47 番目の要素の型を指定します。</typeparam>
            <typeparam name="T47">組オブジェクトの 48 番目の要素の型を指定します。</typeparam>
            <typeparam name="T48">組オブジェクトの 49 番目の要素の型を指定します。</typeparam>
            <typeparam name="T49">組オブジェクトの 50 番目の要素の型を指定します。</typeparam>
            <typeparam name="T50">組オブジェクトの 51 番目の要素の型を指定します。</typeparam>
            <typeparam name="T51">組オブジェクトの 52 番目の要素の型を指定します。</typeparam>
            <typeparam name="T52">組オブジェクトの 53 番目の要素の型を指定します。</typeparam>
            <typeparam name="T53">組オブジェクトの 54 番目の要素の型を指定します。</typeparam>
            <typeparam name="T54">組オブジェクトの 55 番目の要素の型を指定します。</typeparam>
            <typeparam name="T55">組オブジェクトの 56 番目の要素の型を指定します。</typeparam>
            <typeparam name="T56">組オブジェクトの 57 番目の要素の型を指定します。</typeparam>
            <typeparam name="T57">組オブジェクトの 58 番目の要素の型を指定します。</typeparam>
            <typeparam name="T58">組オブジェクトの 59 番目の要素の型を指定します。</typeparam>
            <typeparam name="T59">組オブジェクトの 60 番目の要素の型を指定します。</typeparam>
            <typeparam name="T60">組オブジェクトの 61 番目の要素の型を指定します。</typeparam>
            <typeparam name="T61">組オブジェクトの 62 番目の要素の型を指定します。</typeparam>
            <typeparam name="T62">組オブジェクトの 63 番目の要素の型を指定します。</typeparam>
            <typeparam name="T63">組オブジェクトの 64 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`64.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`64"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`64.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27,`28,`29,`30,`31,`32,`33,`34,`35,`36,`37,`38,`39,`40,`41,`42,`43,`44,`45,`46,`47,`48,`49,`50,`51,`52,`53,`54,`55,`56,`57,`58,`59,`60,`61,`62,`63)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`64"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
            <param name="item4">組オブジェクトの 5 番目の要素を指定します。</param>
            <param name="item5">組オブジェクトの 6 番目の要素を指定します。</param>
            <param name="item6">組オブジェクトの 7 番目の要素を指定します。</param>
            <param name="item7">組オブジェクトの 8 番目の要素を指定します。</param>
            <param name="item8">組オブジェクトの 9 番目の要素を指定します。</param>
            <param name="item9">組オブジェクトの 10 番目の要素を指定します。</param>
            <param name="item10">組オブジェクトの 11 番目の要素を指定します。</param>
            <param name="item11">組オブジェクトの 12 番目の要素を指定します。</param>
            <param name="item12">組オブジェクトの 13 番目の要素を指定します。</param>
            <param name="item13">組オブジェクトの 14 番目の要素を指定します。</param>
            <param name="item14">組オブジェクトの 15 番目の要素を指定します。</param>
            <param name="item15">組オブジェクトの 16 番目の要素を指定します。</param>
            <param name="item16">組オブジェクトの 17 番目の要素を指定します。</param>
            <param name="item17">組オブジェクトの 18 番目の要素を指定します。</param>
            <param name="item18">組オブジェクトの 19 番目の要素を指定します。</param>
            <param name="item19">組オブジェクトの 20 番目の要素を指定します。</param>
            <param name="item20">組オブジェクトの 21 番目の要素を指定します。</param>
            <param name="item21">組オブジェクトの 22 番目の要素を指定します。</param>
            <param name="item22">組オブジェクトの 23 番目の要素を指定します。</param>
            <param name="item23">組オブジェクトの 24 番目の要素を指定します。</param>
            <param name="item24">組オブジェクトの 25 番目の要素を指定します。</param>
            <param name="item25">組オブジェクトの 26 番目の要素を指定します。</param>
            <param name="item26">組オブジェクトの 27 番目の要素を指定します。</param>
            <param name="item27">組オブジェクトの 28 番目の要素を指定します。</param>
            <param name="item28">組オブジェクトの 29 番目の要素を指定します。</param>
            <param name="item29">組オブジェクトの 30 番目の要素を指定します。</param>
            <param name="item30">組オブジェクトの 31 番目の要素を指定します。</param>
            <param name="item31">組オブジェクトの 32 番目の要素を指定します。</param>
            <param name="item32">組オブジェクトの 33 番目の要素を指定します。</param>
            <param name="item33">組オブジェクトの 34 番目の要素を指定します。</param>
            <param name="item34">組オブジェクトの 35 番目の要素を指定します。</param>
            <param name="item35">組オブジェクトの 36 番目の要素を指定します。</param>
            <param name="item36">組オブジェクトの 37 番目の要素を指定します。</param>
            <param name="item37">組オブジェクトの 38 番目の要素を指定します。</param>
            <param name="item38">組オブジェクトの 39 番目の要素を指定します。</param>
            <param name="item39">組オブジェクトの 40 番目の要素を指定します。</param>
            <param name="item40">組オブジェクトの 41 番目の要素を指定します。</param>
            <param name="item41">組オブジェクトの 42 番目の要素を指定します。</param>
            <param name="item42">組オブジェクトの 43 番目の要素を指定します。</param>
            <param name="item43">組オブジェクトの 44 番目の要素を指定します。</param>
            <param name="item44">組オブジェクトの 45 番目の要素を指定します。</param>
            <param name="item45">組オブジェクトの 46 番目の要素を指定します。</param>
            <param name="item46">組オブジェクトの 47 番目の要素を指定します。</param>
            <param name="item47">組オブジェクトの 48 番目の要素を指定します。</param>
            <param name="item48">組オブジェクトの 49 番目の要素を指定します。</param>
            <param name="item49">組オブジェクトの 50 番目の要素を指定します。</param>
            <param name="item50">組オブジェクトの 51 番目の要素を指定します。</param>
            <param name="item51">組オブジェクトの 52 番目の要素を指定します。</param>
            <param name="item52">組オブジェクトの 53 番目の要素を指定します。</param>
            <param name="item53">組オブジェクトの 54 番目の要素を指定します。</param>
            <param name="item54">組オブジェクトの 55 番目の要素を指定します。</param>
            <param name="item55">組オブジェクトの 56 番目の要素を指定します。</param>
            <param name="item56">組オブジェクトの 57 番目の要素を指定します。</param>
            <param name="item57">組オブジェクトの 58 番目の要素を指定します。</param>
            <param name="item58">組オブジェクトの 59 番目の要素を指定します。</param>
            <param name="item59">組オブジェクトの 60 番目の要素を指定します。</param>
            <param name="item60">組オブジェクトの 61 番目の要素を指定します。</param>
            <param name="item61">組オブジェクトの 62 番目の要素を指定します。</param>
            <param name="item62">組オブジェクトの 63 番目の要素を指定します。</param>
            <param name="item63">組オブジェクトの 64 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`64.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`64.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item032">
            <summary>組オブジェクトの 33 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item033">
            <summary>組オブジェクトの 34 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item034">
            <summary>組オブジェクトの 35 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item035">
            <summary>組オブジェクトの 36 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item036">
            <summary>組オブジェクトの 37 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item037">
            <summary>組オブジェクトの 38 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item038">
            <summary>組オブジェクトの 39 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item039">
            <summary>組オブジェクトの 40 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item040">
            <summary>組オブジェクトの 41 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item041">
            <summary>組オブジェクトの 42 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item042">
            <summary>組オブジェクトの 43 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item043">
            <summary>組オブジェクトの 44 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item044">
            <summary>組オブジェクトの 45 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item045">
            <summary>組オブジェクトの 46 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item046">
            <summary>組オブジェクトの 47 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item047">
            <summary>組オブジェクトの 48 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item048">
            <summary>組オブジェクトの 49 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item049">
            <summary>組オブジェクトの 50 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item050">
            <summary>組オブジェクトの 51 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item051">
            <summary>組オブジェクトの 52 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item052">
            <summary>組オブジェクトの 53 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item053">
            <summary>組オブジェクトの 54 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item054">
            <summary>組オブジェクトの 55 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item055">
            <summary>組オブジェクトの 56 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item056">
            <summary>組オブジェクトの 57 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item057">
            <summary>組オブジェクトの 58 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item058">
            <summary>組オブジェクトの 59 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item059">
            <summary>組オブジェクトの 60 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item060">
            <summary>組オブジェクトの 61 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item061">
            <summary>組オブジェクトの 62 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item062">
            <summary>組オブジェクトの 63 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Item063">
            <summary>組オブジェクトの 64 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`64.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.MutableTuple`128">
            <summary>128 個の要素からなる変更可能な組を表します。</summary>
            <typeparam name="T0">組オブジェクトの 1 番目の要素の型を指定します。</typeparam>
            <typeparam name="T1">組オブジェクトの 2 番目の要素の型を指定します。</typeparam>
            <typeparam name="T2">組オブジェクトの 3 番目の要素の型を指定します。</typeparam>
            <typeparam name="T3">組オブジェクトの 4 番目の要素の型を指定します。</typeparam>
            <typeparam name="T4">組オブジェクトの 5 番目の要素の型を指定します。</typeparam>
            <typeparam name="T5">組オブジェクトの 6 番目の要素の型を指定します。</typeparam>
            <typeparam name="T6">組オブジェクトの 7 番目の要素の型を指定します。</typeparam>
            <typeparam name="T7">組オブジェクトの 8 番目の要素の型を指定します。</typeparam>
            <typeparam name="T8">組オブジェクトの 9 番目の要素の型を指定します。</typeparam>
            <typeparam name="T9">組オブジェクトの 10 番目の要素の型を指定します。</typeparam>
            <typeparam name="T10">組オブジェクトの 11 番目の要素の型を指定します。</typeparam>
            <typeparam name="T11">組オブジェクトの 12 番目の要素の型を指定します。</typeparam>
            <typeparam name="T12">組オブジェクトの 13 番目の要素の型を指定します。</typeparam>
            <typeparam name="T13">組オブジェクトの 14 番目の要素の型を指定します。</typeparam>
            <typeparam name="T14">組オブジェクトの 15 番目の要素の型を指定します。</typeparam>
            <typeparam name="T15">組オブジェクトの 16 番目の要素の型を指定します。</typeparam>
            <typeparam name="T16">組オブジェクトの 17 番目の要素の型を指定します。</typeparam>
            <typeparam name="T17">組オブジェクトの 18 番目の要素の型を指定します。</typeparam>
            <typeparam name="T18">組オブジェクトの 19 番目の要素の型を指定します。</typeparam>
            <typeparam name="T19">組オブジェクトの 20 番目の要素の型を指定します。</typeparam>
            <typeparam name="T20">組オブジェクトの 21 番目の要素の型を指定します。</typeparam>
            <typeparam name="T21">組オブジェクトの 22 番目の要素の型を指定します。</typeparam>
            <typeparam name="T22">組オブジェクトの 23 番目の要素の型を指定します。</typeparam>
            <typeparam name="T23">組オブジェクトの 24 番目の要素の型を指定します。</typeparam>
            <typeparam name="T24">組オブジェクトの 25 番目の要素の型を指定します。</typeparam>
            <typeparam name="T25">組オブジェクトの 26 番目の要素の型を指定します。</typeparam>
            <typeparam name="T26">組オブジェクトの 27 番目の要素の型を指定します。</typeparam>
            <typeparam name="T27">組オブジェクトの 28 番目の要素の型を指定します。</typeparam>
            <typeparam name="T28">組オブジェクトの 29 番目の要素の型を指定します。</typeparam>
            <typeparam name="T29">組オブジェクトの 30 番目の要素の型を指定します。</typeparam>
            <typeparam name="T30">組オブジェクトの 31 番目の要素の型を指定します。</typeparam>
            <typeparam name="T31">組オブジェクトの 32 番目の要素の型を指定します。</typeparam>
            <typeparam name="T32">組オブジェクトの 33 番目の要素の型を指定します。</typeparam>
            <typeparam name="T33">組オブジェクトの 34 番目の要素の型を指定します。</typeparam>
            <typeparam name="T34">組オブジェクトの 35 番目の要素の型を指定します。</typeparam>
            <typeparam name="T35">組オブジェクトの 36 番目の要素の型を指定します。</typeparam>
            <typeparam name="T36">組オブジェクトの 37 番目の要素の型を指定します。</typeparam>
            <typeparam name="T37">組オブジェクトの 38 番目の要素の型を指定します。</typeparam>
            <typeparam name="T38">組オブジェクトの 39 番目の要素の型を指定します。</typeparam>
            <typeparam name="T39">組オブジェクトの 40 番目の要素の型を指定します。</typeparam>
            <typeparam name="T40">組オブジェクトの 41 番目の要素の型を指定します。</typeparam>
            <typeparam name="T41">組オブジェクトの 42 番目の要素の型を指定します。</typeparam>
            <typeparam name="T42">組オブジェクトの 43 番目の要素の型を指定します。</typeparam>
            <typeparam name="T43">組オブジェクトの 44 番目の要素の型を指定します。</typeparam>
            <typeparam name="T44">組オブジェクトの 45 番目の要素の型を指定します。</typeparam>
            <typeparam name="T45">組オブジェクトの 46 番目の要素の型を指定します。</typeparam>
            <typeparam name="T46">組オブジェクトの 47 番目の要素の型を指定します。</typeparam>
            <typeparam name="T47">組オブジェクトの 48 番目の要素の型を指定します。</typeparam>
            <typeparam name="T48">組オブジェクトの 49 番目の要素の型を指定します。</typeparam>
            <typeparam name="T49">組オブジェクトの 50 番目の要素の型を指定します。</typeparam>
            <typeparam name="T50">組オブジェクトの 51 番目の要素の型を指定します。</typeparam>
            <typeparam name="T51">組オブジェクトの 52 番目の要素の型を指定します。</typeparam>
            <typeparam name="T52">組オブジェクトの 53 番目の要素の型を指定します。</typeparam>
            <typeparam name="T53">組オブジェクトの 54 番目の要素の型を指定します。</typeparam>
            <typeparam name="T54">組オブジェクトの 55 番目の要素の型を指定します。</typeparam>
            <typeparam name="T55">組オブジェクトの 56 番目の要素の型を指定します。</typeparam>
            <typeparam name="T56">組オブジェクトの 57 番目の要素の型を指定します。</typeparam>
            <typeparam name="T57">組オブジェクトの 58 番目の要素の型を指定します。</typeparam>
            <typeparam name="T58">組オブジェクトの 59 番目の要素の型を指定します。</typeparam>
            <typeparam name="T59">組オブジェクトの 60 番目の要素の型を指定します。</typeparam>
            <typeparam name="T60">組オブジェクトの 61 番目の要素の型を指定します。</typeparam>
            <typeparam name="T61">組オブジェクトの 62 番目の要素の型を指定します。</typeparam>
            <typeparam name="T62">組オブジェクトの 63 番目の要素の型を指定します。</typeparam>
            <typeparam name="T63">組オブジェクトの 64 番目の要素の型を指定します。</typeparam>
            <typeparam name="T64">組オブジェクトの 65 番目の要素の型を指定します。</typeparam>
            <typeparam name="T65">組オブジェクトの 66 番目の要素の型を指定します。</typeparam>
            <typeparam name="T66">組オブジェクトの 67 番目の要素の型を指定します。</typeparam>
            <typeparam name="T67">組オブジェクトの 68 番目の要素の型を指定します。</typeparam>
            <typeparam name="T68">組オブジェクトの 69 番目の要素の型を指定します。</typeparam>
            <typeparam name="T69">組オブジェクトの 70 番目の要素の型を指定します。</typeparam>
            <typeparam name="T70">組オブジェクトの 71 番目の要素の型を指定します。</typeparam>
            <typeparam name="T71">組オブジェクトの 72 番目の要素の型を指定します。</typeparam>
            <typeparam name="T72">組オブジェクトの 73 番目の要素の型を指定します。</typeparam>
            <typeparam name="T73">組オブジェクトの 74 番目の要素の型を指定します。</typeparam>
            <typeparam name="T74">組オブジェクトの 75 番目の要素の型を指定します。</typeparam>
            <typeparam name="T75">組オブジェクトの 76 番目の要素の型を指定します。</typeparam>
            <typeparam name="T76">組オブジェクトの 77 番目の要素の型を指定します。</typeparam>
            <typeparam name="T77">組オブジェクトの 78 番目の要素の型を指定します。</typeparam>
            <typeparam name="T78">組オブジェクトの 79 番目の要素の型を指定します。</typeparam>
            <typeparam name="T79">組オブジェクトの 80 番目の要素の型を指定します。</typeparam>
            <typeparam name="T80">組オブジェクトの 81 番目の要素の型を指定します。</typeparam>
            <typeparam name="T81">組オブジェクトの 82 番目の要素の型を指定します。</typeparam>
            <typeparam name="T82">組オブジェクトの 83 番目の要素の型を指定します。</typeparam>
            <typeparam name="T83">組オブジェクトの 84 番目の要素の型を指定します。</typeparam>
            <typeparam name="T84">組オブジェクトの 85 番目の要素の型を指定します。</typeparam>
            <typeparam name="T85">組オブジェクトの 86 番目の要素の型を指定します。</typeparam>
            <typeparam name="T86">組オブジェクトの 87 番目の要素の型を指定します。</typeparam>
            <typeparam name="T87">組オブジェクトの 88 番目の要素の型を指定します。</typeparam>
            <typeparam name="T88">組オブジェクトの 89 番目の要素の型を指定します。</typeparam>
            <typeparam name="T89">組オブジェクトの 90 番目の要素の型を指定します。</typeparam>
            <typeparam name="T90">組オブジェクトの 91 番目の要素の型を指定します。</typeparam>
            <typeparam name="T91">組オブジェクトの 92 番目の要素の型を指定します。</typeparam>
            <typeparam name="T92">組オブジェクトの 93 番目の要素の型を指定します。</typeparam>
            <typeparam name="T93">組オブジェクトの 94 番目の要素の型を指定します。</typeparam>
            <typeparam name="T94">組オブジェクトの 95 番目の要素の型を指定します。</typeparam>
            <typeparam name="T95">組オブジェクトの 96 番目の要素の型を指定します。</typeparam>
            <typeparam name="T96">組オブジェクトの 97 番目の要素の型を指定します。</typeparam>
            <typeparam name="T97">組オブジェクトの 98 番目の要素の型を指定します。</typeparam>
            <typeparam name="T98">組オブジェクトの 99 番目の要素の型を指定します。</typeparam>
            <typeparam name="T99">組オブジェクトの 100 番目の要素の型を指定します。</typeparam>
            <typeparam name="T100">組オブジェクトの 101 番目の要素の型を指定します。</typeparam>
            <typeparam name="T101">組オブジェクトの 102 番目の要素の型を指定します。</typeparam>
            <typeparam name="T102">組オブジェクトの 103 番目の要素の型を指定します。</typeparam>
            <typeparam name="T103">組オブジェクトの 104 番目の要素の型を指定します。</typeparam>
            <typeparam name="T104">組オブジェクトの 105 番目の要素の型を指定します。</typeparam>
            <typeparam name="T105">組オブジェクトの 106 番目の要素の型を指定します。</typeparam>
            <typeparam name="T106">組オブジェクトの 107 番目の要素の型を指定します。</typeparam>
            <typeparam name="T107">組オブジェクトの 108 番目の要素の型を指定します。</typeparam>
            <typeparam name="T108">組オブジェクトの 109 番目の要素の型を指定します。</typeparam>
            <typeparam name="T109">組オブジェクトの 110 番目の要素の型を指定します。</typeparam>
            <typeparam name="T110">組オブジェクトの 111 番目の要素の型を指定します。</typeparam>
            <typeparam name="T111">組オブジェクトの 112 番目の要素の型を指定します。</typeparam>
            <typeparam name="T112">組オブジェクトの 113 番目の要素の型を指定します。</typeparam>
            <typeparam name="T113">組オブジェクトの 114 番目の要素の型を指定します。</typeparam>
            <typeparam name="T114">組オブジェクトの 115 番目の要素の型を指定します。</typeparam>
            <typeparam name="T115">組オブジェクトの 116 番目の要素の型を指定します。</typeparam>
            <typeparam name="T116">組オブジェクトの 117 番目の要素の型を指定します。</typeparam>
            <typeparam name="T117">組オブジェクトの 118 番目の要素の型を指定します。</typeparam>
            <typeparam name="T118">組オブジェクトの 119 番目の要素の型を指定します。</typeparam>
            <typeparam name="T119">組オブジェクトの 120 番目の要素の型を指定します。</typeparam>
            <typeparam name="T120">組オブジェクトの 121 番目の要素の型を指定します。</typeparam>
            <typeparam name="T121">組オブジェクトの 122 番目の要素の型を指定します。</typeparam>
            <typeparam name="T122">組オブジェクトの 123 番目の要素の型を指定します。</typeparam>
            <typeparam name="T123">組オブジェクトの 124 番目の要素の型を指定します。</typeparam>
            <typeparam name="T124">組オブジェクトの 125 番目の要素の型を指定します。</typeparam>
            <typeparam name="T125">組オブジェクトの 126 番目の要素の型を指定します。</typeparam>
            <typeparam name="T126">組オブジェクトの 127 番目の要素の型を指定します。</typeparam>
            <typeparam name="T127">組オブジェクトの 128 番目の要素の型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`128.#ctor">
            <summary><see cref="T:Microsoft.Scripting.MutableTuple`128"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`128.#ctor(`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11,`12,`13,`14,`15,`16,`17,`18,`19,`20,`21,`22,`23,`24,`25,`26,`27,`28,`29,`30,`31,`32,`33,`34,`35,`36,`37,`38,`39,`40,`41,`42,`43,`44,`45,`46,`47,`48,`49,`50,`51,`52,`53,`54,`55,`56,`57,`58,`59,`60,`61,`62,`63,`64,`65,`66,`67,`68,`69,`70,`71,`72,`73,`74,`75,`76,`77,`78,`79,`80,`81,`82,`83,`84,`85,`86,`87,`88,`89,`90,`91,`92,`93,`94,`95,`96,`97,`98,`99,`100,`101,`102,`103,`104,`105,`106,`107,`108,`109,`110,`111,`112,`113,`114,`115,`116,`117,`118,`119,`120,`121,`122,`123,`124,`125,`126,`127)">
            <summary>要素を使用して、<see cref="T:Microsoft.Scripting.MutableTuple`128"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="item0">組オブジェクトの 1 番目の要素を指定します。</param>
            <param name="item1">組オブジェクトの 2 番目の要素を指定します。</param>
            <param name="item2">組オブジェクトの 3 番目の要素を指定します。</param>
            <param name="item3">組オブジェクトの 4 番目の要素を指定します。</param>
            <param name="item4">組オブジェクトの 5 番目の要素を指定します。</param>
            <param name="item5">組オブジェクトの 6 番目の要素を指定します。</param>
            <param name="item6">組オブジェクトの 7 番目の要素を指定します。</param>
            <param name="item7">組オブジェクトの 8 番目の要素を指定します。</param>
            <param name="item8">組オブジェクトの 9 番目の要素を指定します。</param>
            <param name="item9">組オブジェクトの 10 番目の要素を指定します。</param>
            <param name="item10">組オブジェクトの 11 番目の要素を指定します。</param>
            <param name="item11">組オブジェクトの 12 番目の要素を指定します。</param>
            <param name="item12">組オブジェクトの 13 番目の要素を指定します。</param>
            <param name="item13">組オブジェクトの 14 番目の要素を指定します。</param>
            <param name="item14">組オブジェクトの 15 番目の要素を指定します。</param>
            <param name="item15">組オブジェクトの 16 番目の要素を指定します。</param>
            <param name="item16">組オブジェクトの 17 番目の要素を指定します。</param>
            <param name="item17">組オブジェクトの 18 番目の要素を指定します。</param>
            <param name="item18">組オブジェクトの 19 番目の要素を指定します。</param>
            <param name="item19">組オブジェクトの 20 番目の要素を指定します。</param>
            <param name="item20">組オブジェクトの 21 番目の要素を指定します。</param>
            <param name="item21">組オブジェクトの 22 番目の要素を指定します。</param>
            <param name="item22">組オブジェクトの 23 番目の要素を指定します。</param>
            <param name="item23">組オブジェクトの 24 番目の要素を指定します。</param>
            <param name="item24">組オブジェクトの 25 番目の要素を指定します。</param>
            <param name="item25">組オブジェクトの 26 番目の要素を指定します。</param>
            <param name="item26">組オブジェクトの 27 番目の要素を指定します。</param>
            <param name="item27">組オブジェクトの 28 番目の要素を指定します。</param>
            <param name="item28">組オブジェクトの 29 番目の要素を指定します。</param>
            <param name="item29">組オブジェクトの 30 番目の要素を指定します。</param>
            <param name="item30">組オブジェクトの 31 番目の要素を指定します。</param>
            <param name="item31">組オブジェクトの 32 番目の要素を指定します。</param>
            <param name="item32">組オブジェクトの 33 番目の要素を指定します。</param>
            <param name="item33">組オブジェクトの 34 番目の要素を指定します。</param>
            <param name="item34">組オブジェクトの 35 番目の要素を指定します。</param>
            <param name="item35">組オブジェクトの 36 番目の要素を指定します。</param>
            <param name="item36">組オブジェクトの 37 番目の要素を指定します。</param>
            <param name="item37">組オブジェクトの 38 番目の要素を指定します。</param>
            <param name="item38">組オブジェクトの 39 番目の要素を指定します。</param>
            <param name="item39">組オブジェクトの 40 番目の要素を指定します。</param>
            <param name="item40">組オブジェクトの 41 番目の要素を指定します。</param>
            <param name="item41">組オブジェクトの 42 番目の要素を指定します。</param>
            <param name="item42">組オブジェクトの 43 番目の要素を指定します。</param>
            <param name="item43">組オブジェクトの 44 番目の要素を指定します。</param>
            <param name="item44">組オブジェクトの 45 番目の要素を指定します。</param>
            <param name="item45">組オブジェクトの 46 番目の要素を指定します。</param>
            <param name="item46">組オブジェクトの 47 番目の要素を指定します。</param>
            <param name="item47">組オブジェクトの 48 番目の要素を指定します。</param>
            <param name="item48">組オブジェクトの 49 番目の要素を指定します。</param>
            <param name="item49">組オブジェクトの 50 番目の要素を指定します。</param>
            <param name="item50">組オブジェクトの 51 番目の要素を指定します。</param>
            <param name="item51">組オブジェクトの 52 番目の要素を指定します。</param>
            <param name="item52">組オブジェクトの 53 番目の要素を指定します。</param>
            <param name="item53">組オブジェクトの 54 番目の要素を指定します。</param>
            <param name="item54">組オブジェクトの 55 番目の要素を指定します。</param>
            <param name="item55">組オブジェクトの 56 番目の要素を指定します。</param>
            <param name="item56">組オブジェクトの 57 番目の要素を指定します。</param>
            <param name="item57">組オブジェクトの 58 番目の要素を指定します。</param>
            <param name="item58">組オブジェクトの 59 番目の要素を指定します。</param>
            <param name="item59">組オブジェクトの 60 番目の要素を指定します。</param>
            <param name="item60">組オブジェクトの 61 番目の要素を指定します。</param>
            <param name="item61">組オブジェクトの 62 番目の要素を指定します。</param>
            <param name="item62">組オブジェクトの 63 番目の要素を指定します。</param>
            <param name="item63">組オブジェクトの 64 番目の要素を指定します。</param>
            <param name="item64">組オブジェクトの 65 番目の要素を指定します。</param>
            <param name="item65">組オブジェクトの 66 番目の要素を指定します。</param>
            <param name="item66">組オブジェクトの 67 番目の要素を指定します。</param>
            <param name="item67">組オブジェクトの 68 番目の要素を指定します。</param>
            <param name="item68">組オブジェクトの 69 番目の要素を指定します。</param>
            <param name="item69">組オブジェクトの 70 番目の要素を指定します。</param>
            <param name="item70">組オブジェクトの 71 番目の要素を指定します。</param>
            <param name="item71">組オブジェクトの 72 番目の要素を指定します。</param>
            <param name="item72">組オブジェクトの 73 番目の要素を指定します。</param>
            <param name="item73">組オブジェクトの 74 番目の要素を指定します。</param>
            <param name="item74">組オブジェクトの 75 番目の要素を指定します。</param>
            <param name="item75">組オブジェクトの 76 番目の要素を指定します。</param>
            <param name="item76">組オブジェクトの 77 番目の要素を指定します。</param>
            <param name="item77">組オブジェクトの 78 番目の要素を指定します。</param>
            <param name="item78">組オブジェクトの 79 番目の要素を指定します。</param>
            <param name="item79">組オブジェクトの 80 番目の要素を指定します。</param>
            <param name="item80">組オブジェクトの 81 番目の要素を指定します。</param>
            <param name="item81">組オブジェクトの 82 番目の要素を指定します。</param>
            <param name="item82">組オブジェクトの 83 番目の要素を指定します。</param>
            <param name="item83">組オブジェクトの 84 番目の要素を指定します。</param>
            <param name="item84">組オブジェクトの 85 番目の要素を指定します。</param>
            <param name="item85">組オブジェクトの 86 番目の要素を指定します。</param>
            <param name="item86">組オブジェクトの 87 番目の要素を指定します。</param>
            <param name="item87">組オブジェクトの 88 番目の要素を指定します。</param>
            <param name="item88">組オブジェクトの 89 番目の要素を指定します。</param>
            <param name="item89">組オブジェクトの 90 番目の要素を指定します。</param>
            <param name="item90">組オブジェクトの 91 番目の要素を指定します。</param>
            <param name="item91">組オブジェクトの 92 番目の要素を指定します。</param>
            <param name="item92">組オブジェクトの 93 番目の要素を指定します。</param>
            <param name="item93">組オブジェクトの 94 番目の要素を指定します。</param>
            <param name="item94">組オブジェクトの 95 番目の要素を指定します。</param>
            <param name="item95">組オブジェクトの 96 番目の要素を指定します。</param>
            <param name="item96">組オブジェクトの 97 番目の要素を指定します。</param>
            <param name="item97">組オブジェクトの 98 番目の要素を指定します。</param>
            <param name="item98">組オブジェクトの 99 番目の要素を指定します。</param>
            <param name="item99">組オブジェクトの 100 番目の要素を指定します。</param>
            <param name="item100">組オブジェクトの 101 番目の要素を指定します。</param>
            <param name="item101">組オブジェクトの 102 番目の要素を指定します。</param>
            <param name="item102">組オブジェクトの 103 番目の要素を指定します。</param>
            <param name="item103">組オブジェクトの 104 番目の要素を指定します。</param>
            <param name="item104">組オブジェクトの 105 番目の要素を指定します。</param>
            <param name="item105">組オブジェクトの 106 番目の要素を指定します。</param>
            <param name="item106">組オブジェクトの 107 番目の要素を指定します。</param>
            <param name="item107">組オブジェクトの 108 番目の要素を指定します。</param>
            <param name="item108">組オブジェクトの 109 番目の要素を指定します。</param>
            <param name="item109">組オブジェクトの 110 番目の要素を指定します。</param>
            <param name="item110">組オブジェクトの 111 番目の要素を指定します。</param>
            <param name="item111">組オブジェクトの 112 番目の要素を指定します。</param>
            <param name="item112">組オブジェクトの 113 番目の要素を指定します。</param>
            <param name="item113">組オブジェクトの 114 番目の要素を指定します。</param>
            <param name="item114">組オブジェクトの 115 番目の要素を指定します。</param>
            <param name="item115">組オブジェクトの 116 番目の要素を指定します。</param>
            <param name="item116">組オブジェクトの 117 番目の要素を指定します。</param>
            <param name="item117">組オブジェクトの 118 番目の要素を指定します。</param>
            <param name="item118">組オブジェクトの 119 番目の要素を指定します。</param>
            <param name="item119">組オブジェクトの 120 番目の要素を指定します。</param>
            <param name="item120">組オブジェクトの 121 番目の要素を指定します。</param>
            <param name="item121">組オブジェクトの 122 番目の要素を指定します。</param>
            <param name="item122">組オブジェクトの 123 番目の要素を指定します。</param>
            <param name="item123">組オブジェクトの 124 番目の要素を指定します。</param>
            <param name="item124">組オブジェクトの 125 番目の要素を指定します。</param>
            <param name="item125">組オブジェクトの 126 番目の要素を指定します。</param>
            <param name="item126">組オブジェクトの 127 番目の要素を指定します。</param>
            <param name="item127">組オブジェクトの 128 番目の要素を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`128.GetValue(System.Int32)">
            <summary>この組オブジェクトの指定されたインデックスにある値を取得します。</summary>
            <param name="index">値を取得するインデックスを指定します。</param>
            <returns>取得された値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.MutableTuple`128.SetValue(System.Int32,System.Object)">
            <summary>この組オブジェクトの指定されたインデックスに値を設定します。</summary>
            <param name="index">値を設定する場所を示すインデックスを指定します。</param>
            <param name="value">設定する値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item064">
            <summary>組オブジェクトの 65 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item065">
            <summary>組オブジェクトの 66 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item066">
            <summary>組オブジェクトの 67 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item067">
            <summary>組オブジェクトの 68 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item068">
            <summary>組オブジェクトの 69 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item069">
            <summary>組オブジェクトの 70 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item070">
            <summary>組オブジェクトの 71 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item071">
            <summary>組オブジェクトの 72 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item072">
            <summary>組オブジェクトの 73 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item073">
            <summary>組オブジェクトの 74 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item074">
            <summary>組オブジェクトの 75 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item075">
            <summary>組オブジェクトの 76 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item076">
            <summary>組オブジェクトの 77 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item077">
            <summary>組オブジェクトの 78 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item078">
            <summary>組オブジェクトの 79 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item079">
            <summary>組オブジェクトの 80 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item080">
            <summary>組オブジェクトの 81 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item081">
            <summary>組オブジェクトの 82 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item082">
            <summary>組オブジェクトの 83 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item083">
            <summary>組オブジェクトの 84 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item084">
            <summary>組オブジェクトの 85 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item085">
            <summary>組オブジェクトの 86 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item086">
            <summary>組オブジェクトの 87 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item087">
            <summary>組オブジェクトの 88 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item088">
            <summary>組オブジェクトの 89 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item089">
            <summary>組オブジェクトの 90 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item090">
            <summary>組オブジェクトの 91 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item091">
            <summary>組オブジェクトの 92 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item092">
            <summary>組オブジェクトの 93 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item093">
            <summary>組オブジェクトの 94 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item094">
            <summary>組オブジェクトの 95 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item095">
            <summary>組オブジェクトの 96 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item096">
            <summary>組オブジェクトの 97 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item097">
            <summary>組オブジェクトの 98 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item098">
            <summary>組オブジェクトの 99 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item099">
            <summary>組オブジェクトの 100 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item100">
            <summary>組オブジェクトの 101 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item101">
            <summary>組オブジェクトの 102 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item102">
            <summary>組オブジェクトの 103 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item103">
            <summary>組オブジェクトの 104 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item104">
            <summary>組オブジェクトの 105 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item105">
            <summary>組オブジェクトの 106 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item106">
            <summary>組オブジェクトの 107 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item107">
            <summary>組オブジェクトの 108 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item108">
            <summary>組オブジェクトの 109 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item109">
            <summary>組オブジェクトの 110 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item110">
            <summary>組オブジェクトの 111 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item111">
            <summary>組オブジェクトの 112 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item112">
            <summary>組オブジェクトの 113 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item113">
            <summary>組オブジェクトの 114 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item114">
            <summary>組オブジェクトの 115 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item115">
            <summary>組オブジェクトの 116 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item116">
            <summary>組オブジェクトの 117 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item117">
            <summary>組オブジェクトの 118 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item118">
            <summary>組オブジェクトの 119 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item119">
            <summary>組オブジェクトの 120 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item120">
            <summary>組オブジェクトの 121 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item121">
            <summary>組オブジェクトの 122 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item122">
            <summary>組オブジェクトの 123 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item123">
            <summary>組オブジェクトの 124 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item124">
            <summary>組オブジェクトの 125 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item125">
            <summary>組オブジェクトの 126 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item126">
            <summary>組オブジェクトの 127 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Item127">
            <summary>組オブジェクトの 128 番目の要素を取得または設定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.MutableTuple`128.Capacity">
            <summary>この組オブジェクトが格納できる最大の要素数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.Argument">
            <summary>関数に渡される引数を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.Argument.Simple">
            <summary>単純な名前のない位置が決定されている引数を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.#ctor(System.String)">
            <summary>指定された名前を使用して、<see cref="T:Microsoft.Scripting.Actions.Argument"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="name">この名前付き引数の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.#ctor(Microsoft.Scripting.Actions.ArgumentType)">
            <summary>引数の種類を使用して、<see cref="T:Microsoft.Scripting.Actions.Argument"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="kind">この引数の種類を指定します。<see cref="F:Microsoft.Scripting.Actions.ArgumentType.Named"/> を指定することはできません。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.#ctor(Microsoft.Scripting.Actions.ArgumentType,System.String)">
            <summary>引数の名前および種類を使用して、<see cref="T:Microsoft.Scripting.Actions.Argument"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="kind">この引数の種類を指定します。</param>
            <param name="name">引数の種類が名前付き引数の場合、引数の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">等価性を判断するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクト等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.Equals(Microsoft.Scripting.Actions.Argument)">
            <summary>この引数が指定された引数と等しいかどうかを判断します。</summary>
            <param name="other">等しいかどうかを判断する <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトを指定します。</param>
            <returns>この引数と指定された引数が等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.op_Equality(Microsoft.Scripting.Actions.Argument,Microsoft.Scripting.Actions.Argument)">
            <summary>指定された 2 つの <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトが等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.Argument"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.Argument"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.op_Inequality(Microsoft.Scripting.Actions.Argument,Microsoft.Scripting.Actions.Argument)">
            <summary>指定された 2 つの <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトが等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.Argument"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.Argument"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトが等しくない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>計算されたハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.Argument.CreateExpression">
            <summary>このオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <returns>このオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Argument.Kind">
            <summary>この引数の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Argument.Name">
            <summary>この引数が名前付き引数であれば、この引数の名前を取得します。それ以外の場合は <c>null</c> を返します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.Argument.IsSimple">
            <summary>この引数が単純な引数かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ArgumentType">
            <summary>
            コールサイトでの個別の引数に対する規則です。
            複数のコールサイトは単一の宣言に対して一致させることができます。
            引数の種類の中にはリストあるいはディクショナリのように複数の引数に展開されるものもあります。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ArgumentType.Simple">
            <summary>単純な名前のない位置が決定されている引数です。</summary>
            <example>Python では foo(1,2,3) はすべて単純な引数です。</example>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ArgumentType.Named">
            <summary>コールサイトで関連付けられた名前を持つ引数です。</summary>
            <example>Python では foo(a=1) がこれにあたります。</example>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ArgumentType.List">
            <summary>引数のリストを含む引数です。</summary>
            <example>
            Python では、foo(*(1,2*2,3)) は (a,b,c)=(1,4,3) として 3 つの宣言された引数を持つ def foo(a,b,c) に一致します。
            また、l=(1,4,3) として、1 つの宣言された引数を持つ def foo(*l) にも一致します。
            </example>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ArgumentType.Dictionary">
            <summary>名前付き引数のディクショナリを含んでいる引数です。</summary>
            <example>Python では、foo(**{'a':1, 'b':2}) がこれにあたります。</example>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ArgumentType.Instance">
            <summary>インスタンス引数です。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.BoundMemberTracker">
            <summary>特定のインスタンスに束縛された <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.MemberTracker">
            <summary>
            型の論理的なメンバを表します。
            これは .NET が型に存在することを知っている「物理的な」メンバを、型に論理的に存在するメンバから分離し、
            さらに <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> や <see cref="T:Microsoft.Scripting.Actions.NamespaceTracker"/> のような .NET リフレクション以上のレベルの他の抽象化を提供します。
            また、部分信頼では拡張できないリフレクション API 周辺のラッパーを提供します。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberTracker.EmptyTrackers">
            <summary>空の <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の配列を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.FromMemberInfo(System.Reflection.MemberInfo)">
            <summary>指定された <see cref="T:System.Reflection.MemberInfo"/> に対する <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を返します。</summary>
            <param name="member"><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を取得する <see cref="T:System.Reflection.MemberInfo"/> を指定します。</param>
            <returns>指定された <see cref="T:System.Reflection.MemberInfo"/> に対する <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.FromMemberInfo(System.Reflection.MemberInfo,System.Type)">
            <summary>指定された <see cref="T:System.Reflection.MemberInfo"/> に対する <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を返します。拡張メソッドも取り扱うことができます。</summary>
            <param name="member"><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を取得する <see cref="T:System.Reflection.MemberInfo"/> を指定します。</param>
            <param name="extending">拡張メソッドが宣言された型を指定します。</param>
            <returns>指定された <see cref="T:System.Reflection.MemberInfo"/> に対する <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.GetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type)">
            <summary>
            値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForGet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <returns>値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.SetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            値を代入する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForSet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="value">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> に代入される値を指定します。</param>
            <returns>値を代入する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.Call(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            指定された引数を使用してオブジェクトの呼び出しを実行する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForDoCall を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="arguments">オブジェクト呼び出しの引数を指定します。</param>
            <returns>オブジェクト呼び出しを実行する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.GetError(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>値の取得に関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <returns>値の取得に関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.GetBoundError(Microsoft.Scripting.Actions.ActionBinder,System.Dynamic.DynamicMetaObject)">
            <summary>束縛されたインスタンスを通したメンバへのアクセスに関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>束縛されたインスタンスを通したメンバへのアクセスに関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.SetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を設定する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="value">設定する値を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を設定する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberTracker.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BoundMemberTracker.#ctor(Microsoft.Scripting.Actions.MemberTracker,System.Dynamic.DynamicMetaObject)">
            <summary>基になる <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> と、束縛されるインスタンスを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="tracker">このオブジェクトの基になる <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を指定します。</param>
            <param name="instance">束縛されるインスタンスを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BoundMemberTracker.#ctor(Microsoft.Scripting.Actions.MemberTracker,System.Object)">
            <summary>基になる <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> と、束縛されるインスタンスを使用して、<see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="tracker">このオブジェクトの基になる <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を指定します。</param>
            <param name="instance">束縛されるインスタンスを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BoundMemberTracker.GetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type)">
            <summary>
            値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForGet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <returns>値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BoundMemberTracker.GetError(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>値の取得に関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <returns>値の取得に関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.BoundMemberTracker.SetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            値を代入する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForSet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="value">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> に代入される値を指定します。</param>
            <returns>値を代入する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.Instance">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が関連付けられたインスタンスを表す <see cref="T:System.Dynamic.DynamicMetaObject"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.ObjectInstance">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が関連付けられたインスタンスを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.BoundMemberTracker.BoundTo">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が関連付けられた <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.CallSignature">
            <summary>コールサイトのシグネチャを豊富に表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.CallSignature._infos">
            <summary>
            名前付き引数のような引数に関する追加の情報を格納します。
            単純なシグネチャ、つまり式のリストの場合は null になります。
            </summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.CallSignature._argumentCount">
            <summary>シグネチャ内に含まれる引数の個数です。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.#ctor(System.Int32)">
            <summary>指定された数の単純な引数を持つ <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="argumentCount">作成される <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が保持する単純な引数の数を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.#ctor(Microsoft.Scripting.Actions.Argument[])">
            <summary>指定された引数のリストを使用して、<see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="infos">引数のリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.#ctor(Microsoft.Scripting.Actions.ArgumentType[])">
            <summary>指定された引数の種類のリストを使用して、<see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 構造体の新しいインスタンスを初期化します。</summary>
            <param name="kinds">引数の種類のリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.Equals(Microsoft.Scripting.Actions.CallSignature)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が指定された <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> と等しいかどうかを判断します。</summary>
            <param name="other">比較する <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> を指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が指定された <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> と等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.Equals(System.Object)">
            <summary>このオブジェクトが指定されたオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>このオブジェクトが指定されたオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.op_Equality(Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Actions.CallSignature)">
            <summary>2 つの <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が等しいかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が等しい場合は <c>true</c>。其れ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.op_Inequality(Microsoft.Scripting.Actions.CallSignature,Microsoft.Scripting.Actions.CallSignature)">
            <summary>2 つの <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が等しくないかどうかを判断します。</summary>
            <param name="left">比較する 1 番目の <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</param>
            <param name="right">比較する 2 番目の <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</param>
            <returns>2 つの <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> が等しくない場合は <c>true</c>。其れ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>このオブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetArgumentInfos">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> に格納されている引数を <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトの配列として返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> に格納されているすべての引数が格納された <see cref="T:Microsoft.Scripting.Actions.Argument"/> オブジェクトの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.InsertArgument(Microsoft.Scripting.Actions.Argument)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の先頭に指定された引数を加えた新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> を返します。</summary>
            <param name="info">先頭に追加する引数を指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の先頭に引数が追加された新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.InsertArgumentAt(System.Int32,Microsoft.Scripting.Actions.Argument)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の指定された位置に指定された引数を加えた新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> を返します。</summary>
            <param name="index">引数を追加する位置を示す 0 から始まるインデックスを指定します。</param>
            <param name="info">追加する引数を指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の指定された位置に引数が追加された新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.RemoveFirstArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の先頭から引数を取り除いた新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> を返します。</summary>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の先頭から引数が削除された新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.RemoveArgumentAt(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の指定された位置から引数を取り除いた新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> を返します。</summary>
            <param name="index">引数を削除する位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> の指定された位置から引数が削除された新しい <see cref="T:Microsoft.Scripting.Actions.CallSignature"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.IndexOf(Microsoft.Scripting.Actions.ArgumentType)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内で指定された種類の引数が最初に見つかった位置を示す 0 から始まるインデックスを返します。</summary>
            <param name="kind"><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内を検索する引数の種類を指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内で指定された種類の引数が最初に見つかった位置を示す 0 から始まるインデックス。見つからなかった場合は -1 を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.HasDictionaryArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に辞書引数が含まれているかどうかを示す値を返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に辞書引数が含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.HasInstanceArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内にインスタンス引数が含まれているかどうかを示す値を返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内にインスタンス引数が含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.HasListArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に配列引数が含まれているかどうかを示す値を返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に配列引数が含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.HasNamedArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に名前付き引数が含まれているかどうかを示す値を返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に名前付き引数が含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.HasKeywordArgument">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に辞書引数または名前付き引数が含まれているかどうかを示す値を返します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内に辞書引数または名前付き引数が含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetArgumentKind(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内の指定された位置に存在する引数の種類を返します。</summary>
            <param name="index">種類を取得する引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定された位置に存在する引数の種類。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetArgumentName(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内の指定された位置に存在する引数の名前を返します。</summary>
            <param name="index">名前を取得する引数の位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定された位置に存在する引数の名前。名前が存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetProvidedPositionalArgumentCount">
            <summary>ユーザーがコールサイトで提供した位置決定済み引数の数を返します。</summary>
            <returns>位置決定済みの引数の個数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.GetArgumentNames">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> に格納されているすべての引数の名前を返します。</summary>
            <returns>この <see cref="T:Microsoft.Scripting.Actions.CallSignature"/> 内のすべての引数の名前を含んでいる配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CallSignature.CreateExpression">
            <summary>このオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <returns>このオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.CallSignature.IsSimple">
            <summary>すべての引数が名前付きでなく、位置が既に決定されているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.CallSignature.ArgumentCount">
            <summary>シグネチャ内に含まれる引数の個数を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ConstructorTracker">
            <summary>コンストラクタを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConstructorTracker.#ctor(System.Reflection.ConstructorInfo)">
            <summary>指定された <see cref="T:System.Reflection.ConstructorInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.ConstructorTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="ctor">このトラッカーが表すコンストラクタを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ConstructorTracker.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>このオブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ConstructorTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ConstructorTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ConstructorTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ConstructorTracker.IsPublic">
            <summary>このコンストラクタがパブリックかどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.CustomTracker">
            <summary>言語が任意のメンバを検索プロセスに参加させることができるようにするカスタムメンバトラッカーを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.CustomTracker.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Actions.CustomTracker"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.CustomTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ErrorInfo">
            <summary>
            動的操作が実行できない場合に生成されるべき結果に関する情報をカプセル化します。
            <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> はバインディングの失敗に応じて <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> によって生成されます。
            </summary>
            <remarks>
            <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> は次のうち 1 つを保持します:
            スローされる例外を作成する <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/>。
            ユーザーに直接返され、エラーが発生したことを示す値を生成する <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/>。(JavaScript における undefined など)
            ユーザーに直接返されるが、実際はエラーを表さない値を生成する <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/>。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ErrorInfo.FromException(System.Linq.Expressions.Expression)">
            <summary>スローされる例外を表す新しい <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。</summary>
            <param name="exceptionValue">例外を表す <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/> を指定します。</param>
            <returns>例外を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ErrorInfo.FromValue(System.Linq.Expressions.Expression)">
            <summary>ユーザーに返されるエラーを表す値を表す新しい <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。</summary>
            <param name="resultValue">ユーザーに返されるエラーを表す <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/> を指定します。</param>
            <returns>ユーザーに返される値を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ErrorInfo.FromValueNoError(System.Linq.Expressions.Expression)">
            <summary>ユーザーに返されるがエラーは表さない値を表す新しい <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> を作成します。</summary>
            <param name="resultValue">ユーザーに返されるエラーを表さない <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/> を指定します。</param>
            <returns>ユーザーに返されるエラーを表さない値を表す <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ErrorInfo.Kind">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> オブジェクトが表す値の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ErrorInfo.Expression">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> オブジェクトの値を表す <see cref="P:Microsoft.Scripting.Actions.ErrorInfo.Expression"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ErrorInfoKind">
            <summary><see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> が表す値の種類を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ErrorInfoKind.Exception">
            <summary><see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> は例外を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ErrorInfoKind.Error">
            <summary><see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> はエラーを表す値を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.ErrorInfoKind.Success">
            <summary><see cref="T:Microsoft.Scripting.Actions.ErrorInfo"/> はエラーではない値を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.EventTracker">
            <summary>イベントを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.#ctor(System.Reflection.EventInfo)">
            <summary>基になる <see cref="T:System.Reflection.EventInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.EventTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="eventInfo">基になるイベントを表す <see cref="T:System.Reflection.EventInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.AddHandler(System.Object,System.Object,Microsoft.Scripting.Runtime.DynamicDelegateCreator)">
            <summary>このイベントに指定されたイベント ハンドラを追加します。</summary>
            <param name="target">イベント ハンドラを追加するオブジェクトを指定します。</param>
            <param name="handler">追加するイベント ハンドラを指定します。</param>
            <param name="delegateCreator">指定されたイベント ハンドラがデリゲートでない場合にデリゲート型に変換する <see cref="T:Microsoft.Scripting.Runtime.DynamicDelegateCreator"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.EventTracker.RemoveHandler(System.Object,System.Object,System.Collections.Generic.IEqualityComparer{System.Object})">
            <summary>このイベントから指定されたイベント ハンドラを削除します。</summary>
            <param name="target">イベント ハンドラを削除するオブジェクトを指定します。</param>
            <param name="handler">削除するイベント ハンドラを指定します。</param>
            <param name="objectComparer">カスタム ハンドラ リストから削除する際の等価性の判断に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.Event">
            <summary>基になる <see cref="T:System.Reflection.EventInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.CallableAddMethod">
            <summary>このイベントに指定されたデリゲートを関連付ける呼び出し可能なメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.CallableRemoveMethod">
            <summary>このイベントから指定されたデリゲートの関連付けを解除する呼び出し可能なメソッドを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.EventTracker.IsStatic">
            <summary>このイベントが静的かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ExtensionMethodTracker">
            <summary>拡張メソッドを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.MethodTracker">
            <summary>単一のメソッドを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.#ctor(System.Reflection.MethodInfo)">
            <summary>基になる <see cref="T:System.Reflection.MethodInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.MethodTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">基になる <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.#ctor(System.Reflection.MethodInfo,System.Boolean)">
            <summary>基になる <see cref="T:System.Reflection.MethodInfo"/> および静的メソッドかどうかを示す値を使用して、<see cref="T:Microsoft.Scripting.Actions.MethodTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">基になる <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="isStatic">このメソッドが静的メソッドであるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodTracker.Call(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Dynamic.DynamicMetaObject[])">
            <summary>
            指定された引数を使用してオブジェクトの呼び出しを実行する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForDoCall を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="arguments">オブジェクト呼び出しの引数を指定します。</param>
            <returns>オブジェクト呼び出しを実行する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.Method">
            <summary>基になる <see cref="T:System.Reflection.MethodInfo"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.IsPublic">
            <summary>このメソッドがパブリック メソッドであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodTracker.IsStatic">
            <summary>このメソッドが静的メソッドであるかどうかを示す値を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionMethodTracker.#ctor(System.Reflection.MethodInfo,System.Boolean,System.Type)">
            <summary>メソッド、静的性、拡張メソッドが拡張する型を使用して、<see cref="T:Microsoft.Scripting.Actions.ExtensionMethodTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="method">拡張メソッドを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="isStatic">指定された拡張メソッドが静的かどうかを示す値を指定します。</param>
            <param name="declaringType">指定された拡張メソッドが拡張する型を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionMethodTracker.DeclaringType">
            <summary>
            拡張メソッドの宣言する型を取得します。
            このメソッドは拡張メソッドなので、宣言する型は実際には子の拡張メソッドが拡張する型であり、実際に宣言された型とは異なります。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ExtensionPropertyTracker">
            <summary>拡張プロパティを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.PropertyTracker">
            <summary>
            型のメンバとしての論理的なプロパティを表します。
            このクラスは (<see cref="T:Microsoft.Scripting.Actions.ReflectedPropertyTracker"/> によって実装される) 型に定義されている実際のプロパティまたは、(<see cref="T:Microsoft.Scripting.Actions.ExtensionPropertyTracker"/> によって実装される) 拡張プロパティのどちらかを表します。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetGetMethod">
            <summary>このプロパティのパブリックな get アクセサーを返します。</summary>
            <returns>このプロパティのパブリックな get アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。get アクセサーが非パブリックまたは存在しない場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetSetMethod">
            <summary>このプロパティのパブリックな set アクセサーを返します。</summary>
            <returns>このプロパティのパブリックな set アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。set アクセサーが非パブリックまたは存在しない場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetDeleteMethod">
            <summary>このプロパティのパブリックな delete アクセサーを返します。</summary>
            <returns>このプロパティのパブリックな delete アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。delete アクセサーが非パブリックまたは存在しない場合は <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetGetMethod(System.Boolean)">
            <summary>派生クラスによってオーバーライドされた場合に、このプロパティのパブリックまたは非パブリックな get アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな get アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの get アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で get アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも get アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetSetMethod(System.Boolean)">
            <summary>派生クラスによってオーバーライドされた場合に、このプロパティのパブリックまたは非パブリックな set アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな set アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの set アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で set アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも set アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetDeleteMethod(System.Boolean)">
            <summary>派生クラスによってオーバーライドされた場合に、このプロパティのパブリックまたは非パブリックな delete アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな delete アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの delete アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で delete アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも delete アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetIndexParameters">
            <summary>派生クラスでオーバーライドされた場合に、プロパティのすべてのインデックス パラメータの配列を返します。</summary>
            <returns>インデックスのパラメーターを格納している <see cref="T:System.Reflection.ParameterInfo"/> 型の配列。プロパティがインデックス付けされていない場合、配列の要素はゼロ (0) です。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type)">
            <summary>
            値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForGet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <returns>値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetError(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>値の取得に関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <returns>値の取得に関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.GetBoundError(Microsoft.Scripting.Actions.ActionBinder,System.Dynamic.DynamicMetaObject)">
            <summary>束縛されたインスタンスを通したメンバへのアクセスに関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>束縛されたインスタンスを通したメンバへのアクセスに関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.PropertyTracker.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.PropertyTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.PropertyTracker.IsStatic">
            <summary>派生クラスでオーバーライドされた場合に、このプロパティが静的であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.PropertyTracker.PropertyType">
            <summary>派生クラスでオーバーライドされた場合に、このプロパティの型を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionPropertyTracker.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Type)">
            <summary>名前、get アクセサ、set アクセサ、delete アクセサおよび宣言する型を使用して、<see cref="T:Microsoft.Scripting.Actions.ExtensionPropertyTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">拡張プロパティの名前を指定します。</param>
            <param name="getter">get アクセサを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="setter">set アクセサを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="deleter">delete アクセサを表す <see cref="T:System.Reflection.MethodInfo"/> を指定します。</param>
            <param name="declaringType">拡張プロパティを宣言する型を指定します。この値は拡張プロパティが拡張する型と等しくなります。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionPropertyTracker.GetGetMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな get アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな get アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの get アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で get アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも get アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionPropertyTracker.GetSetMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな set アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな set アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの set アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で set アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも set アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionPropertyTracker.GetDeleteMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな delete アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな delete アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの delete アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で delete アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも delete アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ExtensionPropertyTracker.GetIndexParameters">
            <summary>プロパティのすべてのインデックス パラメータの配列を返します。</summary>
            <returns>インデックスのパラメーターを格納している <see cref="T:System.Reflection.ParameterInfo"/> 型の配列。プロパティがインデックス付けされていない場合、配列の要素はゼロ (0) です。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionPropertyTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionPropertyTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionPropertyTracker.IsStatic">
            <summary>このプロパティが静的であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ExtensionPropertyTracker.PropertyType">
            <summary>このプロパティの型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.FieldTracker">
            <summary>フィールドを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.#ctor(System.Reflection.FieldInfo)">
            <summary>基になる <see cref="T:System.Reflection.FieldInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.FieldTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="field">基になる <see cref="T:System.Reflection.FieldInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.GetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type)">
            <summary>
            値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForGet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <returns>値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.GetError(Microsoft.Scripting.Actions.ActionBinder)">
            <summary>値の取得に関連付けられているエラーを返します。</summary>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <returns>値の取得に関連付けられているエラー。または、呼び出し元によって既定のエラーメッセージが提供されることを示す <c>null</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.FieldTracker.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.IsPublic">
            <summary>フィールドがパブリックかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.IsInitOnly">
            <summary>フィールドに対する書き込みが初期化時のみ可能であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.IsLiteral">
            <summary>値がコンパイル時に書き込まれ、変更できないかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.FieldType">
            <summary>このフィールドの型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.IsStatic">
            <summary>フィールドが静的かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.FieldTracker.Field">
            <summary>基になる <see cref="T:System.Reflection.FieldInfo"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.MemberGroup">
            <summary>
            利用可能なメンバを調べるために通常要求に応じて生成される <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> のコレクションを表します。
            このクラスには同じ種類の複数のメンバも異なる種類の複数のメンバも含めることができます。
            </summary>
            <remarks>
            最も一般的な <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> の取得元は <see cref="M:Microsoft.Scripting.Actions.ActionBinder.GetMember(Microsoft.Scripting.Actions.MemberRequestKind,System.Type,System.String)"/> です。
            ここから DLR は頻繁にユーザーによる値を生成する <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> に対するバインディングを実行します。
            もし操作の結果がメンバ自体を生成するならば、<see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> は ReturnMemberTracker を通してユーザーに公開する値を提供できます。
            <see cref="T:Microsoft.Scripting.Actions.ActionBinder"/> はユーザーに対するメンバの公開と同時に型からのメンバの取得に関する既定の機能を提供します。
            型からのメンバの取得はリフレクションに厳密に対応し、ユーザーに対するメンバの公開は <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を直接公開することに対応します。
            </remarks>
        </member>
        <member name="F:Microsoft.Scripting.Actions.MemberGroup.EmptyGroup">
            <summary>空の <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberGroup.#ctor(Microsoft.Scripting.Actions.MemberTracker[])">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="members">この <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に含めるメンバを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberGroup.#ctor(System.Reflection.MemberInfo[])">
            <summary>指定された <see cref="T:System.Reflection.MemberInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="members">この <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に含めるメンバを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberGroup.GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MemberGroup.System#Collections#IEnumerable#GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberGroup.Count">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> 内に含まれているメンバの数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MemberGroup.Item(System.Int32)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> 内の指定された位置にあるメンバを取得します。</summary>
            <param name="index">メンバの位置を示す 0 から始まるインデックスを指定します。</param>
            <returns>指定された位置にある <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Actions.MethodGroup">
            <summary>
            メソッドの一意のコレクションを表します。
            一般には、この一意なセットは異なる項数のメソッドも含む同じ名前でオーバーロードされたすべてのメソッドです。
            これらのメソッドは単一の論理的にオーバーロードされた .NET 型の要素を表します。
            </summary>
            <remarks>
            基本の DLR バインダーにメソッドのみを含む <see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> が提供された場合に、<see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> を生成します。
            <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> はそれぞれの一意なメソッドのグループごとに一意なインスタンスとなります。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.#ctor(Microsoft.Scripting.Actions.MethodTracker[])">
            <summary>指定された <see cref="T:Microsoft.Scripting.Actions.MethodTracker"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="methods"><see cref="T:Microsoft.Scripting.Actions.MemberGroup"/> に格納される <see cref="T:Microsoft.Scripting.Actions.MethodTracker"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.GetMethodBases">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> に含まれているすべてのメソッドに対する <see cref="T:System.Reflection.MethodBase"/> を取得します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> に含まれているすべてのメソッドに対する <see cref="T:System.Reflection.MethodBase"/> の配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.GetValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type)">
            <summary>
            値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            呼び出し元は GetErrorForGet を呼び出して、正確なエラーを表す <see cref="T:System.Linq.Expressions.Expression"/> または既定のエラーを表す <c>null</c> を取得できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <returns>値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。エラーが発生した場合は <c>null</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.BindToInstance(System.Dynamic.DynamicMetaObject)">
            <summary>
            バインディングが可能な場合、新しいメンバトラッカーを返す指定されたインスタンスにメンバトラッカーを関連付けます。
            バインディングが不可能な場合、既存のメンバトラッカーが返されます。
            例えば、静的フィールドへのバインディングは、元のメンバトラッカーを返します。
            インスタンスフィールドへのバインディングは、インスタンスを渡す GetBoundValue または SetBoundValue を得る新しい <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> を返します。
            </summary>
            <param name="instance">メンバトラッカーを関連付けるインスタンスを指定します。</param>
            <returns>指定されたインスタンスに関連付けられたメンバトラッカー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.GetBoundValue(Microsoft.Scripting.Actions.Calls.OverloadResolverFactory,Microsoft.Scripting.Actions.ActionBinder,System.Type,System.Dynamic.DynamicMetaObject)">
            <summary>
            インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/> を取得します。
            カスタムメンバトラッカーはこのメソッドをオーバーライドして、インスタンスへのバインド時の独自の動作を提供できます。
            </summary>
            <param name="resolverFactory">オーバーロード解決の方法を表す <see cref="T:Microsoft.Scripting.Actions.Calls.OverloadResolverFactory"/> を指定します。</param>
            <param name="binder">言語のバインディングセマンティクスを指定します。</param>
            <param name="type">この <see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> がアクセスされた型を指定します。</param>
            <param name="instance">束縛されたインスタンスを指定します。</param>
            <returns>インスタンスに束縛されている値を取得する <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.MethodGroup.MakeGenericMethod(System.Type[])">
            <summary>
            この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> に含まれているメソッドに対して指定されたジェネリック型引数を適用することでジェネリックメソッドを作成します。
            指定された型引数に対して適用できるジェネリックメソッド定義が存在しない場合は <c>null</c> を返します。
            </summary>
            <param name="types">この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> に含まれているメソッドに対して適用するジェネリック型引数を表す <see cref="T:System.Type"/> 型の配列を指定します。</param>
            <returns>指定されたジェネリック型引数が適用されたジェネリックメソッドのコレクションを表す <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/>。適用できるメソッドが存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.ContainsInstance">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> 内にインスタンスメソッドが存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.ContainsStatic">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> 内に静的メソッドが存在するかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.MethodGroup.Methods">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.MethodGroup"/> に含まれているすべてのメソッドを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.NamespaceTracker">
            <summary>CLS の名前空間を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IMembersList">
            <summary>インスタンスのすべてのメンバの名前のリストを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IMembersList.GetMemberNames">
            <summary>このオブジェクトのすべてのメンバの名前を取得します。</summary>
            <returns>すべてのメンバの名前を列挙する <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.#ctor(System.String)">
            <summary>指定された名前を使用して、<see cref="T:Microsoft.Scripting.Actions.NamespaceTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">この名前空間の名前を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.LoadAllTypes">
            <summary>(子の名前空間ではなく) 現在の名前空間に寄与するすべてのアセンブリからすべての型をロードします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.DiscoverAllTypes(System.Reflection.Assembly)">
            <summary>指定されたアセンブリ内のすべての型を現在の名前空間以下の適切な名前空間に配置します。</summary>
            <param name="assem">配置する型を含んでいるアセンブリを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.CheckForUnlistedType(System.String)">
            <summary>
            型がどのアセンブリにも存在しない場合のフォールバックとして機能します。
            これはハードコードされた型リスト内に存在しない新しい型が追加された場合に発生します。
            </summary>
            <remarks>
            このコードは以下の理由より正確ではありません:
            1. ジェネリック型を取り扱いません。(型衝突)
            2. GetCustomMemberNames への以前の呼び出し (例えば Python における "from foo import *" など) はこの型に含まれません。
            3. これはアセンブリに追加された新しい名前空間を取り扱いません。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.Add(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用する <see cref="T:Microsoft.Scripting.SymbolId"/>。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.TryGetValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を実装するオブジェクトに格納されている場合は
            <c>true</c>。それ以外の場合は <c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.TryGetValue(Microsoft.Scripting.SymbolId,Microsoft.Scripting.Actions.MemberTracker@)">
            <summary>指定したキーに関連付けられているメンバを取得します。</summary>
            <param name="name">メンバを取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を実装するオブジェクトに格納されている場合は
            <c>true</c>。それ以外の場合は <c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.Remove(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.ContainsKey(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.IAttributesCollection"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.Add(System.Object,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用するオブジェクト。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.TryGetValue(System.Object,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を実装するオブジェクトに格納されている場合は
            <c>true</c>。それ以外の場合は <c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.Remove(System.Object)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.ContainsKey(System.Object)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.IAttributesCollection"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.IAttributesCollection"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.AsObjectKeyedDictionary">
            <summary>このオブジェクトを <see cref="T:System.Collections.Generic.IDictionary`2"/> として取得します。</summary>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> という形式で取得された現在のオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションを反復処理する列挙子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.System#Collections#IEnumerable#GetEnumerator">
            <summary>このコレクションを反復処理する列挙子を返します。</summary>
            <returns>コレクションを反復処理する列挙子。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.LoadNamespaces">
            <summary>最上位名前空間に関連付けられたすべてのアセンブリ内の型を適切な名前空間に配置します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.SetTopPackage(Microsoft.Scripting.Actions.TopNamespaceTracker)">
            <summary>この名前空間の最上位名前空間を設定します。</summary>
            <param name="package">設定する最上位名前空間を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.GetMemberNames">
            <summary>この名前空間に含まれているすべての名前空間または型の名前を取得します。</summary>
            <returns>名前空間内のすべての名前空間または型の名前のリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.UpdateSubtreeIds">
            <summary>この名前空間以下のすべての名前空間の一意識別子を更新します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.NamespaceTracker.LoadTypesFromAssembly(System.Reflection.Assembly,System.Boolean)">
            <summary>指定されたアセンブリから型を読み込みます。</summary>
            <param name="assembly">読み込む型を定義しているアセンブリを指定します。</param>
            <param name="includePrivateTypes">アセンブリ内のプライベートである型を読み込むかどうかを示す値を指定します。</param>
            <returns>アセンブリで定義された型の配列。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.Name">
            <summary>この名前空間の名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.Item(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="name">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.SymbolAttributes">
            <summary><see cref="T:Microsoft.Scripting.SymbolId"/> がキーである属性のディクショナリを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.Count">
            <summary><see cref="T:Microsoft.Scripting.IAttributesCollection"/> に格納されている要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.Keys">
            <summary><see cref="T:Microsoft.Scripting.IAttributesCollection"/> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.PackageAssemblies">
            <summary>この名前空間に関連付けられたアセンブリのリストを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.Id">
            <summary>この名前空間の一意識別子を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.NamespaceTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.NamespaceTracker.TypeNames">
            <summary>
            単一のアセンブリによる単一の名前空間内のパブリックでネストされていないすべての型の名前を格納します。
            このクラスによってすべての型を積極的にロードすることなく名前空間を検査できるようになります。
            型の積極的ロードは起動時間を遅くし、ワーキングセットを増加させ、さらに要求よりも早く TypeLoadException を発生させる可能性があるため意味的に正しくなくなります。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ReflectedTypeTracker">
            <summary>単一の <see cref="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.Type"/> に対応する <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.TypeTracker">
            <summary>型を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeTracker.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeTracker.GetMemberNames">
            <summary>この型に含まれているすべてのメンバの名前を取得します。</summary>
            <returns>メンバの名前のリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeTracker.CollectMembers(System.Collections.Generic.ISet{System.String},System.Type)">
            <summary>指定された型に含まれているすべてのメンバの名前を指定されたセットに追加します。</summary>
            <param name="names">メンバの名前を追加するセットを指定します。</param>
            <param name="t">追加するメンバを含んでいる型を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeTracker.op_Explicit(Microsoft.Scripting.Actions.TypeTracker)~System.Type">
            <summary>動的言語全体にわたる <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> から <see cref="P:Microsoft.Scripting.Actions.TypeTracker.Type"/> への暗黙的な変換を有効化します。</summary>
            <param name="tracker">変換元の <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/>。</param>
            <returns><see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> に対応する <see cref="P:Microsoft.Scripting.Actions.TypeTracker.Type"/>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeTracker.Type">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> によって表される型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeTracker.IsGenericType">
            <summary>この型がジェネリック型かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeTracker.IsPublic">
            <summary>この型がパブリックとして宣言されているかどうかを示す値を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedTypeTracker.#ctor(System.Type)">
            <summary>基になる型を使用して、<see cref="T:Microsoft.Scripting.Actions.ReflectedTypeTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="type">基になる型を表す <see cref="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.Type"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedTypeTracker.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.DeclaringType">
            <summary>現在の型が入れ子にされた型の場合は、これを宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.IsPublic">
            <summary>この型がパブリックとして宣言されているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.Type">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> によって表される型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedTypeTracker.IsGenericType">
            <summary>この型がジェネリック型かどうかを示す値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.ReflectedPropertyTracker">
            <summary>型に定義されている実際のプロパティを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.#ctor(System.Reflection.PropertyInfo)">
            <summary>基になる <see cref="T:System.Reflection.PropertyInfo"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.ReflectedPropertyTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="property">基になるプロパティを表す <see cref="T:System.Reflection.PropertyInfo"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.GetGetMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな get アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな get アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの get アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で get アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも get アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.GetSetMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな set アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな set アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの set アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で set アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも set アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.GetDeleteMethod(System.Boolean)">
            <summary>このプロパティのパブリックまたは非パブリックな delete アクセサーを返します。</summary>
            <param name="privateMembers">非パブリックな delete アクセサーを返すかどうかを示します。非パブリック アクセサーを返す場合は <c>true</c>。それ以外の場合は <c>false</c>。</param>
            <returns>
            <paramref name="privateMembers"/> が <c>true</c> の場合は、このプロパティの delete アクセサーを表す <see cref="T:System.Reflection.MethodInfo"/> オブジェクト。
            <paramref name="privateMembers"/> が <c>false</c> で delete アクセサーが非パブリックの場合、または <paramref name="privateMembers"/> が <c>true</c> でも delete アクセサーがない場合は、<c>null</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.GetIndexParameters">
            <summary>派生クラスでオーバーライドされた場合に、プロパティのすべてのインデックス パラメータの配列を返します。</summary>
            <returns>インデックスのパラメーターを格納している <see cref="T:System.Reflection.ParameterInfo"/> 型の配列。プロパティがインデックス付けされていない場合、配列の要素はゼロ (0) です。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.ReflectedPropertyTracker.ToString">
            <summary>このオブジェクトの文字列表現を取得します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedPropertyTracker.Name">
            <summary>メンバの名前を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedPropertyTracker.DeclaringType">
            <summary>メンバを論理的に宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedPropertyTracker.IsStatic">
            <summary>このプロパティが静的であるかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedPropertyTracker.PropertyType">
            <summary>このプロパティの型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.ReflectedPropertyTracker.Property">
            <summary>基になるプロパティを表す <see cref="T:System.Reflection.PropertyInfo"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.TopNamespaceTracker">
            <summary>ロードされたすべてのアセンブリや組み込みモジュールなどの追加の情報を含む最上位名前空間を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.#ctor(Microsoft.Scripting.Runtime.ScriptDomainManager)">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を使用して、<see cref="T:Microsoft.Scripting.Actions.TopNamespaceTracker"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="manager">この最上位名前空間に関連付けられる <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.TryGetPackage(System.String)">
            <summary>指定された名前空間に関連付けられたパッケージを取得し、関連付けられたモジュールをパッケージがインポートされたとしてマークします。</summary>
            <param name="name">インポートする名前空間の名前を指定します。</param>
            <returns>指定された名前空間を表す <see cref="T:Microsoft.Scripting.Actions.NamespaceTracker"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.TryGetPackage(Microsoft.Scripting.SymbolId)">
            <summary>指定された名前空間に関連付けられたパッケージを取得し、関連付けられたモジュールをパッケージがインポートされたとしてマークします。</summary>
            <param name="name">インポートする名前空間の名前を <see cref="T:Microsoft.Scripting.SymbolId"/> として指定します。</param>
            <returns>指定された名前空間を表す <see cref="T:Microsoft.Scripting.Actions.NamespaceTracker"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.TryGetPackageAny(System.String)">
            <summary>
            指定された名前のパッケージを取得し、関連付けられたモジュールをパッケージがインポートされたとしてマークします。
            取得されるパッケージは型である可能性もあります。
            </summary>
            <param name="name">インポートするパッケージの名前を指定します。</param>
            <returns>指定されたパッケージ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.TryGetPackageAny(Microsoft.Scripting.SymbolId)">
            <summary>
            指定された名前のパッケージを取得し、関連付けられたモジュールをパッケージがインポートされたとしてマークします。
            取得されるパッケージは型である可能性もあります。
            </summary>
            <param name="name">インポートするパッケージの名前を <see cref="T:Microsoft.Scripting.SymbolId"/> として指定します。</param>
            <returns>指定されたパッケージ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.TryGetPackageLazy(Microsoft.Scripting.SymbolId)">
            <summary>指定された名前のパッケージを取得します。型のロードなどは行いません。</summary>
            <param name="name">取得するパッケージの名前を <see cref="T:Microsoft.Scripting.SymbolId"/> として指定します。</param>
            <returns>取得されたパッケージ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.LoadAssembly(System.Reflection.Assembly)">
            <summary>指定されたアセンブリをロードします。</summary>
            <param name="assem">ロードするアセンブリを指定します。</param>
            <returns>初めてアセンブリがロードされた場合は <c>true</c>。以前にロードされていた場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.PublishComTypes(System.Reflection.Assembly)">
            <summary>アセンブリをスキャンして、COM オブジェクトの型定義を COM インターフェイスの GUID と関連付けます。</summary>
            <param name="interopAssembly">スキャンする (相互運用) アセンブリを指定します。</param>
            <remarks>読み込んだすべてのアセンブリのスキャンは不経済なため、将来、COM 型のスキャンをトリガするより明示的なユーザーバインダーを考案する可能性があります。</remarks>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TopNamespaceTracker.LoadNamespaces">
            <summary>最上位名前空間に関連付けられたすべてのアセンブリ内の型を適切な名前空間に配置します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TopNamespaceTracker.DomainManager">
            <summary>最上位名前空間に関連付けられているドメイン管理を行う <see cref="T:Microsoft.Scripting.Runtime.ScriptDomainManager"/> を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.TrackerTypes">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> が表すメンバの種類を指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.None">
            <summary>どの種類のメンバも指定しません。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Constructor">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.ConstructorTracker"/> により表されるコンストラクタであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Event">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.EventTracker"/> により表されるイベントであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Field">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.FieldTracker"/> により表されるフィールドであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Method">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.MethodTracker"/> により表されるメソッドであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Property">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.PropertyTracker"/> により表されるプロパティであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Type">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> により表される型であることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Namespace">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.NamespaceTracker"/> により表される名前空間であることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.MethodGroup">
            <summary>メンバが <see cref="F:Microsoft.Scripting.Actions.TrackerTypes.MethodGroup"/> により表されるメソッドオーバーロードのグループであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.TypeGroup">
            <summary>メンバが <see cref="F:Microsoft.Scripting.Actions.TrackerTypes.TypeGroup"/> により表されるジェネリック アリティの異なる型のグループであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Custom">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.CustomTracker"/> により表されるカスタムメンバであることを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.Bound">
            <summary>メンバが <see cref="T:Microsoft.Scripting.Actions.BoundMemberTracker"/> により表され、インスタンスに関連付けられていることを指定します。</summary>        
        </member>
        <member name="F:Microsoft.Scripting.Actions.TrackerTypes.All">
            <summary>すべてのメンバの種類を指定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Actions.TypeGroup">
            <summary>
            ジェネリック型引数の数により区別された型のグループを表します。
            このグループが単一の型として扱われた場合は、グループに含まれるジェネリックでない型を表すことになります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.GetMemberNames">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれているすべての型のメンバの名前を取得します。</summary>
            <returns><see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内のすべての型のメンバの名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.GetTypeForArity(System.Int32)">
            <summary>ジェネリック型引数を指定された個数もつ型を取得します。</summary>
            <param name="arity">取得する型のもつジェネリック型引数の個数を指定します。</param>
            <returns>ジェネリック型引数を指定された個数持つ型を表す <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/>。対象の型がこの <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に存在しない場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.Merge(Microsoft.Scripting.Actions.TypeTracker,Microsoft.Scripting.Actions.TypeTracker)">
            <summary>既存の <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> に新しい <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> をマージします。</summary>
            <param name="existingType">マージされる <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> を指定します。<c>null</c> にすることもできます。</param>
            <param name="newType">マージされたリストに追加される新しい型を表す <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> を指定します。</param>
            <returns>マージされたリスト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.GetGenericArity(System.Type)">
            <summary>ジェネリック型引数の個数を取得します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Actions.TypeGroup.TryGetNonGenericType(System.Type@)">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれている非ジェネリック型の取得を試みます。</summary>
            <param name="nonGenericType">取得された非ジェネリック型が格納される変数を指定します。</param>
            <returns><see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内に非ジェネリック型が存在して取得された場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.NonGenericType">
            <summary>
            この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれている非ジェネリック型を取得します。
            <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内に非ジェネリック型が存在しない場合は例外をスローします。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.Types">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれているすべての型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.TypesByArity">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内から提供されたジェネリック型引数の数に応じた型を返すディクショナリを取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.MemberType">
            <summary><see cref="T:Microsoft.Scripting.Actions.MemberTracker"/> の種類を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.DeclaringType">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれているすべての型を宣言する型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.Name">
            <summary><see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> の基本名を取得します。この名前は型引数の数を除いてすべての型で共有されています。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.Type">
            <summary>
            この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれている非ジェネリック型を取得します。
            <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内に非ジェネリック型が存在しない場合は例外をスローします。
            </summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.IsGenericType">
            <summary>この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に非ジェネリック型が含まれているかどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Actions.TypeGroup.IsPublic">
            <summary>
            この <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> に含まれている非ジェネリック型がパブリックとして宣言されているかどうかを示す値を取得します。
            <see cref="T:Microsoft.Scripting.Actions.TypeGroup"/> 内に非ジェネリック型が含まれていない場合は例外をスローします。
            </summary>
        </member>
        <member name="T:Microsoft.Scripting.Ast.IfStatementBuilder">
            <summary>If ステートメントを自然な構文で構築できるビルダーを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Ast.IfStatementBuilder"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.ElseIf(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
            <summary>このビルダーに新しい ElseIf 句を追加します。</summary>
            <param name="test"><paramref name="body"/> が実行される条件を指定します。</param>
            <param name="body">実行される式を指定します。</param>
            <returns>新しい ElseIf 句が追加されたこのビルダー。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.Else(System.Linq.Expressions.Expression[])">
            <summary>このビルダーに Else 句を追加して、等価な <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <param name="body">どの条件にも一致しなかった場合に実行される式を指定します。</param>
            <returns>Else 句が追加された時点のビルダーの状態と等価な <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.BuildConditions(System.Collections.Generic.IEnumerable{Microsoft.Scripting.Ast.IfStatementTest},System.Linq.Expressions.Expression)">
            <summary>指定された一連の <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> および Else 句から If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="clauses">条件および実行される式を表す一連の <see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> を指定します。</param>
            <param name="else">どの条件にも一致しなかった場合に実行される式を指定します。</param>
            <returns>If-Then-Else を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.ToStatement">
            <summary>現在のビルダーの状態と等価な <see cref="T:System.Linq.Expressions.Expression"/> を返します。</summary>
            <returns>現在のビルダーの状態と等価な <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementBuilder.op_Implicit(Microsoft.Scripting.Ast.IfStatementBuilder)~System.Linq.Expressions.Expression">
            <summary>ビルダーを現在の状態と等価な <see cref="T:System.Linq.Expressions.Expression"/> に変換します。</summary>
            <param name="builder">変換元のビルダー。</param>
            <returns>変換元のビルダーの状態と等価な <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Ast.IfStatementTest">
            <summary>If 文で条件とその条件が真の場合に実行される式の組を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Ast.IfStatementTest.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>条件および式を使用して、<see cref="T:Microsoft.Scripting.Ast.IfStatementTest"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="test">成立または不成立を判断する条件を指定します。</param>
            <param name="body">条件が真の場合に実行される式を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Ast.IfStatementTest.Test">
            <summary>成立または不成立を判断する条件を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Ast.IfStatementTest.Body">
            <summary>条件が真の場合に実行される式を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Generation.CompilerHelpers">
            <summary>コンパイラに必要なヘルパー メソッドを公開します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Generation.CompilerHelpers.PublicStatic">
            <summary>public static であるメソッドの属性を表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetMissingValue(System.Type)">
            <summary>指定された型の存在しないことを表す値を取得します。</summary>
            <param name="type">存在しないことを表す値の型を指定します。</param>
            <returns>指定された型の存在しないことを表す値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsStatic(System.Reflection.MethodBase)">
            <summary>指定されたメソッドがインスタンス参照の必要なく呼び出すことができるかどうかを判断します。</summary>
            <param name="mi">判断するメソッドを指定します。</param>
            <returns>メソッドにインスタンスを与えることなく呼び出すことができる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsConstructor(System.Reflection.MethodBase)">
            <summary>指定されたメソッドがオブジェクトを構築するメソッドであるかどうかを判断します。</summary>
            <param name="mb">判断するメソッドを指定します。</param>
            <returns>メソッドがオブジェクトを構築するメソッドである場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsComparisonOperator(System.Linq.Expressions.ExpressionType)">
            <summary>指定された式ツリー ノード型が比較演算子であるかどうかを判断します。</summary>
            <param name="op">判断する式ツリー ノード型を指定します。</param>
            <returns>式ツリー ノード型が比較演算子を表す場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetType(System.Object)">
            <summary><c>null</c> を含むすべてのオブジェクトに対する型を返します。</summary>
            <param name="obj">型を返すオブジェクトを指定します。<c>null</c> も指定することができます。</param>
            <returns>指定されたオブジェクトの型。<c>null</c> の場合は <see cref="T:Microsoft.Scripting.Runtime.DynamicNull"/> の型が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TypesEqual(System.Collections.IEnumerable,System.Int32,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>指定されたリストのそれぞれの要素の型が指定された型と等しいかどうかを判断します。比較はリスト内の指定されたインデックスから開始されます。</summary>
            <param name="args">型が比較されるリストを指定します。</param>
            <param name="start">型の比較が開始されるリスト内の位置を示す 0 から始まるインデックスを指定します。</param>
            <param name="types">要素の型と比較する型のリストを指定します。</param>
            <returns>指定されたリスト内のすべての要素の型が指定された型と等しければ <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.CanOptimizeMethod(System.Reflection.MethodBase)">
            <summary>指定されたメソッドが最適化可能かどうかを判断します。</summary>
            <param name="method">調べるメソッドを指定します。</param>
            <returns>メソッドが最適化可能であれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryGetCallableMethod(System.Reflection.MethodInfo)">
            <summary>このメソッドにディスパッチするパブリックである型で宣言されているメソッドを取得します。</summary>
            <param name="method">パブリックである型で宣言されているメソッドを取得するメソッドを指定します。</param>
            <returns>
            指定されたメソッドにディスパッチするパブリックである型で宣言されているメソッドが見つかった場合はそのメソッド。
            それ以外の場合は元のメソッド。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryGetCallableMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>このメソッドにディスパッチするパブリックである型で宣言されているメソッドを取得します。</summary>
            <param name="targetType">メソッドを宣言または継承する型を指定します。</param>
            <param name="method">パブリックである型で宣言されているメソッドを取得するメソッドを指定します。</param>
            <returns>
            指定されたメソッドにディスパッチするパブリックである型で宣言されているメソッドが見つかった場合はそのメソッド。
            それ以外の場合は元のメソッド。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.FilterNonVisibleMembers(System.Type,System.Reflection.MemberInfo[])">
            <summary>指定された型のメンバから適切な可視であるメンバを取得することで不可視なメンバを除外したメンバの配列を返します。</summary>
            <param name="type">メンバを検索した型を指定します。</param>
            <param name="foundMembers">見つかったメンバを指定します。</param>
            <returns>不可視なメンバが除外されたメンバの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryGetVisibleMember(System.Reflection.MemberInfo)">
            <summary>指定されたメンバに関連づけられたメソッドから可視であるメソッドを検索することにより、可視であるメンバを取得します。</summary>
            <param name="curMember">可視であるメンバを取得するメンバを指定します。</param>
            <returns>指定されたメンバに関連する可視であるメンバ。可視であるメンバが見つからなかった場合は <c>null</c> を返します。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.MemberEquals(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
            <summary>
            指定された 2 つのメンバが IL で同じ構成を示しているかどうかを判断します。
            このメソッドは同じメンバであっても直接比較の結果を <c>false</c> にさせる <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> プロパティを無視します。
            </summary>
            <param name="self">比較する 1 番目のメンバを指定します。</param>
            <param name="other">比較する 2 番目のメンバを指定します。</param>
            <returns>指定された 2 つのメンバが IL で同じ構成を示している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetCallableMethod(System.Reflection.MethodInfo,System.Boolean)">
            <summary>このメソッドにディスパッチするパブリックである型で宣言されているメソッドを取得します。</summary>
            <param name="method">パブリックである型で宣言されているメソッドを取得するメソッドを指定します。</param>
            <param name="privateBinding">パブリックでないメソッドを呼び出すことができるかどうかを示す値を指定します。</param>
            <returns>指定されたメソッドにディスパッチするパブリックである型で宣言されているメソッド。</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="privateBinding"/> が <c>false</c> ですがパブリックであるメソッドが見つかりませんでした。</exception>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsVisible(System.Reflection.MethodBase)">
            <summary>指定されたメソッドが可視であるかどうかを判断します。</summary>
            <param name="info">判断するメソッドを指定します。</param>
            <returns>メソッドが可視である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsVisible(System.Reflection.FieldInfo)">
            <summary>指定されたフィールドが可視であるかどうかを判断します。</summary>
            <param name="info">判断するフィールドを指定します。</param>
            <returns>フィールドが可視である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsProtected(System.Reflection.MethodBase)">
            <summary>指定されたメソッドが protected であるかどうかを判断します。</summary>
            <param name="info">判断するメソッドを指定します。</param>
            <returns>メソッドが protected である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsProtected(System.Reflection.FieldInfo)">
            <summary>指定されたフィールドが protected であるかどうかを判断します。</summary>
            <param name="info">判断するフィールドを指定します。</param>
            <returns>フィールドが protected である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsProtected(System.Type)">
            <summary>指定された型が protected であるかどうかを判断します。</summary>
            <param name="type">判断する型を指定します。</param>
            <returns>型が protected である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetVisibleType(System.Object)">
            <summary>指定されたオブジェクトの型の継承階層の中で可視である型を取得します。</summary>
            <param name="value">可視である型を取得するオブジェクトを指定します。</param>
            <returns>オブジェクトの型の継承階層の中で可視である型。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetVisibleType(System.Type)">
            <summary>指定された型の継承階層の中で可視である型を取得します。</summary>
            <param name="t">可視である型を取得する型を指定します。</param>
            <returns>型の継承階層の中で可視である型。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetConstructors(System.Type,System.Boolean)">
            <summary>指定された型のコンストラクタを取得します。</summary>
            <param name="t">コンストラクタを取得する型を指定します。</param>
            <param name="privateBinding">プライベートなコンストラクタを呼び出すことができるかどうかを示す値を指定します。</param>
            <returns>指定された型に定義されているコンストラクタの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetConstructors(System.Type,System.Boolean,System.Boolean)">
            <summary>指定された型のコンストラクタを取得します。</summary>
            <param name="t">コンストラクタを取得する型を指定します。</param>
            <param name="privateBinding">プライベートなコンストラクタを呼び出すことができるかどうかを示す値を指定します。</param>
            <param name="includeProtected">protected なコンストラクタを含めるかどうかを示す値を指定します。</param>
            <returns>指定された型に定義されているコンストラクタの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.FilterConstructorsToPublicAndProtected(System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo})">
            <summary>指定されたコンストラクタからパブリックまたは protected として定義されているコンストラクタのみを抽出します。</summary>
            <param name="ci">元のコンストラクタを指定します。</param>
            <returns>抽出されたコンストラクタの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetImplicitConverter(System.Type,System.Type)">
            <summary>指定された型の間のユーザー定義の暗黙的な変換メソッドを取得します。</summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <returns>型の間のユーザー定義の暗黙的な変換メソッド。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetExplicitConverter(System.Type,System.Type)">
            <summary>指定された型の間のユーザー定義の明示的な変換メソッドを取得します。</summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <returns>型の間のユーザー定義の明示的な変換メソッド。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryImplicitConversion(System.Object,System.Type,System.Object@)">
            <summary>指定された値から指定された型への暗黙的な変換を試みます。</summary>
            <param name="value">変換元の値を指定します。</param>
            <param name="to">値が変換される型を指定します。</param>
            <param name="result">暗黙的変換の結果を格納する変数を指定します。</param>
            <returns>暗黙的変換が成功した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsStrongBox(System.Object)">
            <summary>指定されたオブジェクトの型が <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> であるかどうかを判断します。</summary>
            <param name="target">判断するオブジェクトを指定します。</param>
            <returns>オブジェクトの型が <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.IsStrongBox(System.Type)">
            <summary>指定された型が <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> であるかどうかを判断します。</summary>
            <param name="t">判断する型を指定します。</param>
            <returns>型が <see cref="T:System.Runtime.CompilerServices.StrongBox`1"/> である場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetTryConvertReturnValue(System.Type)">
            <summary>変換が失敗した場合の値を表す <see cref="T:System.Linq.Expressions.Expression"/> を作成します。</summary>
            <param name="type">変換先の型を指定します。</param>
            <returns>変換が失敗した場合の値を表す <see cref="T:System.Linq.Expressions.Expression"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.HasTypeConverter(System.Type,System.Type)">
            <summary>指定された型の間で変換を行うことができる <see cref="T:System.ComponentModel.TypeConverter"/> が存在するかどうかを調べます。</summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の <see cref="T:System.ComponentModel.TypeConverterAttribute"/> が定義されている型を指定します。</param>
            <returns>指定された型の間で変換を行うことができる <see cref="T:System.ComponentModel.TypeConverter"/> が存在すれば <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryApplyTypeConverter(System.Object,System.Type,System.Object@)">
            <summary>指定された型の間で <see cref="T:System.ComponentModel.TypeConverter"/> を適用して変換を試みます。</summary>
            <param name="value">変換される値を指定します。</param>
            <param name="toType">変換先の型を指定します。</param>
            <param name="result">変換の結果が格納される変数を指定します。</param>
            <returns>指定された型の間での変換が成功した場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.TryGetTypeConverter(System.Type,System.Type,System.ComponentModel.TypeConverter@)">
            <summary>指定された型の間で変換を行うことができる <see cref="T:System.ComponentModel.TypeConverter"/> の取得を試みます。</summary>
            <param name="fromType">変換元の型を指定します。</param>
            <param name="toType">変換先の <see cref="T:System.ComponentModel.TypeConverterAttribute"/> が定義されている型を指定します。</param>
            <param name="converter">変換を行うことができる <see cref="T:System.ComponentModel.TypeConverter"/> が格納される変数を指定します。</param>
            <returns>指定された型の間で変換を行うことができる <see cref="T:System.ComponentModel.TypeConverter"/> が存在する場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.GetMethodTargets(System.Object)">
            <summary>指定されたオブジェクトを呼び出すことができるメソッドを取得します。</summary>
            <param name="obj">呼び出すメソッドを取得するオブジェクトを指定します。</param>
            <returns>オブジェクトを呼び出すメソッドの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.MakeCallSiteType(System.Type[])">
            <summary>指定された型の引数および戻り値のデリゲートを型引数に持つ <see cref="T:System.Runtime.CompilerServices.CallSite`1"/> を作成します。</summary>
            <param name="types">デリゲートの引数および戻り値の型を指定します。</param>
            <returns>指定された型の引数および戻り値のデリゲートを型引数に持つ <see cref="T:System.Runtime.CompilerServices.CallSite`1"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.LightCompile(System.Linq.Expressions.LambdaExpression)">
            <summary>指定されたラムダ式に対して翻訳されるデリゲートを作成します。</summary>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <returns>ラムダ式を翻訳できるデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.LightCompile(System.Linq.Expressions.LambdaExpression,System.Int32)">
            <summary>指定されたラムダ式に対して翻訳されるデリゲートを作成します。</summary>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="compilationThreshold">インタプリタがコンパイルを開始する繰り返し数を指定します。</param>
            <returns>ラムダ式を翻訳できるデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.LightCompile``1(System.Linq.Expressions.Expression{``0})">
            <summary>指定されたラムダ式に対して翻訳されるデリゲートを作成します。</summary>
            <typeparam name="TDelegate">ラムダ式のデリゲート型を指定します。</typeparam>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <returns>ラムダ式を翻訳できるデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.LightCompile``1(System.Linq.Expressions.Expression{``0},System.Int32)">
            <summary>指定されたラムダ式に対して翻訳されるデリゲートを作成します。</summary>
            <typeparam name="TDelegate">ラムダ式のデリゲート型を指定します。</typeparam>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="compilationThreshold">インタプリタがコンパイルを開始する繰り返し数を指定します。</param>
            <returns>ラムダ式を翻訳できるデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.CompileToMethod(System.Linq.Expressions.LambdaExpression,System.Reflection.Emit.MethodBuilder,System.Boolean)">
            <summary>ラムダ式をメソッド定義にコンパイルします。</summary>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="method">ラムダ式の IL を保持するために使用される <see cref="T:System.Reflection.Emit.MethodBuilder"/> を指定します。</param>
            <param name="emitDebugSymbols">PDB シンボルストアにデバッグ情報が出力されるかどうかを示す値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.Compile``1(System.Linq.Expressions.Expression{``0},System.Boolean)">
            <summary>
            ラムダ式をコンパイルします。
            <paramref name="emitDebugSymbols"/> が <c>true</c> の場合、ラムダ式は <see cref="T:System.Reflection.Emit.TypeBuilder"/> 内にコンパイルされます。
            それ以外の場合は、このメソッドは単に <see cref="M:System.Linq.Expressions.Expression`1.Compile"/> を呼び出すことと等価です。
            この回避策は動的メソッドがデバッグ情報を持つことができないという CLR の制限によるものです。
            </summary>
            <typeparam name="TDelegate">ラムダ式のデリゲート型を指定します。</typeparam>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="emitDebugSymbols">デバッグ シンボル (PDB) が <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator"/> によって出力されるかどうかを示す値を指定します。</param>
            <returns>コンパイルされたデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.CompileToMethod``1(System.Linq.Expressions.Expression{``0},System.Runtime.CompilerServices.DebugInfoGenerator,System.Boolean)">
            <summary>
            ラムダ式を新しい型に出力することでコンパイルします。オプションでデバッグ可能であることをマークできます。
            この回避策は動的メソッドがデバッグ情報を持つことができないという CLR の制限によるものです。
            </summary>
            <typeparam name="TDelegate">ラムダ式のデリゲート型を指定します。</typeparam>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="debugInfoGenerator">コンパイラによってシーケンス ポイントのマークやローカル変数の注釈に使用される <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator"/> を指定します。</param>
            <param name="emitDebugSymbols">デバッグ シンボル (PDB) が <paramref name="debugInfoGenerator"/> によって出力されるかどうかを示す値を指定します。</param>
            <returns>コンパイルされたデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.CompileToMethod(System.Linq.Expressions.LambdaExpression,System.Runtime.CompilerServices.DebugInfoGenerator,System.Boolean)">
            <summary>
            ラムダ式を新しい型に出力することでコンパイルします。オプションでデバッグ可能であることをマークできます。
            この回避策は動的メソッドがデバッグ情報を持つことができないという CLR の制限によるものです。
            </summary>
            <param name="lambda">コンパイルするラムダ式を指定します。</param>
            <param name="debugInfoGenerator">コンパイラによってシーケンス ポイントのマークやローカル変数の注釈に使用される <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator"/> を指定します。</param>
            <param name="emitDebugSymbols">デバッグ シンボル (PDB) が <paramref name="debugInfoGenerator"/> によって出力されるかどうかを示す値を指定します。</param>
            <returns>コンパイルされたデリゲート。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.CanEmitConstant(System.Object,System.Type)">
            <summary>IL に指定された型の定数値を出力できるかどうかを判断します。</summary>
            <param name="value">調べる値を指定します。</param>
            <param name="type">調べる型を指定します。</param>
            <returns>指定された型の定数値を IL に出力できる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Generation.CompilerHelpers.Reduce(System.Linq.Expressions.DynamicExpression)">
            <summary><see cref="T:System.Linq.Expressions.DynamicExpression"/> を site.Target(site, *args) の形に縮退します。</summary>
            <param name="node">縮退するノードを指定します。</param>
            <returns>縮退されたノード。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Generation.CompilerHelpers.BoundConstantsRewriter">
            <summary>すべての生存しているオブジェクトを取り除き、型の静的フィールドに配置するリライターを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.IExpressionSerializable">
            <summary>
            オブジェクトの式ツリーへのシリアル化を可能にします。
            式ツリーはオブジェクトの逆シリアル化ができるように、アセンブリに出力されます。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.IExpressionSerializable.CreateExpression">
            <summary>オブジェクトの現在の状態を式ツリーにシリアル化します。</summary>
            <returns>オブジェクトの状態がシリアル化された式ツリー。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Generation.ToDiskRewriter">
            <summary>コードをディスクに保存できるように、定数および動的サイトをシリアライズします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Generation.ToDiskRewriter.RewriteLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>指定されたラムダ式をリライトします。</summary>
            <param name="lambda">リライトするラムダ式を指定します。</param>
            <returns>リライトされたラムダ式。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.BinderType">
            <summary>メソッドバインダーが行うバインディングの種類を指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BinderType.Normal">
            <summary>メソッドバインダーは通常のバインディングを行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BinderType.BinaryOperator">
            <summary>メソッドバインダーは二項演算のバインディングを行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BinderType.ComparisonOperator">
            <summary>メソッドバインダーは比較演算のバインディングを行います。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.BinderType.Constructor">
            <summary>メソッドバインダーは返されるインスタンスで使用されないキーワード引数に対するプロパティまたはフィールドを設定します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DlrCachedCodeAttribute">
            <summary>保存される <see cref="T:Microsoft.Scripting.ScriptCode"/> に適用され、ディスクからの <see cref="T:Microsoft.Scripting.ScriptCode"/> の再作成に使用される属性を表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute">
            <summary>キャッシュされ最適化されているメソッドをマークします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute.#ctor(System.String[])">
            <summary>スコープ内の名前を使用して、<see cref="T:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="names">最適化されたスコープに格納されている名前を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.CachedOptimizedCodeAttribute.Names">
            <summary>最適化されたスコープに格納されている名前を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.DocumentationAttribute">
            <summary> 
            アセンブリ内にメタデータとして格納されているドキュメントを提供する機構を提供します。
            この属性を適用すると、XML ドキュメントが利用できない場合でも実行時にユーザーに対してドキュメントを提供することが可能になります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.DocumentationAttribute.#ctor(System.String)">
            <summary>提供するドキュメントを指定して、<see cref="T:Microsoft.Scripting.Runtime.DocumentationAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="documentation">ユーザーに提供されるドキュメントを指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.DocumentationAttribute.Documentation">
            <summary>ユーザーに提供されるドキュメントを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ExceptionHelpers">
            <summary>例外に関するヘルパー メソッドを格納します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExceptionHelpers.UpdateForRethrow(System.Exception)">
            <summary>例外が再スローされる前にスタックトレースを更新します。こうすることで、ユーザーに妥当なスタックトレースを提供することができます。</summary>
            <param name="rethrow">再スローされる例外を指定します。</param>
            <returns>スタックトレース情報が更新された例外。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExceptionHelpers.GetExceptionStackTraces(System.Exception)">
            <summary>指定された例外に関連付けられているすべてのスタックトレースデータを返します。</summary>
            <param name="rethrow">スタックトレースデータを取得する例外を指定します。</param>
            <returns>例外に関連付けられたスタックトレースデータ。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ExplicitConversionMethodAttribute">
            <summary>メソッドによって明示的なユーザー定義の変換を行うことが可能であることを DLR に通知します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExplicitConversionMethodAttribute.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.ExplicitConversionMethodAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Extensible`1">
            <summary>継承によって拡張できない型を動的言語上で拡張できるようにします。</summary>
            <typeparam name="T">拡張する型を指定します。</typeparam>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.Extensible`1"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.#ctor(`0)">
            <summary>指定された値を使用して、<see cref="T:Microsoft.Scripting.Runtime.Extensible`1"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="value">拡張する型の値を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.Equals(System.Object)">
            <summary>指定されたオブジェクトがこのオブジェクトと等しいかどうかを判断します。</summary>
            <param name="obj">比較するオブジェクトを指定します。</param>
            <returns>指定されたオブジェクトがこのオブジェクトと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.ToString">
            <summary>このオブジェクトの文字列表現を返します。</summary>
            <returns>オブジェクトの文字列表現。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.Extensible`1.op_Implicit(Microsoft.Scripting.Runtime.Extensible{`0})~`0">
            <summary>指定された <see cref="T:Microsoft.Scripting.Runtime.Extensible`1"/> から基になる値を取得します。</summary>
            <param name="extensible">基になる値を取得する <see cref="T:Microsoft.Scripting.Runtime.Extensible`1"/>。</param>
            <returns><see cref="T:Microsoft.Scripting.Runtime.Extensible`1"/> の基になる値。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.Extensible`1.Value">
            <summary>このオブジェクトが拡張する型の値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ExtensionTypeAttribute">
            <summary>アセンブリ内のクラスを他の型に対する拡張型としてマークします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ExtensionTypeAttribute.#ctor(System.Type,System.Type)">
            <summary>拡張する型と拡張される型を使用して、<see cref="T:Microsoft.Scripting.Runtime.ExtensionTypeAttribute"/> クラスの新しいインスタンスを初期化しますｊ。</summary>
            <param name="extends">拡張される型を指定します。</param>
            <param name="extensionType">拡張メンバを提供する型を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ExtensionTypeAttribute.ExtensionType">
            <summary>拡張される型に追加する拡張メンバを含んでいる型を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ExtensionTypeAttribute.Extends">
            <summary><see cref="P:Microsoft.Scripting.Runtime.ExtensionTypeAttribute.ExtensionType"/> によって拡張される型を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ImplicitConversionMethodAttribute">
            <summary>メソッドによって暗黙的なユーザー定義の変換を行うことが可能であることを DLR に通知します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ImplicitConversionMethodAttribute.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.ImplicitConversionMethodAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ModuleChangeEventArgs">
            <summary>モジュールの内容が変更された場合に発生するイベントのデータを表します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ModuleChangeEventArgs.#ctor(System.String,Microsoft.Scripting.Runtime.ModuleChangeType)">
            <summary>指定された名前および型を使用して、<see cref="T:Microsoft.Scripting.Runtime.ModuleChangeEventArgs"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">変更が発生したシンボルの名前を指定します。</param>
            <param name="changeType">モジュールに発生した変更を示す <see cref="T:Microsoft.Scripting.Runtime.ModuleChangeType"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ModuleChangeEventArgs.#ctor(System.String,Microsoft.Scripting.Runtime.ModuleChangeType,System.Object)">
            <summary>指定された名前、型および変更された値を使用して、<see cref="T:Microsoft.Scripting.Runtime.ModuleChangeEventArgs"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">変更が発生したシンボルの名前を指定します。</param>
            <param name="changeType">モジュールに発生した変更を示す <see cref="T:Microsoft.Scripting.Runtime.ModuleChangeType"/> を指定します。</param>
            <param name="value">シンボルに新しく設定された値を指定します。</param>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ModuleChangeEventArgs.Name">
            <summary>変更が発生したシンボルの名前を指定します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ModuleChangeEventArgs.ChangeType">
            <summary>シンボルがどのように変更されたかを示す <see cref="T:Microsoft.Scripting.Runtime.ModuleChangeType"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.ModuleChangeEventArgs.Value">
            <summary>シンボルに新しく設定された値を取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ModuleChangeType">
            <summary>シンボルがどのように変更されたかを指定します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ModuleChangeType.Set">
            <summary>モジュール内で新しい値が設定されました。(あるいは以前の値が変更されました。)</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.ModuleChangeType.Delete">
            <summary>値がモジュールから削除されました。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.OperationFailed">
            <summary>演算子メソッドが値を提供できない場合に返されるオブジェクトを表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.OperationFailed.Value">
            <summary>このクラスの唯一のインスタンスを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.OperatorSlotAttribute">
            <summary>
            メソッドを演算子として型に追加される拡張メソッドであるとしてマークします。
            名前は op_* メソッドに関連付けられたオーバーロードを追加するという CLS 名前付け規約に一致する "Add" のような整形式の名前である必要があります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.OperatorSlotAttribute.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.OperatorSlotAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.PropertyMethodAttribute">
            <summary>メソッドがプロパティを実装するために使用される拡張メソッドであるとしてマークします。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.PropertyMethodAttribute.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.PropertyMethodAttribute"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ReflectionCache">
            <summary>リフレクションメンバのキャッシュを提供します。1 つの要求に対して常に 1 つの値のセットが返されます。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.GetMethodGroup(System.Type,System.String)">
            <summary>
            指定された型からメソッドグループを取得します。
            返されるメソッドグループは型/名前の組ではなく、定義されたメソッドに基づいて一意です。
            言い換えると、基本クラスと指定された名前で新しいメソッドを定義しない派生クラスに対する GetMethodGroup 呼び出しは、両方の型に対して同じインスタンスを返します。
            </summary>
            <param name="type">メソッドグループを取得する型を指定します。</param>
            <param name="name">取得するメソッドグループの名前を指定します。</param>
            <returns>取得されたメソッドグループ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.GetMethodGroup(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.MemberFilter)">
            <summary>
            指定された型からメソッドグループを取得します。
            返されるメソッドグループは型/名前の組ではなく、定義されたメソッドに基づいて一意です。
            言い換えると、基本クラスと指定された名前で新しいメソッドを定義しない派生クラスに対する GetMethodGroup 呼び出しは、両方の型に対して同じインスタンスを返します。
            </summary>
            <param name="type">メソッドグループを取得する型を指定します。</param>
            <param name="name">取得するメソッドグループの名前を指定します。</param>
            <param name="bindingFlags">検索方法を制御する <see cref="T:System.Reflection.BindingFlags"/> を指定します。</param>
            <param name="filter">検索結果の配列に適用されるフィルターを指定します。この引数には <c>null</c> を指定できます。</param>
            <returns>取得されたメソッドグループ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.GetMethodGroup(System.String,System.Reflection.MethodBase[])">
            <summary>指定されたメソッド配列からメソッドグループを取得します。</summary>
            <param name="name">取得するメソッドグループの名前を指定します。</param>
            <param name="methods">メソッドグループを作成するメソッドの配列を指定します。</param>
            <returns>取得されたメソッドグループ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.GetMethodGroup(System.String,Microsoft.Scripting.Actions.MemberGroup)">
            <summary>指定されたメンバグループからメソッドグループを取得します。メンバグループにはメソッドのみが含まれている必要があります。</summary>
            <param name="name">取得するメソッドグループの名前を指定します。</param>
            <param name="mems">メソッドグループを作成するメンバグループを指定します。</param>
            <returns>取得されたメソッドグループ。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.GetTypeTracker(System.Type)">
            <summary>指定された型に対する <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> を返します。</summary>
            <param name="type"><see cref="T:Microsoft.Scripting.Actions.TypeTracker"/> を取得する型を指定します。</param>
            <returns>型に対する <see cref="T:Microsoft.Scripting.Actions.TypeTracker"/>。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.ReflectionCache.MethodBaseCache">
            <summary>メソッドの配列および名前を格納して、メソッドグループの等価性を定義します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.MethodBaseCache.#ctor(System.String,System.Reflection.MethodBase[])">
            <summary>指定された名前とメソッドの配列を使用して、<see cref="T:Microsoft.Scripting.Runtime.ReflectionCache.MethodBaseCache"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="name">メソッドグループの名前を指定します。</param>
            <param name="members">メソッドグループに含まれるメソッドを表す配列を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.MethodBaseCache.Equals(System.Object)">
            <summary>このオブジェクトと指定されたオブジェクトが等しいかどうかを判断します。</summary>
            <param name="obj">等しいかどうかを調べるオブジェクトを指定します。</param>
            <returns>このオブジェクトと指定されたオブジェクトが等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.ReflectionCache.MethodBaseCache.GetHashCode">
            <summary>このオブジェクトのハッシュ値を計算します。</summary>
            <returns>オブジェクトのハッシュ値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.StaticExtensionMethodAttribute">
            <summary>拡張メソッドをインスタンスメソッドではなく静的メソッドとして型に追加する必要があるとしてマークします。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.SymbolDictionary">
            <summary>
            メンバのコレクションの格納に使用される単純なスレッドセーフのディクショナリです。
            他のすべてのシンボルディクショナリと同様にこのクラスは <see cref="T:Microsoft.Scripting.SymbolId"/> とオブジェクトの両方による検索をサポートします。
            </summary>
            <remarks>
            シンボルディクショナリは通常リテラル文字列によってインデックスされます。
            また、その文字列はシンボルを使用してハンドルされます。
            しかし文字列以外のキーを認める言語も存在します。
            この場合はオブジェクトによってインデックスされるディクショナリを作成して、シンボルによってインデックスされるディクショナリ内に保持します。
            そのようなアクセスは低速ですが許容できるものです。
            </remarks>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.#ctor">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.#ctor(Microsoft.Scripting.IAttributesCollection)">
            <summary>基にする <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を使用して、<see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="from">要素がコピーされる <see cref="T:Microsoft.Scripting.IAttributesCollection"/> を指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.Add(System.Object,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に追加します。</summary>
            <param name="key">追加する要素のキーとして使用するオブジェクト。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.ContainsKey(System.Object)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納されているかどうかを確認します。</summary>
            <param name="key"><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.Remove(System.Object)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> から削除します。</summary>
            <param name="key">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="key"/> が元の <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.TryGetValue(System.Object,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="key">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.Clear">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> からすべての項目を削除します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.Add(Microsoft.Scripting.SymbolId,System.Object)">
            <summary>指定したキーおよび値を持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に追加します。</summary>
            <param name="name">追加する要素のキーとして使用する <see cref="T:Microsoft.Scripting.SymbolId"/>。</param>
            <param name="value">追加する要素の値として使用するオブジェクト。</param>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.ContainsKey(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーの要素が <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納されているかどうかを確認します。</summary>
            <param name="name"><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> 内で検索されるキー。</param>
            <returns>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> が保持している場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.Remove(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> から削除します。</summary>
            <param name="name">削除する要素のキー。</param>
            <returns>
            要素が正常に削除された場合は <c>true</c>。それ以外の場合は <c>false</c>。
            このメソッドは、<paramref name="name"/> が元の <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に見つからなかった場合にも <c>false</c> を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.TryGetValue(Microsoft.Scripting.SymbolId,System.Object@)">
            <summary>指定したキーに関連付けられている値を取得します。</summary>
            <param name="name">値を取得する対象のキー。</param>
            <param name="value">
            このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <c>null</c>。
            このパラメーターは初期化せずに渡されます。
            </param>
            <returns>指定したキーを持つ要素が <see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納されている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.AsObjectKeyedDictionary">
            <summary>このオブジェクトを <see cref="T:System.Collections.Generic.IDictionary`2"/> として取得します。</summary>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/> という形式で取得された現在のオブジェクト。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Runtime.SymbolDictionary.GetEnumerator">
            <summary>このコレクションの要素を列挙するための列挙子を返します。</summary>
            <returns>要素の列挙に使用される列挙子。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.Keys">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> のキーを保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.Values">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> の値を保持している <see cref="T:System.Collections.Generic.ICollection`1"/> を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.Item(System.Object)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="key">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.Count">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> に格納されている要素の数を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.IsReadOnly">
            <summary><see cref="T:Microsoft.Scripting.Runtime.SymbolDictionary"/> が読み取り専用かどうかを示す値を取得します。</summary>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.Item(Microsoft.Scripting.SymbolId)">
            <summary>指定したキーを持つ要素を取得または設定します。</summary>
            <param name="name">取得または設定する要素のキー。</param>
            <returns>指定したキーを持つ要素。</returns>
        </member>
        <member name="P:Microsoft.Scripting.Runtime.SymbolDictionary.SymbolAttributes">
            <summary><see cref="T:Microsoft.Scripting.SymbolId"/> がキーである属性のディクショナリを取得します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Runtime.Uninitialized">
            <summary>初期化されていない値を表します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Runtime.Uninitialized.Instance">
            <summary>このクラスの唯一のインスタンスを表します。</summary>
        </member>
        <member name="T:Microsoft.Scripting.Utils.CollectionUtils">
            <summary>コレクションに関する拡張メソッドを提供します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionUtils.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            シーケンスを <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> でラップします。
            すべてのデータは新しい配列にコピーされるため、作成された後の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> は変更されません。
            ただし、<paramref name="enumerable"/> がすでに <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> であった場合には元のコレクションが返されます。
            </summary>
            <param name="enumerable">読み取り専用のコレクションに変換するシーケンスを指定します。</param>
            <returns>変更されない読み取り専用のコレクション。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionUtils.FindIndex``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>リストから指定された述語に一致する要素のインデックスを返します。</summary>
            <typeparam name="T">リストの要素型を指定します。</typeparam>
            <param name="collection">述語に一致する要素を検索するリストを指定します。</param>
            <param name="predicate">リストから要素を検索するための述語を指定します。</param>
            <returns>リストで述語に一致する要素が見つかった場合はそのインデックス。それ以外の場合は <c>-1</c> が返されます。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionUtils.SwapLastTwo``1(System.Collections.Generic.IList{``0})">
            <summary>インデックスによってアクセス可能なリストの末尾にある 2 個の要素を交換します。</summary>
            <typeparam name="T">要素を交換するリストの要素型を指定します。</typeparam>
            <param name="list">要素を交換するリストを指定します。</param>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionUtils.GetValueHashCode``1(System.Collections.Generic.ICollection{``0})">
            <summary>指定されたコレクションのハッシュ値を計算します。</summary>
            <typeparam name="T">ハッシュ値を計算するコレクションの要素型を指定します。</typeparam>
            <param name="items">ハッシュ値を計算するコレクションを指定します。</param>
            <returns>コレクションのハッシュ値。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.CollectionUtils.GetValueHashCode``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
            <summary>指定されたコレクションの指定された範囲のハッシュ値を計算します。</summary>
            <typeparam name="T">ハッシュ値を計算するコレクションの要素型を指定します。</typeparam>
            <param name="items">ハッシュ値を計算するコレクションを指定します。</param>
            <param name="start">ハッシュ値の計算を開始するコレクション内の位置を指定します。</param>
            <param name="count">ハッシュ値を計算するコレクション内の要素数を指定します。</param>
            <returns>コレクションの指定された範囲のハッシュ値。</returns>
        </member>
        <member name="T:Microsoft.Scripting.Utils.ReflectionUtils">
            <summary>リフレクションに関するユーティリティ メソッドを公開します。</summary>
        </member>
        <member name="F:Microsoft.Scripting.Utils.ReflectionUtils.GenericArityDelimiter">
            <summary>
            型のマングルされた名前において、ジェネリック型の名前と型パラメータの数を区切るデリミタを表します。
            マングルされた名前はジェネリック型の名称に続いて、"`" が挿入され最後にそのジェネリック型の型パラメータの個数が記述されます。
            例えば、<see cref="T:System.Collections.Generic.List`1"/> の場合、マングルされた名前は "List`1" となります。
            </summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.FormatSignature(System.Reflection.MethodBase)">
            <summary>メソッドまたはコンストラクタのシグネチャを人間が判別可能な文字列形式にフォーマットします。</summary>
            <param name="method">フォーマットされたシグネチャを取得するメソッドまたはコンストラクタを指定します。</param>
            <returns>フォーマットされたシグネチャ。</returns>4
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.FormatTypeName(System.Type,System.Func{System.Type,System.String})">
            <summary>指定された型の名前を人間が判別可能な文字列形式にフォーマットします。このメソッドではジェネリック型パラメータまたは型引数も出力されます。</summary>
            <param name="type">フォーマットされた名前を取得する型を指定します。</param>
            <param name="nameDispenser">型に対する名前を取得するデリゲートを指定します。</param>
            <returns>フォーマットされた型の名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.FormatTypeArgs(System.Type[],System.Func{System.Type,System.String})">
            <summary>指定されたジェネリック型パラメータまたは型引数を人間が判別可能な文字列形式にフォーマットします。</summary>
            <param name="types">フォーマットされた文字列を取得するジェネリック型パラメータまたは型引数を指定します。</param>
            <param name="nameDispenser">型に対する名前を取得するデリゲートを指定します。</param>
            <returns>フォーマットされた型パラメータまたは型引数。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.GetReturnType(System.Reflection.MethodBase)">
            <summary>メソッドまたはコンストラクタの戻り値の型を取得します。</summary>
            <param name="methodBase">戻り値の型を取得するメソッドまたはコンストラクタ。</param>
            <returns>メソッドの場合は戻り値の型。コンストラクタの場合は構築されるオブジェクトの型。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.SignatureEquals(System.Reflection.MethodInfo,System.Type[])">
            <summary>指定されたメソッドのシグネチャが指定されたものと等しいかどうかを判断します。</summary>
            <param name="method">判断するメソッドを指定します。</param>
            <param name="requiredSignature">等しいかどうかを確認する基準となるシグネチャを指定します。引数の型に続いて戻り値の型を指定します。</param>
            <returns>メソッドが指定されたシグネチャと等しい場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.IsExtension(System.Reflection.MemberInfo)">
            <summary>メンバが拡張メソッドであるかどうか、または型に拡張メソッドが含まれているかどうかを判断します。</summary>
            <param name="member">拡張メソッドであるか、または拡張メソッドが含まれているかを判断するメソッドまたは型を指定します。</param>
            <returns>メンバが拡張メソッドであるか、型に拡張メソッドが含まれている場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.IsOutParameter(System.Reflection.ParameterInfo)">
            <summary>パラメータが out パラメータであるかどうかを判断します。</summary>
            <param name="parameter">out パラメータかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータが out パラメータの場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.IsMandatory(System.Reflection.ParameterInfo)">
            <summary>パラメータが必須であるかどうかを判断します。つまり、省略可能ではなく、既定値も存在しないパラメータであるかどうかを調べます。</summary>
            <param name="parameter">必須であるかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータの指定が必須である場合には <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.HasDefaultValue(System.Reflection.ParameterInfo)">
            <summary>パラメータに既定値が存在するかどうかを判断します。</summary>
            <param name="parameter">既定値が存在するかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータに既定値がある場合には<c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.ProhibitsNull(System.Reflection.ParameterInfo)">
            <summary>パラメータが null 非許容であるかどうかを判断します。</summary>
            <param name="parameter">null 非許容であるかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータが null 非許容の場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.ProhibitsNullItems(System.Reflection.ParameterInfo)">
            <summary>パラメータに渡されるコレクションの要素に null を含めることができないかどうかを判断します。</summary>
            <param name="parameter">渡されるコレクションの要素に null を含めることができないかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータに渡されるコレクションの要素に null を含めることができない場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.IsParamArray(System.Reflection.ParameterInfo)">
            <summary>パラメータに任意の数の引数を指定できるかどうかを判断します。</summary>
            <param name="parameter">任意の数の引数を指定できるかどうかを調べるパラメータを指定します。</param>
            <returns>パラメータに任意の数の引数を指定できる場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.IsParamDictionary(System.Reflection.ParameterInfo)">
            <summary>通常の引数に束縛されないあらゆるキーワード引数をパラメータが受け付けるかどうかを判断します。</summary>
            <param name="parameter">通常の引数に束縛されないあらゆるキーワード引数を受け付けるかどうかを調べるパラメータを指定します。</param>
            <returns>通常の引数に束縛されないあらゆるキーワード引数をパラメータが受け付ける場合は <c>true</c>。それ以外の場合は <c>false</c>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.GetDeclaredInterfaces(System.Type)">
            <summary>指定された型によって実装されるインターフェイスを取得します。この型が継承する型で実装されたインターフェイスは含まれません。</summary>
            <param name="type">実装されたインターフェイスを取得する型を指定します。</param>
            <returns>継承階層中で <paramref name="type"/> で初めて実装されたインターフェイスの配列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.GetNormalizedTypeName(System.Type)">
            <summary>指定された型のジェネリック型パラメータの数を含まない名前を取得します。</summary>
            <param name="type">ジェネリック型パラメータの数を含まない名前を取得する型を指定します。</param>
            <returns>ジェネリック型パラメータの数を含まない名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.GetNormalizedTypeName(System.String)">
            <summary>指定された名前からジェネリック型パラメータの数に関する情報を取り除いて、型の純粋な名前を取得します。</summary>
            <param name="typeName">純粋な名前を取得する元の型名を指定します。</param>
            <returns>名前からジェネリック型パラメータの数に関する情報が除かれた名前。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.DefineMethodOverride(System.Reflection.Emit.TypeBuilder,System.Reflection.MethodAttributes,System.Reflection.MethodInfo)">
            <summary>指定されたメソッドをオーバーライドするメソッドを指定された <see cref="T:System.Reflection.Emit.TypeBuilder"/> に定義して、メソッドを生成する <see cref="T:System.Reflection.Emit.MethodBuilder"/> を返します。</summary>
            <param name="typeBuilder">オーバーライドを定義する型を示す <see cref="T:System.Reflection.Emit.TypeBuilder"/> を指定します。</param>
            <param name="additionalAttribute">メソッド オーバーライドに与える追加のメソッド属性を指定します。元の属性を置換する属性も存在します。</param>
            <param name="baseMethod">定義するメソッドによってオーバーライドされるメソッドを指定します。</param>
            <returns>指定されたメソッドをオーバーライドするメソッドを生成する <see cref="T:System.Reflection.Emit.MethodBuilder"/>。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.ReflectionUtils.CopyMethodSignature(System.Reflection.MethodInfo,System.Reflection.Emit.MethodBuilder,System.Boolean)">
            <summary>指定されたメソッドのシグネチャを指定された <see cref="T:System.Reflection.Emit.MethodBuilder"/> にコピーします。</summary>
            <param name="from">シグネチャのコピー元メソッドを指定します。</param>
            <param name="to">シグネチャのコピー先メソッドを生成する <see cref="T:System.Reflection.Emit.MethodBuilder"/> を指定します。</param>
            <param name="replaceDeclaringType">シグネチャをコピーする際に <see cref="P:System.Reflection.MethodInfo.DeclaringType"/> を置き換えるかどうかを示す値を指定します。</param>
        </member>
        <member name="T:Microsoft.Scripting.Utils.StringUtils">
            <summary>文字列に関するユーティリティ メソッドを公開します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.Utils.StringUtils.SplitWords(System.String,System.Boolean,System.Int32)">
            <summary>指定されたテキストを指定された幅で単語単位で自動的に改行し、全体をインデントします。</summary>
            <param name="text">単語単位で自動改行してインデントを行うテキストを指定します。</param>
            <param name="indentFirst">テキストの先頭行をインデントするかどうかを示す値を指定します。</param>
            <param name="lineWidth">テキストの自動改行の幅を示す文字数を指定します。</param>
            <returns>指定された幅で自動的に改行され全体がインデントされた文字列。</returns>
        </member>
        <member name="M:Microsoft.Scripting.Utils.StringUtils.AddSlashes(System.String)">
            <summary>指定されたテキストに含まれる先頭にバックスラッシュが付加されるような制御文字をエスケープします。</summary>
            <param name="value">制御文字をエスケープするテキストを指定します。</param>
            <returns>制御文字がエスケープされたテキスト。例えば CR は "\r" にエスケープされます。</returns>
        </member>
        <member name="T:Microsoft.Scripting.KeyboardInterruptException">
            <summary>インタプリタで命令の実行中にユーザーが割り込みキーを押した場合にスローされる例外。</summary>
        </member>
        <member name="M:Microsoft.Scripting.KeyboardInterruptException.#ctor">
            <summary><see cref="T:Microsoft.Scripting.KeyboardInterruptException"/> クラスの新しいインスタンスを初期化します。</summary>
        </member>
        <member name="M:Microsoft.Scripting.KeyboardInterruptException.#ctor(System.String)">
            <summary>指定したエラー メッセージを使用して、<see cref="T:Microsoft.Scripting.KeyboardInterruptException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="msg">エラーを説明するメッセージ。</param>
        </member>
        <member name="M:Microsoft.Scripting.KeyboardInterruptException.#ctor(System.String,System.Exception)">
            <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:Microsoft.Scripting.KeyboardInterruptException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="message">例外の原因を説明するエラー メッセージ。</param>
            <param name="innerException">現在の例外の原因である例外。内部例外が指定されていない場合は <c>null</c> 参照 (Visual Basic では、<c>Nothing</c>)。</param>
        </member>
        <member name="M:Microsoft.Scripting.KeyboardInterruptException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>シリアル化したデータを使用して、<see cref="T:Microsoft.Scripting.KeyboardInterruptException"/> クラスの新しいインスタンスを初期化します。</summary>
            <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo"/>。</param>
            <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext"/>。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> パラメーターが <c>null</c> です。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">クラス名が <c>null</c> であるか、または <see cref="P:KeyboardInterruptException.HResult"/> が 0 です。</exception>
        </member>
    </members>
</doc>
